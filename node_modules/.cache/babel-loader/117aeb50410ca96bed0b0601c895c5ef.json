{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oghen\\\\OneDrive\\\\Documents\\\\ClikBate\\\\super\\\\src\\\\profile\\\\TaskbarText.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useCallback, useState, useLayoutEffect } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction TaskbarTextx({\n  ShowText,\n  setShowText,\n  activeItem,\n  setactiveItem,\n  MainImageFiltersRef,\n  Dimensionx\n}) {\n  _s();\n\n  const TextCanvasRef = useRef(null);\n  const canvasRefdummy = useRef(null); ///\n  ///\n  ///\n  /// INTERFACE/TYPES FOR SCREENHEIGHT AND DARKMODE\n\n  ///\n  ///\n  ///\n  /// GET DARKMODE FROM REDUX STORE\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const [CropImageHolder, setCropImageHolder] = useState(null);\n  const [Dimension, setDimension] = useState(900);\n  const [imageHeight, setimageHeight] = useState(0);\n  const [imageWidth, setimageWidth] = useState(0);\n\n  const GiveImageSpecificDimensions = Newcropimage => {\n    let newWidth = Dimension;\n    let newHeight = Dimension;\n    const aspectRatio = Newcropimage.naturalWidth / Newcropimage.naturalHeight;\n\n    if (newWidth / newHeight > aspectRatio) {\n      newWidth = newHeight * aspectRatio;\n    } else {\n      newHeight = newWidth / aspectRatio;\n    }\n\n    setimageHeight(newHeight);\n    setimageWidth(newWidth);\n  };\n\n  useLayoutEffect(() => {\n    if (ShowText) {\n      setTimeout(() => {\n        const Newcropimage = new Image();\n        Newcropimage.src = MainImageFiltersRef.current[activeItem].src;\n\n        Newcropimage.onload = function () {\n          if (CropImageHolder === Newcropimage) {} else {\n            //////////////\n            setCropImageHolder(Newcropimage);\n            GiveImageSpecificDimensions(Newcropimage);\n          }\n        };\n      }, 600);\n    }\n  }, [MainImageFiltersRef, Dimension, ShowText, Dimensionx]);\n  const callCanvas = useCallback(() => {\n    if (CropImageHolder) {\n      const ctx = TextCanvasRef.current.getContext(\"2d\");\n      ctx.clearRect(0, 0, TextCanvasRef.current.width, TextCanvasRef.current.height);\n      const w = imageWidth;\n      const h = imageHeight;\n      TextCanvasRef.current.width = w;\n      TextCanvasRef.current.height = h; /// setProcessingRay(updatedProcessingRay);\n      ////////////////////////////////\n\n      requestAnimationFrame(async () => {\n        try {\n          ctx.drawImage(CropImageHolder, 0, 0);\n        } catch (e) {\n          ///alert(e);\n          console.log(e);\n        }\n      });\n    }\n  }, [CropImageHolder, TextCanvasRef, imageHeight, imageWidth]);\n  useLayoutEffect(() => {\n    callCanvas();\n  }, [CropImageHolder, MainImageFiltersRef, imageHeight, imageWidth]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        onClick: () => {\n          setShowText(false);\n        },\n        item: true,\n        xs: 12,\n        style: {\n          height: '100vh',\n          width: '100%',\n          position: 'fixed',\n          top: '0vh',\n          zIndex: 9000,\n          backgroundColor: darkmodeReducer ? \"rgb(2,2,2,0.82)\" : \"rgb(255,255,255,0.8)\",\n          cursor: 'pointer'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        style: {\n          position: 'fixed',\n          top: \"0vh\",\n          zIndex: 90009,\n          textAlign: 'center',\n          width: '100%',\n          height: '0px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: TextCanvasRef,\n          style: {\n            padding: \"0px\",\n            margin: \"auto\",\n            cursor: \"pointer\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(TaskbarTextx, \"SrwL7Lzk+lqjNJjIAJMuWc249rM=\", false, function () {\n  return [useSelector];\n});\n\n_c = TaskbarTextx;\nexport const TaskbarText = /*#__PURE__*/React.memo(TaskbarTextx);\n_c2 = TaskbarText;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TaskbarTextx\");\n$RefreshReg$(_c2, \"TaskbarText\");","map":{"version":3,"sources":["C:/Users/oghen/OneDrive/Documents/ClikBate/super/src/profile/TaskbarText.tsx"],"names":["React","useRef","useCallback","useState","useLayoutEffect","Grid","useSelector","TaskbarTextx","ShowText","setShowText","activeItem","setactiveItem","MainImageFiltersRef","Dimensionx","TextCanvasRef","canvasRefdummy","darkmode","state","GlobalReducer","darkmodeReducer","CropImageHolder","setCropImageHolder","Dimension","setDimension","imageHeight","setimageHeight","imageWidth","setimageWidth","GiveImageSpecificDimensions","Newcropimage","newWidth","newHeight","aspectRatio","naturalWidth","naturalHeight","setTimeout","Image","src","current","onload","callCanvas","ctx","getContext","clearRect","width","height","w","h","requestAnimationFrame","drawImage","e","console","log","position","top","zIndex","backgroundColor","cursor","textAlign","padding","margin","TaskbarText","memo"],"mappings":";;;AAAA,OAAOA,KAAP,IACIC,MADJ,EAGIC,WAHJ,EAIIC,QAJJ,EAKIC,eALJ,QAMO,OANP;AAQA,SAASC,IAAT,QAA4C,mBAA5C;AAIA,SAAyBC,WAAzB,QAAyD,aAAzD;;;;AA8BA,SAASC,YAAT,CAAsB;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,WAAZ;AAAyBC,EAAAA,UAAzB;AAAqCC,EAAAA,aAArC;AAAoDC,EAAAA,mBAApD;AAAyEC,EAAAA;AAAzE,CAAtB,EAA+H;AAAA;;AAM3H,QAAMC,aAAkB,GAAGb,MAAM,CAAC,IAAD,CAAjC;AAEA,QAAMc,cAAmB,GAAGd,MAAM,CAAC,IAAD,CAAlC,CAR2H,CAY3H;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;AACA,QAAM;AAAEe,IAAAA;AAAF,MAAeV,WAAW,CAAEW,KAAD,KAAoC,EACjE,GAAGA,KAAK,CAACC;AADwD,GAApC,CAAD,CAAhC;AAGA,QAAMC,eAAe,GAAGH,QAAxB;AAGA,QAAM,CAACI,eAAD,EAAkBC,kBAAlB,IAAwClB,QAAQ,CAAM,IAAN,CAAtD;AAGA,QAAM,CAACmB,SAAD,EAAYC,YAAZ,IAA4BpB,QAAQ,CAAM,GAAN,CAA1C;AAEA,QAAM,CAACqB,WAAD,EAAcC,cAAd,IAAgCtB,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAACuB,UAAD,EAAaC,aAAb,IAA8BxB,QAAQ,CAAC,CAAD,CAA5C;;AAEA,QAAMyB,2BAA2B,GAAIC,YAAD,IAAuB;AAEvD,QAAIC,QAAQ,GAAGR,SAAf;AACA,QAAIS,SAAS,GAAGT,SAAhB;AACA,UAAMU,WAAW,GAAGH,YAAY,CAACI,YAAb,GAA4BJ,YAAY,CAACK,aAA7D;;AAEA,QAAIJ,QAAQ,GAAGC,SAAX,GAAuBC,WAA3B,EAAwC;AACpCF,MAAAA,QAAQ,GAAGC,SAAS,GAAGC,WAAvB;AACH,KAFD,MAEO;AACHD,MAAAA,SAAS,GAAGD,QAAQ,GAAGE,WAAvB;AACH;;AAGDP,IAAAA,cAAc,CAACM,SAAD,CAAd;AACAJ,IAAAA,aAAa,CAACG,QAAD,CAAb;AACH,GAfD;;AAkBA1B,EAAAA,eAAe,CAAC,MAAM;AAClB,QAAII,QAAJ,EAAc;AAEV2B,MAAAA,UAAU,CAAC,MAAM;AAEb,cAAMN,YAAiB,GAAG,IAAIO,KAAJ,EAA1B;AACAP,QAAAA,YAAY,CAACQ,GAAb,GAAmBzB,mBAAmB,CAAC0B,OAApB,CAA4B5B,UAA5B,EAAwC2B,GAA3D;;AACAR,QAAAA,YAAY,CAACU,MAAb,GAAsB,YAAY;AAC9B,cAAInB,eAAe,KAAKS,YAAxB,EAAsC,CAErC,CAFD,MAEO;AAEH;AACAR,YAAAA,kBAAkB,CAACQ,YAAD,CAAlB;AAGAD,YAAAA,2BAA2B,CAACC,YAAD,CAA3B;AAGH;AAIJ,SAhBD;AAiBH,OArBS,EAqBP,GArBO,CAAV;AAwBH;AACJ,GA5Bc,EA4BZ,CAACjB,mBAAD,EAAsBU,SAAtB,EAAiCd,QAAjC,EAA2CK,UAA3C,CA5BY,CAAf;AAgCA,QAAM2B,UAAU,GAAGtC,WAAW,CAAC,MAAM;AACjC,QAAIkB,eAAJ,EAAqB;AAEjB,YAAMqB,GAAG,GAAG3B,aAAa,CAACwB,OAAd,CAAsBI,UAAtB,CAAiC,IAAjC,CAAZ;AAEAD,MAAAA,GAAG,CAACE,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoB7B,aAAa,CAACwB,OAAd,CAAsBM,KAA1C,EAAiD9B,aAAa,CAACwB,OAAd,CAAsBO,MAAvE;AAEA,YAAMC,CAAC,GAAGpB,UAAV;AACA,YAAMqB,CAAC,GAAGvB,WAAV;AAEAV,MAAAA,aAAa,CAACwB,OAAd,CAAsBM,KAAtB,GAA8BE,CAA9B;AACAhC,MAAAA,aAAa,CAACwB,OAAd,CAAsBO,MAAtB,GAA+BE,CAA/B,CAViB,CAajB;AACA;;AAEAC,MAAAA,qBAAqB,CAAC,YAAY;AAC9B,YAAI;AAGAP,UAAAA,GAAG,CAACQ,SAAJ,CAAc7B,eAAd,EAA+B,CAA/B,EAAkC,CAAlC;AAEH,SALD,CAMA,OAAO8B,CAAP,EAAe;AACX;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH;AACJ,OAXoB,CAArB;AAaH;AACJ,GA/B6B,EA+B3B,CAAC9B,eAAD,EAAkBN,aAAlB,EAAiCU,WAAjC,EAA8CE,UAA9C,CA/B2B,CAA9B;AAoCAtB,EAAAA,eAAe,CAAC,MAAM;AAElBoC,IAAAA,UAAU;AAEb,GAJc,EAIZ,CAACpB,eAAD,EAAkBR,mBAAlB,EAAuCY,WAAvC,EAAoDE,UAApD,CAJY,CAAf;AAUA,sBACI;AAAA,2BACI,QAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAA,8BAEI,QAAC,IAAD;AAAM,QAAA,OAAO,EAAE,MAAM;AAAEjB,UAAAA,WAAW,CAAC,KAAD,CAAX;AAAoB,SAA3C;AAA6C,QAAA,IAAI,MAAjD;AAAkD,QAAA,EAAE,EAAE,EAAtD;AAA0D,QAAA,KAAK,EAAE;AAE7DoC,UAAAA,MAAM,EAAE,OAFqD;AAE5CD,UAAAA,KAAK,EAAE,MAFqC;AAE7BS,UAAAA,QAAQ,EAAE,OAFmB;AAEVC,UAAAA,GAAG,EAAE,KAFK;AAEEC,UAAAA,MAAM,EAAE,IAFV;AAEgBC,UAAAA,eAAe,EAAErC,eAAe,GACvG,iBADuG,GAEvG,sBAJuD;AAI/BsC,UAAAA,MAAM,EAAE;AAJuB;AAAjE;AAAA;AAAA;AAAA;AAAA,cAFJ,eAcI,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,EAAf;AAAmB,QAAA,KAAK,EAAE;AACtBJ,UAAAA,QAAQ,EAAE,OADY;AAEtBC,UAAAA,GAAG,EAAE,KAFiB;AAGtBC,UAAAA,MAAM,EAAE,KAHc;AAItBG,UAAAA,SAAS,EAAE,QAJW;AAKtBd,UAAAA,KAAK,EAAE,MALe;AAMtBC,UAAAA,MAAM,EAAE;AANc,SAA1B;AAAA,+BAUI;AACI,UAAA,GAAG,EAAE/B,aADT;AAEI,UAAA,KAAK,EAAE;AACH6C,YAAAA,OAAO,EAAE,KADN;AAEHC,YAAAA,MAAM,EAAE,MAFL;AAGHH,YAAAA,MAAM,EAAE;AAHL;AAFX;AAAA;AAAA;AAAA;AAAA;AAVJ;AAAA;AAAA;AAAA;AAAA,cAdJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAyCH;;GAlLQlD,Y;UA2BgBD,W;;;KA3BhBC,Y;AAoLT,OAAO,MAAMsD,WAAW,gBAAG7D,KAAK,CAAC8D,IAAN,CAAWvD,YAAX,CAApB;MAAMsD,W","sourcesContent":["import React, {\r\n    useRef,\r\n    useEffect,\r\n    useCallback,\r\n    useState,\r\n    useLayoutEffect,\r\n} from \"react\";\r\nimport ControlPointDuplicateIcon from \"@mui/icons-material/ControlPointDuplicate\";\r\nimport { Grid, Switch, DialogContent } from \"@material-ui/core\";\r\nimport { matchPc, matchTablet, matchMobile } from \"../DetectDevice\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport { OptionsSlider } from \"../profile/OptionsSlider\";\r\nimport { RootStateOrAny, useSelector, useDispatch } from \"react-redux\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport Axios from \"axios\";\r\nimport CheckIcon from \"@mui/icons-material/Check\";\r\nimport date from \"date-and-time\";\r\nimport { UserInfoUpdatePROFILE } from \"../log/actions/UserdataAction\";\r\nimport { UserInfoUpdateBILLBOARD } from \"../log/actions/UserdataAction\";\r\nimport { usePalette } from \"react-palette\";\r\nimport { UpdateColorAction } from \"../GlobalActions\";\r\nimport EditTwoToneIcon from \"@mui/icons-material/EditTwoTone\";\r\nimport DoneOutlineIcon from '@mui/icons-material/DoneOutline';\r\nimport { UpdateUploadData } from \"../GlobalActions\";\r\nimport DoneIcon from '@mui/icons-material/Done';\r\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport CropIcon from '@mui/icons-material/Crop';\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport { TaskbarCrop } from \"./TaskbarCrop\";\r\nimport set from \"date-fns/set/index.js\";\r\nimport TitleIcon from '@mui/icons-material/Title';\r\nimport TouchAppIcon from '@mui/icons-material/TouchApp';\r\nimport InsertPhotoIcon from '@material-ui/icons/InsertPhoto';\r\nimport RestoreIcon from '@material-ui/icons/Restore';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction TaskbarTextx({ ShowText, setShowText, activeItem, setactiveItem, MainImageFiltersRef, Dimensionx }: any): JSX.Element {\r\n\r\n\r\n\r\n\r\n\r\n    const TextCanvasRef: any = useRef(null);\r\n\r\n    const canvasRefdummy: any = useRef(null);\r\n\r\n\r\n\r\n    ///\r\n    ///\r\n    ///\r\n    /// INTERFACE/TYPES FOR SCREENHEIGHT AND DARKMODE\r\n    interface RootStateGlobalReducer {\r\n        GlobalReducer: {\r\n            darkmode: boolean;\r\n            screenHeight: number;\r\n        };\r\n    }\r\n\r\n    ///\r\n    ///\r\n    ///\r\n    /// GET DARKMODE FROM REDUX STORE\r\n    const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n        ...state.GlobalReducer,\r\n    }));\r\n    const darkmodeReducer = darkmode;\r\n\r\n\r\n    const [CropImageHolder, setCropImageHolder] = useState<any>(null);\r\n\r\n\r\n    const [Dimension, setDimension] = useState<any>(900);\r\n\r\n    const [imageHeight, setimageHeight] = useState(0);\r\n    const [imageWidth, setimageWidth] = useState(0);\r\n\r\n    const GiveImageSpecificDimensions = (Newcropimage: any) => {\r\n\r\n        let newWidth = Dimension;\r\n        let newHeight = Dimension;\r\n        const aspectRatio = Newcropimage.naturalWidth / Newcropimage.naturalHeight;\r\n\r\n        if (newWidth / newHeight > aspectRatio) {\r\n            newWidth = newHeight * aspectRatio;\r\n        } else {\r\n            newHeight = newWidth / aspectRatio;\r\n        }\r\n\r\n\r\n        setimageHeight(newHeight);\r\n        setimageWidth(newWidth);\r\n    }\r\n\r\n\r\n    useLayoutEffect(() => {\r\n        if (ShowText) {\r\n\r\n            setTimeout(() => {\r\n\r\n                const Newcropimage: any = new Image();\r\n                Newcropimage.src = MainImageFiltersRef.current[activeItem].src;\r\n                Newcropimage.onload = function () {\r\n                    if (CropImageHolder === Newcropimage) {\r\n\r\n                    } else {\r\n\r\n                        //////////////\r\n                        setCropImageHolder(Newcropimage);\r\n\r\n\r\n                        GiveImageSpecificDimensions(Newcropimage);\r\n\r\n\r\n                    }\r\n\r\n\r\n\r\n                }\r\n            }, 600)\r\n\r\n\r\n        }\r\n    }, [MainImageFiltersRef, Dimension, ShowText, Dimensionx]);\r\n\r\n\r\n\r\n    const callCanvas = useCallback(() => {\r\n        if (CropImageHolder) {\r\n\r\n            const ctx = TextCanvasRef.current.getContext(\"2d\");\r\n\r\n            ctx.clearRect(0, 0, TextCanvasRef.current.width, TextCanvasRef.current.height);\r\n\r\n            const w = imageWidth;\r\n            const h = imageHeight;\r\n\r\n            TextCanvasRef.current.width = w;\r\n            TextCanvasRef.current.height = h;\r\n\r\n\r\n            /// setProcessingRay(updatedProcessingRay);\r\n            ////////////////////////////////\r\n\r\n            requestAnimationFrame(async () => {\r\n                try {\r\n\r\n\r\n                    ctx.drawImage(CropImageHolder, 0, 0);\r\n\r\n                }\r\n                catch (e: any) {\r\n                    ///alert(e);\r\n                    console.log(e)\r\n                }\r\n            });\r\n\r\n        }\r\n    }, [CropImageHolder, TextCanvasRef, imageHeight, imageWidth])\r\n\r\n\r\n\r\n\r\n    useLayoutEffect(() => {\r\n\r\n        callCanvas();\r\n\r\n    }, [CropImageHolder, MainImageFiltersRef, imageHeight, imageWidth])\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <Grid container>\r\n\r\n                <Grid onClick={() => { setShowText(false) }} item xs={12} style={{\r\n\r\n                    height: '100vh', width: '100%', position: 'fixed', top: '0vh', zIndex: 9000, backgroundColor: darkmodeReducer\r\n                        ? \"rgb(2,2,2,0.82)\"\r\n                        : \"rgb(255,255,255,0.8)\", cursor: 'pointer'\r\n                }}>\r\n\r\n\r\n\r\n                </Grid>\r\n\r\n\r\n                <Grid item xs={12} style={{\r\n                    position: 'fixed',\r\n                    top: \"0vh\",\r\n                    zIndex: 90009,\r\n                    textAlign: 'center',\r\n                    width: '100%',\r\n                    height: '0px'\r\n\r\n                }}>\r\n\r\n                    <canvas\r\n                        ref={TextCanvasRef}\r\n                        style={{\r\n                            padding: \"0px\",\r\n                            margin: \"auto\",\r\n                            cursor: \"pointer\",\r\n\r\n\r\n                        }} />\r\n                </Grid>\r\n\r\n            </Grid >\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport const TaskbarText = React.memo(TaskbarTextx);\r\n"]},"metadata":{},"sourceType":"module"}