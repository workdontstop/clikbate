{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oghen\\\\OneDrive\\\\Documents\\\\ClikBate\\\\super\\\\src\\\\profile\\\\Taskbar.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useLayoutEffect } from \"react\";\nimport { Grid, DialogContent } from \"@material-ui/core\";\nimport { useSpring, animated } from \"react-spring\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Taskbarx({\n  showModalUploadTask,\n  uploadClose\n}) {\n  _s();\n\n  const animation = useSpring({\n    config: {\n      duration: 600\n    },\n    opacity: showModalUploadTask ? 1 : 0,\n    transform: showModalUploadTask ? `translateX(0%)` : `translateX(-100%)`,\n    padding: \"0px\"\n  });\n  const cropCanvasRef = useRef(null);\n  const navRef = useRef(null);\n  const [allowCropAllCanvas, setallowCropAllCanvas] = useState(true);\n  const [CropImageHolder, setCropImageHolder] = useState(null);\n  const [imageHeight, setimageHeight] = useState(0);\n  const [imageWidth, setimageWidth] = useState(0);\n  const {\n    activatefilterImage,\n    activatecropImage,\n    selectedImage,\n    cropimage\n  } = useSelector(state => ({ ...state.GlobalNavuploadReducer\n  }));\n  const activatefilterImageReducer = activatefilterImage;\n  const activatecropImageReducer = activatecropImage;\n  const selectedImageReducer = selectedImage;\n  const cropimageReducer = cropimage;\n\n  function resizeCanvas() {\n    const imgAspectRatio = cropCanvasRef.current.width / cropCanvasRef.current.height;\n    var screenW = navRef.current.clientWidth;\n    var screenH = navRef.current.clientHeight;\n    let canvasW = screenW;\n    let canvasH = screenH;\n\n    if (imgAspectRatio <= 1.55) {\n      canvasH = screenH;\n      canvasW = canvasH * imgAspectRatio;\n    } else {\n      canvasW = screenW;\n      canvasH = canvasW / imgAspectRatio;\n    }\n\n    cropCanvasRef.current.style.height = `${canvasH}px`;\n    cropCanvasRef.current.style.width = `${canvasW}px`;\n  }\n\n  function GiveImageSpecificDimensions(Newcropimage) {\n    const imgAspectRatio = Newcropimage.naturalWidth / Newcropimage.naturalHeight;\n    var canvasW;\n    var canvasH;\n\n    if (imgAspectRatio <= 1.55) {\n      var screenH = 1920;\n      canvasH = screenH;\n      canvasH = screenH;\n      canvasW = canvasH * imgAspectRatio;\n    } else {\n      var screenW = 2048;\n      canvasW = screenW;\n      canvasW = screenW;\n      canvasH = canvasW / imgAspectRatio;\n    }\n\n    setimageHeight(canvasH);\n    setimageWidth(canvasW);\n  }\n\n  useLayoutEffect(() => {\n    const Newcropimage = new Image();\n    Newcropimage.src = cropimageReducer;\n\n    Newcropimage.onload = function () {\n      if (CropImageHolder === Newcropimage) {} else {\n        setCropImageHolder(Newcropimage);\n        GiveImageSpecificDimensions(Newcropimage);\n      }\n    };\n  }, [cropimageReducer]);\n  useLayoutEffect(() => {\n    if (CropImageHolder && cropCanvasRef.current) {\n      const ctx = cropCanvasRef.current.getContext(\"2d\");\n      cropCanvasRef.current.width = imageHeight;\n      cropCanvasRef.current.height = imageHeight;\n      resizeCanvas();\n      const w = imageWidth;\n      const h = imageHeight;\n      ctx.drawImage(CropImageHolder, 0, 0, w, h);\n    }\n  }, [CropImageHolder, imageWidth, imageHeight]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(animated.div, {\n      ref: navRef,\n      style: { ...animation,\n        width: '94%',\n        height: \"100vh\",\n        position: \"fixed\",\n        top: '-0vh',\n        zIndex: 100,\n        cursor: \"default\",\n        overflow: \"hidden\",\n        backgroundColor: '#00ccff'\n      },\n      children: [/*#__PURE__*/_jsxDEV(DialogContent, {\n        style: {\n          padding: \"0px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          style: {\n            padding: \"0px\",\n            width: '100%'\n          },\n          children: allowCropAllCanvas ? /*#__PURE__*/_jsxDEV(\"canvas\", {\n            ref: cropCanvasRef,\n            style: {\n              padding: \"0px\",\n              margin: \"auto\",\n              backgroundColor: '#000000',\n              cursor: \"pointer\",\n              overflow: 'hidden'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 15\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(Taskbarx, \"sELorhc70vkNF1y5hpD2ZaXMlAw=\", false, function () {\n  return [useSpring, useSelector];\n});\n\n_c = Taskbarx;\nexport const Taskbar = /*#__PURE__*/React.memo(Taskbarx);\n_c2 = Taskbar;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Taskbarx\");\n$RefreshReg$(_c2, \"Taskbar\");","map":{"version":3,"sources":["C:/Users/oghen/OneDrive/Documents/ClikBate/super/src/profile/Taskbar.tsx"],"names":["React","useRef","useState","useLayoutEffect","Grid","DialogContent","useSpring","animated","useSelector","Taskbarx","showModalUploadTask","uploadClose","animation","config","duration","opacity","transform","padding","cropCanvasRef","navRef","allowCropAllCanvas","setallowCropAllCanvas","CropImageHolder","setCropImageHolder","imageHeight","setimageHeight","imageWidth","setimageWidth","activatefilterImage","activatecropImage","selectedImage","cropimage","state","GlobalNavuploadReducer","activatefilterImageReducer","activatecropImageReducer","selectedImageReducer","cropimageReducer","resizeCanvas","imgAspectRatio","current","width","height","screenW","clientWidth","screenH","clientHeight","canvasW","canvasH","style","GiveImageSpecificDimensions","Newcropimage","naturalWidth","naturalHeight","Image","src","onload","ctx","getContext","w","h","drawImage","position","top","zIndex","cursor","overflow","backgroundColor","margin","Taskbar","memo"],"mappings":"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","sourcesContent":["import React, {\r\n  useRef,\r\n  useEffect,\r\n  useCallback,\r\n  useState,\r\n  useLayoutEffect,\r\n} from \"react\";\r\nimport ControlPointDuplicateIcon from \"@mui/icons-material/ControlPointDuplicate\";\r\nimport { Grid, Switch, DialogContent } from \"@material-ui/core\";\r\nimport { matchPc, matchTablet, matchMobile } from \"../DetectDevice\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport { OptionsSlider } from \"../profile/OptionsSlider\";\r\nimport { RootStateOrAny, useSelector, useDispatch } from \"react-redux\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport Axios from \"axios\";\r\nimport CheckIcon from \"@mui/icons-material/Check\";\r\nimport date from \"date-and-time\";\r\nimport { UserInfoUpdatePROFILE } from \"../log/actions/UserdataAction\";\r\nimport { UserInfoUpdateBILLBOARD } from \"../log/actions/UserdataAction\";\r\nimport { usePalette } from \"react-palette\";\r\nimport { UpdateColorAction } from \"../GlobalActions\";\r\n\r\nfunction Taskbarx({\r\n  showModalUploadTask,\r\n  uploadClose,\r\n\r\n}: any): JSX.Element {\r\n\r\n\r\n  const animation = useSpring({\r\n    config: {\r\n      duration: 600,\r\n    },\r\n    opacity: showModalUploadTask ? 1 : 0,\r\n    transform: showModalUploadTask ? `translateX(0%)` : `translateX(-100%)`,\r\n    padding: \"0px\",\r\n\r\n  });\r\n\r\n\r\n\r\n\r\n  const cropCanvasRef: any = useRef(null);\r\n\r\n  const navRef: any = useRef(null);\r\n\r\n  const [allowCropAllCanvas, setallowCropAllCanvas] = useState<boolean>(true);\r\n\r\n  const [CropImageHolder, setCropImageHolder] = useState<any>(null);\r\n\r\n  const [imageHeight, setimageHeight] = useState(0);\r\n  const [imageWidth, setimageWidth] = useState(0);\r\n\r\n\r\n\r\n  const { activatefilterImage, activatecropImage, selectedImage, cropimage } = useSelector(\r\n    (state: RootStateOrAny) => ({\r\n      ...state.GlobalNavuploadReducer,\r\n    })\r\n  );\r\n  const activatefilterImageReducer = activatefilterImage;\r\n  const activatecropImageReducer = activatecropImage;\r\n  const selectedImageReducer = selectedImage;\r\n  const cropimageReducer = cropimage;\r\n\r\n\r\n\r\n\r\n\r\n  function resizeCanvas() {\r\n    const imgAspectRatio = cropCanvasRef.current.width / cropCanvasRef.current.height;\r\n    var screenW = navRef.current.clientWidth;\r\n    var screenH = navRef.current.clientHeight;\r\n    let canvasW = screenW\r\n    let canvasH = screenH\r\n    if (imgAspectRatio <= 1.55) {\r\n      canvasH = screenH;\r\n      canvasW = canvasH * imgAspectRatio;\r\n    } else {\r\n      canvasW = screenW;\r\n      canvasH = canvasW / imgAspectRatio;\r\n    }\r\n    cropCanvasRef.current.style.height = `${canvasH}px`;\r\n    cropCanvasRef.current.style.width = `${canvasW}px`;\r\n  }\r\n\r\n\r\n\r\n\r\n  function GiveImageSpecificDimensions(Newcropimage: any) {\r\n    const imgAspectRatio = Newcropimage.naturalWidth / Newcropimage.naturalHeight;\r\n    var canvasW;\r\n    var canvasH;\r\n    if (imgAspectRatio <= 1.55) {\r\n      var screenH = 1920;\r\n      canvasH = screenH\r\n      canvasH = screenH;\r\n      canvasW = canvasH * imgAspectRatio;\r\n    } else {\r\n      var screenW = 2048;\r\n      canvasW = screenW\r\n      canvasW = screenW;\r\n      canvasH = canvasW / imgAspectRatio;\r\n    }\r\n    setimageHeight(canvasH);\r\n    setimageWidth(canvasW);\r\n  }\r\n\r\n\r\n  useLayoutEffect(() => {\r\n    const Newcropimage: any = new Image();\r\n    Newcropimage.src = cropimageReducer;\r\n    Newcropimage.onload = function () {\r\n      if (CropImageHolder === Newcropimage) {\r\n      } else {\r\n        setCropImageHolder(Newcropimage);\r\n        GiveImageSpecificDimensions(Newcropimage);\r\n      }\r\n    }\r\n  }, [cropimageReducer]);\r\n\r\n\r\n\r\n  useLayoutEffect(() => {\r\n    if (CropImageHolder && cropCanvasRef.current) {\r\n      const ctx = cropCanvasRef.current.getContext(\"2d\");\r\n      cropCanvasRef.current.width = imageHeight;\r\n      cropCanvasRef.current.height = imageHeight;\r\n      resizeCanvas();\r\n      const w = imageWidth;\r\n      const h = imageHeight;\r\n      ctx.drawImage(CropImageHolder, 0, 0, w, h);\r\n    }\r\n  }, [CropImageHolder, imageWidth, imageHeight])\r\n\r\n\r\n  return (\r\n    <>\r\n      <animated.div ref={navRef} style={{\r\n        ...animation, width: '94%',\r\n        height: \"100vh\",\r\n        position: \"fixed\",\r\n        top: '-0vh',\r\n        zIndex: 100,\r\n        cursor: \"default\",\r\n        overflow: \"hidden\",\r\n        backgroundColor: '#00ccff'\r\n      }}>\r\n        <DialogContent\r\n          style={{\r\n            padding: \"0px\",\r\n          }}>\r\n\r\n\r\n\r\n          <Grid\r\n            container\r\n            style={{\r\n              padding: \"0px\", width: '100%'\r\n            }}>\r\n\r\n            {allowCropAllCanvas ? (\r\n              <canvas\r\n                ref={cropCanvasRef}\r\n                style={{\r\n                  padding: \"0px\",\r\n                  margin: \"auto\",\r\n                  backgroundColor: '#000000',\r\n                  cursor: \"pointer\",\r\n                  overflow: 'hidden'\r\n                }} />\r\n            ) : null}\r\n\r\n          </Grid>\r\n\r\n        </DialogContent> </animated.div>\r\n\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport const Taskbar = React.memo(Taskbarx);\r\n"]},"metadata":{},"sourceType":"module"}