{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oghen\\\\OneDrive\\\\Documents\\\\ClikBate\\\\super\\\\src\\\\profile\\\\TaskbarCrop.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useCallback, useState } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Masonry from \"@mui/lab/Masonry\";\nimport DoneOutlineIcon from '@mui/icons-material/DoneOutline';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { UpdateUploadData } from \"../GlobalActions\";\nimport AspectRatioIcon from '@mui/icons-material/AspectRatio';\nimport Cropper from \"react-easy-crop\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction TaskbarCropx({\n  showModalUploadTask,\n  uploadClose,\n  setfinalimage,\n  finalImage,\n  setHidecrop\n}) {\n  _s();\n\n  const dispatch = useDispatch(); ///\n  ///\n  ///\n  /// INTERFACE/TYPES FOR SCREENHEIGHT AND DARKMODE\n\n  ///\n  ///\n  ///\n  /// GET DARKMODE FROM REDUX STORE\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const {\n    activatefilterImage,\n    activatecropImage,\n    selectedImage,\n    cropimage\n  } = useSelector(state => ({ ...state.GlobalNavuploadReducer\n  }));\n  const activatefilterImageReducer = activatefilterImage;\n  const activatecropImageReducer = activatecropImage;\n  const selectedImageReducer = selectedImage;\n  const cropimageReducer = cropimage;\n  const cropCanvasRef = useRef(null);\n  const cropCanvasRefx = useRef(null);\n  const navRef = useRef(null);\n  const IconRef = useRef(null);\n  const IconRef2 = useRef(null);\n  const [allowCropAllCanvas, setallowCropAllCanvas] = useState(true);\n  const [CropImageHolder, setCropImageHolder] = useState(null);\n  const [FinalCropImageHolder, setFinalCropImageHolder] = useState(null);\n  const [imageHeight, setimageHeight] = useState(0);\n  const [imageWidth, setimageWidth] = useState(0);\n  const [Box, setBox] = useState(false);\n  const [final, setFinal] = useState(false);\n  const [cropInitial, setcropInitial] = useState({\n    x: 0,\n    y: 0\n  });\n  const [cropInitialx, setcropInitialx] = useState({\n    x: 0,\n    y: 0\n  });\n  const [cropOffset, setcropOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [Drag, setDrag] = useState(false);\n  const [cropx, setcropx] = useState({\n    x: 0,\n    y: 0\n  });\n  const allowscrolltimer = useRef(null);\n  var extendxy = 3.3;\n  const [allowOverflow, setallowOverflow] = useState(false);\n  const [optionscropshow, setoptionscropshow] = useState(true);\n  const [optionscropshow2, setoptionscropshow2] = useState(true);\n  const [multiPost, setmultiPost] = useState(false);\n  const [prevImage, setprevimage] = useState([]);\n  const menuTimer5 = useRef(null);\n  const [NewCanH, setNewCanH] = useState(0);\n  const [NewCanW, setNewCanW] = useState(0);\n  const [crop, setCrop] = useState({\n    x: 0,\n    y: 0\n  });\n  const [zoom, setZoom] = useState(1);\n  useEffect(() => {\n    setprevimage(selectedImageReducer);\n  }, [selectedImageReducer]);\n  const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\n    console.log(croppedArea, croppedAreaPixels);\n  }, []);\n  const [hideCrop, sethideCrop] = useState(false);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      style: {\n        padding: \"0px\",\n        width: '100%',\n        height: \"100%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        ref: navRef,\n        item: true,\n        xs: 12,\n        style: {\n          padding: \"0px\",\n          width: '94%',\n          height: multiPost ? \"80%\" : '100%',\n          position: 'fixed',\n          top: '-20000000000px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        style: {\n          padding: \"0px\",\n          filter: hideCrop ? 'brightness(1)' : 'brightness(0.6)'\n        },\n        children: prevImage.length > 1 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Masonry, {\n            columns: 2,\n            spacing: 0,\n            style: {\n              padding: \"0px\",\n              overflow: 'hidden'\n            },\n            children: prevImage.map((picture, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n              onClick: () => {\n                dispatch(UpdateUploadData(prevImage, picture));\n                navRef.current.scrollIntoView({\n                  behavior: \"smooth\",\n                  block: \"start\"\n                });\n              },\n              style: {\n                width: '50%',\n                cursor: 'pointer'\n              },\n              src: picture,\n              alt: `Image ${index}`\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 29\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 47\n          }, this)\n        }, void 0, false) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: hideCrop ? 'none' : 'block'\n          },\n          children: /*#__PURE__*/_jsxDEV(Cropper, {\n            image: prevImage,\n            crop: crop,\n            zoom: zoom,\n            aspect: 4 / 3,\n            onCropChange: setCrop,\n            onCropComplete: onCropComplete,\n            onZoomChange: setZoom\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CloseIcon, {\n        onClick: () => {\n          sethideCrop(true);\n        },\n        className: darkmodeReducer ? \"make-small-icons-clickable-darkab dontallowhighlighting zuperkingIcon \" : \"make-small-icons-clickable-lightab  dontallowhighlighting zuperkingIcon  \",\n        style: {\n          color: \"#ffffff\",\n          fontSize: \"3.8vw\",\n          position: \"absolute\",\n          opacity: optionscropshow2 ? 0.94 : 0,\n          borderRadius: '70%',\n          top: '3.8vh',\n          left: '2%',\n          right: \"\",\n          display: optionscropshow ? hideCrop ? 'none' : 'block' : 'none'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AspectRatioIcon, {\n        onClick: () => {////Done(pic)\n        },\n        className: darkmodeReducer ? \"make-small-icons-clickable-darkab dontallowhighlighting zuperkingIcon \" : \"make-small-icons-clickable-lightab  dontallowhighlighting zuperkingIcon  \",\n        style: {\n          color: \"#ffffff\",\n          fontSize: \"3.8vw\",\n          position: \"absolute\",\n          opacity: optionscropshow2 ? 0.94 : 0,\n          borderRadius: '70%',\n          top: '3.8vh',\n          left: '48%',\n          right: \"\",\n          display: optionscropshow ? hideCrop ? 'none' : 'block' : 'none'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DoneOutlineIcon, {\n        onClick: () => {////Done(pic)\n        },\n        className: darkmodeReducer ? \"make-small-icons-clickable-darkab dontallowhighlighting zuperkingIcon \" : \"make-small-icons-clickable-lightab  dontallowhighlighting zuperkingIcon  \",\n        style: {\n          color: \"#ffffff\",\n          fontSize: \"3.8vw\",\n          position: \"absolute\",\n          opacity: optionscropshow2 ? 0.94 : 0,\n          borderRadius: '70%',\n          top: '3.8vh',\n          left: '94%',\n          right: \"\",\n          display: optionscropshow ? hideCrop ? 'none' : 'block' : 'none'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(TaskbarCropx, \"ViZjhxlmDvGS3k8inxL+GAISpwE=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = TaskbarCropx;\nexport const TaskbarCrop = /*#__PURE__*/React.memo(TaskbarCropx);\n_c2 = TaskbarCrop;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TaskbarCropx\");\n$RefreshReg$(_c2, \"TaskbarCrop\");","map":{"version":3,"sources":["C:/Users/oghen/OneDrive/Documents/ClikBate/super/src/profile/TaskbarCrop.tsx"],"names":["React","useRef","useEffect","useCallback","useState","Grid","useSelector","useDispatch","Masonry","DoneOutlineIcon","CloseIcon","UpdateUploadData","AspectRatioIcon","Cropper","TaskbarCropx","showModalUploadTask","uploadClose","setfinalimage","finalImage","setHidecrop","dispatch","darkmode","state","GlobalReducer","darkmodeReducer","activatefilterImage","activatecropImage","selectedImage","cropimage","GlobalNavuploadReducer","activatefilterImageReducer","activatecropImageReducer","selectedImageReducer","cropimageReducer","cropCanvasRef","cropCanvasRefx","navRef","IconRef","IconRef2","allowCropAllCanvas","setallowCropAllCanvas","CropImageHolder","setCropImageHolder","FinalCropImageHolder","setFinalCropImageHolder","imageHeight","setimageHeight","imageWidth","setimageWidth","Box","setBox","final","setFinal","cropInitial","setcropInitial","x","y","cropInitialx","setcropInitialx","cropOffset","setcropOffset","Drag","setDrag","cropx","setcropx","allowscrolltimer","extendxy","allowOverflow","setallowOverflow","optionscropshow","setoptionscropshow","optionscropshow2","setoptionscropshow2","multiPost","setmultiPost","prevImage","setprevimage","menuTimer5","NewCanH","setNewCanH","NewCanW","setNewCanW","crop","setCrop","zoom","setZoom","onCropComplete","croppedArea","croppedAreaPixels","console","log","hideCrop","sethideCrop","padding","width","height","position","top","filter","length","overflow","map","picture","index","current","scrollIntoView","behavior","block","cursor","display","color","fontSize","opacity","borderRadius","left","right","TaskbarCrop","memo"],"mappings":"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","sourcesContent":["import React, {\r\n    useRef,\r\n    useEffect,\r\n    useCallback,\r\n    useState,\r\n    useLayoutEffect,\r\n} from \"react\";\r\nimport ControlPointDuplicateIcon from \"@mui/icons-material/ControlPointDuplicate\";\r\nimport { Grid, Switch, DialogContent } from \"@material-ui/core\";\r\nimport { matchPc, matchTablet, matchMobile } from \"../DetectDevice\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport { OptionsSlider } from \"../profile/OptionsSlider\";\r\nimport { RootStateOrAny, useSelector, useDispatch } from \"react-redux\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport DoneOutlineIcon from '@mui/icons-material/DoneOutline';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport { UpdateUploadData } from \"../GlobalActions\";\r\nimport DoneIcon from '@mui/icons-material/Done';\r\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\r\nimport AspectRatioIcon from '@mui/icons-material/AspectRatio';\r\n\r\nimport CropIcon from '@mui/icons-material/Crop';\r\nimport Slider from \"@material-ui/core/Slider\";\r\n\r\nimport Cropper from \"react-easy-crop\";\r\nimport { Point, Area } from \"react-easy-crop/types\";\r\n\r\n\r\n\r\nfunction TaskbarCropx({\r\n    showModalUploadTask,\r\n    uploadClose,\r\n    setfinalimage,\r\n    finalImage,\r\n    setHidecrop\r\n\r\n}: any): JSX.Element {\r\n    const dispatch = useDispatch();\r\n\r\n\r\n\r\n\r\n    ///\r\n    ///\r\n    ///\r\n    /// INTERFACE/TYPES FOR SCREENHEIGHT AND DARKMODE\r\n    interface RootStateGlobalReducer {\r\n        GlobalReducer: {\r\n            darkmode: boolean;\r\n            screenHeight: number;\r\n        };\r\n    }\r\n\r\n    ///\r\n    ///\r\n    ///\r\n    /// GET DARKMODE FROM REDUX STORE\r\n    const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n        ...state.GlobalReducer,\r\n    }));\r\n    const darkmodeReducer = darkmode;\r\n\r\n\r\n    const { activatefilterImage, activatecropImage, selectedImage, cropimage } = useSelector(\r\n        (state: RootStateOrAny) => ({\r\n            ...state.GlobalNavuploadReducer,\r\n        })\r\n    );\r\n    const activatefilterImageReducer = activatefilterImage;\r\n    const activatecropImageReducer = activatecropImage;\r\n    const selectedImageReducer = selectedImage;\r\n    const cropimageReducer = cropimage;\r\n\r\n\r\n\r\n    const cropCanvasRef: any = useRef(null);\r\n\r\n    const cropCanvasRefx: any = useRef(null);\r\n\r\n    const navRef: any = useRef(null);\r\n\r\n    const IconRef: any = useRef(null);\r\n\r\n    const IconRef2: any = useRef(null);\r\n\r\n    const [allowCropAllCanvas, setallowCropAllCanvas] = useState<boolean>(true);\r\n\r\n    const [CropImageHolder, setCropImageHolder] = useState<any>(null);\r\n\r\n    const [FinalCropImageHolder, setFinalCropImageHolder] = useState<any>(null);\r\n\r\n    const [imageHeight, setimageHeight] = useState(0);\r\n    const [imageWidth, setimageWidth] = useState(0);\r\n\r\n    const [Box, setBox] = useState<boolean>(false);\r\n\r\n    const [final, setFinal] = useState<boolean>(false);\r\n\r\n\r\n    const [cropInitial, setcropInitial] = useState<any>({ x: 0, y: 0 });\r\n\r\n    const [cropInitialx, setcropInitialx] = useState<any>({ x: 0, y: 0 });\r\n\r\n    const [cropOffset, setcropOffset] = useState<any>({ x: 0, y: 0 });\r\n\r\n    const [Drag, setDrag] = useState<boolean>(false);\r\n\r\n\r\n\r\n    const [cropx, setcropx] = useState<any>({ x: 0, y: 0 });\r\n\r\n    const allowscrolltimer = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n\r\n    var extendxy = 3.3;\r\n\r\n    const [allowOverflow, setallowOverflow] = useState<boolean>(false);\r\n\r\n    const [optionscropshow, setoptionscropshow] = useState<boolean>(true);\r\n\r\n    const [optionscropshow2, setoptionscropshow2] = useState<boolean>(true);\r\n\r\n\r\n\r\n    const [multiPost, setmultiPost] = useState(false);\r\n\r\n\r\n    const [prevImage, setprevimage] = useState([]);\r\n\r\n    const menuTimer5 = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n\r\n\r\n    const [NewCanH, setNewCanH] = useState(0);\r\n\r\n    const [NewCanW, setNewCanW] = useState(0);\r\n\r\n\r\n\r\n\r\n    const [crop, setCrop] = useState<Point>({ x: 0, y: 0 });\r\n    const [zoom, setZoom] = useState(1);\r\n\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        setprevimage(selectedImageReducer);\r\n    }, [selectedImageReducer]);\r\n\r\n\r\n\r\n    const onCropComplete = useCallback(\r\n        (croppedArea: Area, croppedAreaPixels: Area) => {\r\n            console.log(croppedArea, croppedAreaPixels);\r\n        },\r\n        []\r\n    );\r\n\r\n\r\n\r\n    const [hideCrop, sethideCrop] = useState(false);\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n\r\n\r\n            <Grid\r\n                container\r\n                style={{\r\n                    padding: \"0px\", width: '100%', height: \"100%\",\r\n                }}>\r\n\r\n\r\n                <Grid ref={navRef}\r\n                    item\r\n                    xs={12}\r\n                    style={{\r\n                        padding: \"0px\", width: '94%', height: multiPost ? \"80%\" : '100%', position: 'fixed', top: '-20000000000px'\r\n                    }}>\r\n\r\n                </Grid>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                <Grid\r\n                    item\r\n                    xs={12}\r\n                    style={{\r\n                        padding: \"0px\",\r\n                        filter: hideCrop ? 'brightness(1)' : 'brightness(0.6)'\r\n                    }}>\r\n\r\n\r\n\r\n                    {prevImage.length > 1 ? <><Masonry\r\n                        columns={2}\r\n                        spacing={0}\r\n                        style={{\r\n                            padding: \"0px\",\r\n                            overflow: 'hidden',\r\n\r\n                        }}\r\n                    >\r\n\r\n                        {prevImage.map((picture: any, index: any) => (\r\n\r\n                            <img onClick={() => {\r\n                                dispatch(UpdateUploadData(prevImage, picture));\r\n                                navRef.current.scrollIntoView({\r\n                                    behavior: \"smooth\",\r\n                                    block: \"start\",\r\n                                });\r\n                            }}\r\n\r\n                                key={index} style={{ width: '50%', cursor: 'pointer', }} src={picture} alt={`Image ${index}`} />\r\n\r\n                        ))}\r\n\r\n                    </Masonry ></> : null}\r\n\r\n                </Grid>\r\n\r\n\r\n                <div className=\"App\">\r\n                    <div style={{ display: hideCrop ? 'none' : 'block' }}>\r\n                        <Cropper\r\n                            image={prevImage}\r\n                            crop={crop}\r\n                            zoom={zoom}\r\n                            aspect={4 / 3}\r\n                            onCropChange={setCrop}\r\n                            onCropComplete={onCropComplete}\r\n                            onZoomChange={setZoom}\r\n\r\n                        />\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n\r\n\r\n\r\n                <CloseIcon\r\n                    onClick={() => {\r\n                        sethideCrop(true);\r\n                    }}\r\n\r\n                    className={\r\n                        darkmodeReducer\r\n                            ? \"make-small-icons-clickable-darkab dontallowhighlighting zuperkingIcon \"\r\n                            : \"make-small-icons-clickable-lightab  dontallowhighlighting zuperkingIcon  \"\r\n                    }\r\n                    style={{\r\n\r\n                        color: \"#ffffff\",\r\n                        fontSize: \"3.8vw\",\r\n                        position: \"absolute\",\r\n                        opacity: optionscropshow2 ? 0.94 : 0,\r\n                        borderRadius: '70%',\r\n                        top: '3.8vh',\r\n                        left: '2%',\r\n                        right: \"\",\r\n                        display: optionscropshow ? hideCrop ? 'none' : 'block' : 'none'\r\n                    }}\r\n                />\r\n\r\n\r\n                <AspectRatioIcon\r\n                    onClick={() => {////Done(pic)\r\n                    }}\r\n\r\n                    className={\r\n                        darkmodeReducer\r\n                            ? \"make-small-icons-clickable-darkab dontallowhighlighting zuperkingIcon \"\r\n                            : \"make-small-icons-clickable-lightab  dontallowhighlighting zuperkingIcon  \"\r\n                    }\r\n                    style={{\r\n                        color: \"#ffffff\",\r\n                        fontSize: \"3.8vw\",\r\n                        position: \"absolute\",\r\n                        opacity: optionscropshow2 ? 0.94 : 0,\r\n                        borderRadius: '70%',\r\n                        top: '3.8vh',\r\n                        left: '48%',\r\n                        right: \"\",\r\n                        display: optionscropshow ? hideCrop ? 'none' : 'block' : 'none'\r\n                    }}\r\n                />\r\n\r\n\r\n                <DoneOutlineIcon\r\n                    onClick={() => {\r\n                        ////Done(pic)\r\n                    }}\r\n\r\n                    className={\r\n                        darkmodeReducer\r\n                            ? \"make-small-icons-clickable-darkab dontallowhighlighting zuperkingIcon \"\r\n                            : \"make-small-icons-clickable-lightab  dontallowhighlighting zuperkingIcon  \"\r\n                    }\r\n                    style={{\r\n\r\n                        color: \"#ffffff\",\r\n                        fontSize: \"3.8vw\",\r\n                        position: \"absolute\",\r\n                        opacity: optionscropshow2 ? 0.94 : 0,\r\n                        borderRadius: '70%',\r\n                        top: '3.8vh',\r\n                        left: '94%',\r\n                        right: \"\",\r\n                        display: optionscropshow ? hideCrop ? 'none' : 'block' : 'none'\r\n                    }}\r\n                />\r\n\r\n            </Grid>\r\n\r\n\r\n\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport const TaskbarCrop = React.memo(TaskbarCropx);\r\n"]},"metadata":{},"sourceType":"module"}