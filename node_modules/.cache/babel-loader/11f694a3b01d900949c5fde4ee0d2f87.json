{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\upload\\\\SuperCrop.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect, useLayoutEffect, useCallback } from \"react\";\nimport { matchPc } from \"../DetectDevice\";\nimport { Grid } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport Masonry from \"@mui/lab/Masonry\";\nimport { PreviewCanvas } from \"./PreviewCanvas\";\nimport { PreviewCanvasCropAll } from \"./PreviewCanvasCropAll\";\nimport CropIcon from \"@mui/icons-material/Crop\";\nimport CheckIcon from \"@mui/icons-material/Check\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction SuperCropx({\n  cropimage,\n  selectedImage\n}) {\n  _s();\n\n  const cropCanvasRef = useRef(null); ////\n  ////\n  ////\n\n  const [cropArea, setcropArea] = useState(null); //\n\n  const [crop, setcrop] = useState({\n    x: 0,\n    y: 0\n  });\n  const [cropInitial, setcropInitial] = useState({\n    x: 0,\n    y: 0\n  });\n  const [cropOffset, setcropOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [Drag, setDrag] = useState(false);\n  const [SourceWidthForCropX, setSourceWidthForCropX] = useState(0);\n  const [SourceWidthForCropY, setSourceWidthForCropY] = useState(0);\n  const [cropwidth, setcropwidth] = useState(0);\n  const [cropheight, setcropheight] = useState(0); ///\n  ///\n  ///DARKMODE FROM REDUX\n\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const getpreviewFixedWidthRef = useRef(null);\n  const getCropHeightRef = useRef(null);\n  const getFixedCropWidthRef = useRef(null);\n  const [getCropHeight, setgetCropHeight] = useState(0);\n  const [getCropHeightRealImageRatio, setgetCropHeightRealImageRatio] = useState(0);\n  const [getFixedCropWidth, setgetFixedCropWidth] = useState(0);\n  const [getpreviewFixedWidth, setgetpreviewFixedWidth] = useState(0);\n  const [CropImageHolder, setCropImageHolder] = useState(null);\n  const [OriginalImageWidth, setOriginalImageWidth] = useState(0);\n  const [OriginalImageHeight, setOriginalImageHeight] = useState(0);\n  const [WideImageCheck, setWideImageCheck] = useState(false);\n  const hdcanvasvalue = 2;\n  const [BoxCropActivated, setBoxCropActivated] = useState(true); ///\n  ///\n  ///\n  ///GET OPTIONS SLIDER IMAGE WIDTH FROM MATERIAL UI GRID\n\n  useEffect(() => {\n    if (getpreviewFixedWidthRef.current && getpreviewFixedWidthRef.current.clientWidth) {\n      setgetpreviewFixedWidth(getpreviewFixedWidthRef.current.clientWidth);\n    }\n\n    if (getCropHeightRef.current && getCropHeightRef.current.clientWidth) {\n      setgetCropHeight(getCropHeightRef.current.clientHeight * hdcanvasvalue);\n      setgetCropHeightRealImageRatio(getCropHeightRef.current.clientHeight);\n    }\n\n    if (getFixedCropWidthRef.current && getFixedCropWidthRef.current.clientWidth) {\n      setgetFixedCropWidth(getFixedCropWidthRef.current.clientWidth);\n    }\n  }, []); ///\n  ///\n  ///\n  ///\n  /// HANDLE TOUCH START EVENT\n\n  const handleTouchStart = (e, type) => {\n    console.log(e.clientY);\n    console.log(e.clientX);\n\n    if (type === 0) {\n      setcropInitial({ ...cropInitial,\n        x: e.clientX * 2.8 - cropOffset.x,\n        y: e.clientY * 2.6 - cropOffset.y\n      });\n    } else {\n      setcropInitial({ ...cropInitial,\n        x: e.touches[0].clientX * 2.8 - cropOffset.x,\n        y: e.touches[0].clientY * 2.6 - cropOffset.y\n      });\n    }\n\n    if (e.target) {\n      setDrag(true);\n    }\n  };\n\n  const handleTouchEnd = () => {\n    setcropInitial({ ...cropInitial,\n      x: crop.x,\n      y: crop.y\n    });\n    setDrag(false);\n  };\n\n  const handleTouchDrag = (e, type) => {\n    if (Drag) {\n      if (type === 0) {\n        setcrop({ ...crop,\n          x: e.clientX * 2.8 - cropInitial.x,\n          y: e.clientY * 2.6 - cropInitial.y\n        });\n      } else {\n        setcrop({ ...crop,\n          x: e.touches[0].clientX * 2.8 - cropInitial.x,\n          y: e.touches[0].clientY * 2.6 - cropInitial.y\n        });\n      }\n\n      setcropOffset({ ...cropOffset,\n        x: crop.x,\n        y: crop.y\n      });\n    }\n  };\n\n  const draw = useCallback((ctx, dimensions, type, axis) => {\n    if (type === 1) {\n      ctx.drawImage(CropImageHolder, axis, 0, dimensions, getCropHeight);\n    } else if (type === 2) {\n      ctx.drawImage(CropImageHolder, 0, axis, getCropHeight, dimensions);\n    } else {\n      ctx.drawImage(CropImageHolder, 0, 0, OriginalImageWidth, OriginalImageHeight);\n    }\n  }, [OriginalImageWidth, OriginalImageHeight, CropImageHolder, getCropHeight]);\n  useLayoutEffect(() => {\n    const Newcropimage = new Image();\n    Newcropimage.src = cropimage;\n\n    Newcropimage.onload = function () {\n      setCropImageHolder(Newcropimage);\n      var data1 = Newcropimage.naturalWidth;\n      var data2 = Newcropimage.naturalHeight;\n      setOriginalImageWidth(data1);\n      setOriginalImageHeight(data2);\n\n      if (Newcropimage.naturalWidth > Newcropimage.naturalHeight) {\n        setWideImageCheck(true);\n      }\n\n      setcropwidth(data1);\n      setcropheight(data2);\n    };\n  }, [cropimage, BoxCropActivated]);\n  useLayoutEffect(() => {\n    if (CropImageHolder && cropCanvasRef.current) {\n      const ctx = cropCanvasRef.current.getContext(\"2d\");\n      var RatiofromOriginalandfixedHeight = OriginalImageHeight / getCropHeight;\n      var NewBoxRatioWidth_WIDEIMAGE = OriginalImageWidth / RatiofromOriginalandfixedHeight;\n      setSourceWidthForCropX(NewBoxRatioWidth_WIDEIMAGE);\n      var RatiofromOriginalandfixedHeightx = OriginalImageWidth / getCropHeight;\n      var NewBoxRatioWidth_LONGIMAGE = OriginalImageHeight / RatiofromOriginalandfixedHeightx;\n      setSourceWidthForCropY(NewBoxRatioWidth_LONGIMAGE);\n      var ratioh = OriginalImageWidth * 3 / OriginalImageWidth;\n      var ratiow = OriginalImageHeight * 3 / OriginalImageHeight;\n\n      if (BoxCropActivated) {\n        cropCanvasRef.current.width = getCropHeight;\n        cropCanvasRef.current.height = getCropHeight;\n      } else {\n        cropCanvasRef.current.width = OriginalImageWidth;\n        cropCanvasRef.current.height = OriginalImageHeight;\n      }\n\n      var centerpreview = cropCanvasRef.current.width / 1.5 - NewBoxRatioWidth_LONGIMAGE / 1.5;\n      var xtraZoom = getCropHeight / NewBoxRatioWidth_WIDEIMAGE;\n      var centerCropCanvas = cropCanvasRef.current.width / 2 - NewBoxRatioWidth_WIDEIMAGE / 2;\n      var RatiofromOriginalandfixedHeight = OriginalImageHeight / getCropHeightRealImageRatio;\n      var newcropCSSWidth = OriginalImageWidth / RatiofromOriginalandfixedHeight;\n\n      if (BoxCropActivated) {\n        var dragDistanceY = NewBoxRatioWidth_LONGIMAGE - getCropHeight;\n        var dragDistanceX = NewBoxRatioWidth_WIDEIMAGE - getCropHeight;\n\n        if (OriginalImageWidth > OriginalImageHeight) {\n          if (crop.x < -dragDistanceX) {\n            setcrop({ ...crop,\n              x: -dragDistanceX\n            });\n          } else if (crop.x > 0) {\n            setcrop({ ...crop,\n              x: 0\n            });\n          } else {}\n\n          requestAnimationFrame(() => {\n            draw(ctx, NewBoxRatioWidth_WIDEIMAGE, 1, crop.x);\n          });\n        } else {\n          if (crop.y < -dragDistanceY) {\n            setcrop({ ...crop,\n              y: -dragDistanceY\n            });\n          } else if (crop.y > 0) {\n            setcrop({ ...crop,\n              y: 0\n            });\n          } else {}\n\n          requestAnimationFrame(() => {\n            draw(ctx, NewBoxRatioWidth_LONGIMAGE, 2, crop.y);\n          });\n        }\n\n        cropCanvasRef.current.style.width = `${getCropHeight / hdcanvasvalue}px`;\n        cropCanvasRef.current.style.height = `${getCropHeight / hdcanvasvalue}px`;\n      } else {\n        requestAnimationFrame(() => {\n          draw(ctx, 0, 3, 0);\n        });\n        cropCanvasRef.current.style.width = `${newcropCSSWidth}px`;\n        cropCanvasRef.current.style.height = `${getCropHeightRealImageRatio}px`;\n      }\n    }\n  }, [CropImageHolder, cropCanvasRef, BoxCropActivated, OriginalImageWidth, OriginalImageHeight, crop, draw]);\n\n  const gg = () => {};\n\n  const cropaspectchange = () => {\n    setBoxCropActivated(BoxCropActivated => !BoxCropActivated);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      ref: getCropHeightRef,\n      style: {\n        position: \"relative\",\n        width: \"100%\",\n        height: \"70%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          ref: getFixedCropWidthRef,\n          xs: 4\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        onMouseDown: e => {\n          handleTouchStart(e, 0);\n        },\n        onTouchStart: e => {\n          handleTouchStart(e, 1);\n        },\n        onMouseMove: e => {\n          handleTouchDrag(e, 0);\n        },\n        onTouchMove: e => {\n          handleTouchDrag(e, 1);\n        },\n        onMouseUp: handleTouchEnd,\n        onTouchEnd: handleTouchEnd,\n        className: darkmodeReducer ? \"turlightCrop\" : \"turdarkCrop\",\n        ref: cropCanvasRef,\n        style: {\n          padding: \"0px\",\n          margin: \"auto\"\n        }\n      }, cropimage, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        style: {\n          padding: \"0px\",\n          bottom: \"13vh\",\n          margin: \"auto\",\n          width: `100%`,\n          height: \"0px\",\n          position: \"absolute\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          alignContent: \"center\",\n          alignSelf: \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 6,\n          style: {\n            padding: \"0px\",\n            height: \"0px\",\n            margin: \"auto\",\n            display: \"grid\",\n            alignItems: \"center\"\n          },\n          children: /*#__PURE__*/_jsxDEV(CropIcon, {\n            onClick: cropaspectchange,\n            className: darkmodeReducer ? \"make-small-icons-clickable-lightCrop turdark dontallowhighlighting zuperkingIcon \" : \"make-small-icons-clickable-darkCrop  turdark dontallowhighlighting zuperkingIcon  \",\n            style: {\n              margin: \"auto\",\n              marginRight: \"9%\",\n              fontSize: \"2.9vw\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 6,\n          style: {\n            padding: \"0px\",\n            height: \"0px\",\n            margin: \"auto\",\n            display: \"grid\",\n            alignItems: \"center\"\n          },\n          children: /*#__PURE__*/_jsxDEV(CheckIcon, {\n            className: darkmodeReducer ? \"make-small-icons-clickable-lightCrop turdark dontallowhighlighting zuperkingIcon \" : \"make-small-icons-clickable-darkCrop  turdark dontallowhighlighting zuperkingIcon  \",\n            style: {\n              margin: \"auto\",\n              marginLeft: \"9%\",\n              fontSize: \"2.9vw\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      style: {\n        padding: \"0px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        ref: getpreviewFixedWidthRef,\n        xs: 5,\n        style: {\n          padding: \"0px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Masonry, {\n      columns: matchPc ? selectedImage.length > 2 ? 3 : 2 : 1,\n      spacing: 0,\n      style: {\n        overflowX: \"hidden\",\n        position: \"relative\",\n        zIndex: 2\n      },\n      children: [selectedImage ? selectedImage.map((photo, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(PreviewCanvas, {\n            image: photo,\n            index: index\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 19\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 17\n        }, this);\n      }) : null, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Masonry, {\n      columns: matchPc ? 3 : 1,\n      spacing: 0,\n      style: {\n        overflowX: \"hidden\",\n        zIndex: 1,\n        position: \"fixed\",\n        top: \"-400vh\"\n      },\n      children: [selectedImage ? selectedImage.map((photo, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(PreviewCanvasCropAll, {\n            WideImageCheck: WideImageCheck,\n            SourceWidthForCropX: SourceWidthForCropX,\n            SourceWidthForCropY: SourceWidthForCropY,\n            hdcanvasvalue: hdcanvasvalue,\n            BoxCropActivated: BoxCropActivated,\n            cropheight: cropheight,\n            cropwidth: cropwidth,\n            CropImageHolder: CropImageHolder,\n            cropCanvasRef: cropCanvasRef,\n            crop: crop,\n            image: photo,\n            getpreviewFixedWidth: getpreviewFixedWidth\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 19\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 17\n        }, this);\n      }) : null, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(SuperCropx, \"TWenmm6x/HSXuZTdpQVOdleVTfI=\", false, function () {\n  return [useSelector];\n});\n\n_c = SuperCropx;\nexport const SuperCrop = /*#__PURE__*/React.memo(SuperCropx);\n_c2 = SuperCrop;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SuperCropx\");\n$RefreshReg$(_c2, \"SuperCrop\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/upload/SuperCrop.tsx"],"names":["React","useRef","useState","useEffect","useLayoutEffect","useCallback","matchPc","Grid","useSelector","Masonry","PreviewCanvas","PreviewCanvasCropAll","CropIcon","CheckIcon","SuperCropx","cropimage","selectedImage","cropCanvasRef","cropArea","setcropArea","crop","setcrop","x","y","cropInitial","setcropInitial","cropOffset","setcropOffset","Drag","setDrag","SourceWidthForCropX","setSourceWidthForCropX","SourceWidthForCropY","setSourceWidthForCropY","cropwidth","setcropwidth","cropheight","setcropheight","darkmode","state","GlobalReducer","darkmodeReducer","getpreviewFixedWidthRef","getCropHeightRef","getFixedCropWidthRef","getCropHeight","setgetCropHeight","getCropHeightRealImageRatio","setgetCropHeightRealImageRatio","getFixedCropWidth","setgetFixedCropWidth","getpreviewFixedWidth","setgetpreviewFixedWidth","CropImageHolder","setCropImageHolder","OriginalImageWidth","setOriginalImageWidth","OriginalImageHeight","setOriginalImageHeight","WideImageCheck","setWideImageCheck","hdcanvasvalue","BoxCropActivated","setBoxCropActivated","current","clientWidth","clientHeight","handleTouchStart","e","type","console","log","clientY","clientX","touches","target","handleTouchEnd","handleTouchDrag","draw","ctx","dimensions","axis","drawImage","Newcropimage","Image","src","onload","data1","naturalWidth","data2","naturalHeight","getContext","RatiofromOriginalandfixedHeight","NewBoxRatioWidth_WIDEIMAGE","RatiofromOriginalandfixedHeightx","NewBoxRatioWidth_LONGIMAGE","ratioh","ratiow","width","height","centerpreview","xtraZoom","centerCropCanvas","newcropCSSWidth","dragDistanceY","dragDistanceX","requestAnimationFrame","style","gg","cropaspectchange","position","padding","margin","bottom","display","justifyContent","alignItems","alignContent","alignSelf","marginRight","fontSize","marginLeft","length","overflowX","zIndex","map","photo","index","top","SuperCrop","memo"],"mappings":"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","sourcesContent":["import React, {\r\n  useRef,\r\n  useState,\r\n  useEffect,\r\n  useLayoutEffect,\r\n  useCallback,\r\n} from \"react\";\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport Cropper from \"react-easy-crop\";\r\nimport MusicNoteIcon from \"@mui/icons-material/MusicNote\";\r\nimport PhotoIcon from \"@mui/icons-material/Photo\";\r\nimport GifIcon from \"@mui/icons-material/Gif\";\r\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\r\nimport Slider from \"@mui/material/Slider\";\r\nimport { AnySoaRecord } from \"dns\";\r\nimport { PreviewCanvas } from \"./PreviewCanvas\";\r\nimport { PreviewCanvasCropAll } from \"./PreviewCanvasCropAll\";\r\nimport CropIcon from \"@mui/icons-material/Crop\";\r\nimport CheckIcon from \"@mui/icons-material/Check\";\r\n\r\nfunction SuperCropx({ cropimage, selectedImage }: any): JSX.Element {\r\n  const cropCanvasRef: any = useRef(null);\r\n\r\n  ////\r\n  ////\r\n  ////\r\n  const [cropArea, setcropArea] = useState<any>(null);\r\n\r\n  //\r\n  const [crop, setcrop] = useState<any>({ x: 0, y: 0 });\r\n\r\n  const [cropInitial, setcropInitial] = useState<any>({ x: 0, y: 0 });\r\n\r\n  const [cropOffset, setcropOffset] = useState<any>({ x: 0, y: 0 });\r\n\r\n  const [Drag, setDrag] = useState<boolean>(false);\r\n\r\n  const [SourceWidthForCropX, setSourceWidthForCropX] = useState(0);\r\n\r\n  const [SourceWidthForCropY, setSourceWidthForCropY] = useState(0);\r\n\r\n  const [cropwidth, setcropwidth] = useState(0);\r\n  const [cropheight, setcropheight] = useState(0);\r\n\r\n  ///\r\n  ///\r\n  ///DARKMODE FROM REDUX\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n\r\n  const darkmodeReducer = darkmode;\r\n\r\n  const getpreviewFixedWidthRef = useRef<HTMLDivElement>(null);\r\n\r\n  const getCropHeightRef: any = useRef<HTMLDivElement>(null);\r\n\r\n  const getFixedCropWidthRef: any = useRef<HTMLDivElement>(null);\r\n\r\n  const [getCropHeight, setgetCropHeight] = useState(0);\r\n\r\n  const [getCropHeightRealImageRatio, setgetCropHeightRealImageRatio] =\r\n    useState(0);\r\n\r\n  const [getFixedCropWidth, setgetFixedCropWidth] = useState(0);\r\n\r\n  const [getpreviewFixedWidth, setgetpreviewFixedWidth] = useState(0);\r\n\r\n  const [CropImageHolder, setCropImageHolder] = useState<any>(null);\r\n\r\n  const [OriginalImageWidth, setOriginalImageWidth] = useState<number>(0);\r\n  const [OriginalImageHeight, setOriginalImageHeight] = useState<number>(0);\r\n\r\n  const [WideImageCheck, setWideImageCheck] = useState<boolean>(false);\r\n\r\n  const hdcanvasvalue = 2;\r\n\r\n  const [BoxCropActivated, setBoxCropActivated] = useState<boolean>(true);\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  ///GET OPTIONS SLIDER IMAGE WIDTH FROM MATERIAL UI GRID\r\n  useEffect(() => {\r\n    if (\r\n      getpreviewFixedWidthRef.current &&\r\n      getpreviewFixedWidthRef.current.clientWidth\r\n    ) {\r\n      setgetpreviewFixedWidth(getpreviewFixedWidthRef.current.clientWidth);\r\n    }\r\n\r\n    if (getCropHeightRef.current && getCropHeightRef.current.clientWidth) {\r\n      setgetCropHeight(getCropHeightRef.current.clientHeight * hdcanvasvalue);\r\n      setgetCropHeightRealImageRatio(getCropHeightRef.current.clientHeight);\r\n    }\r\n\r\n    if (\r\n      getFixedCropWidthRef.current &&\r\n      getFixedCropWidthRef.current.clientWidth\r\n    ) {\r\n      setgetFixedCropWidth(getFixedCropWidthRef.current.clientWidth);\r\n    }\r\n  }, []);\r\n  ///\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// HANDLE TOUCH START EVENT\r\n  const handleTouchStart = (e: any, type: any) => {\r\n    console.log(e.clientY);\r\n    console.log(e.clientX);\r\n    if (type === 0) {\r\n      setcropInitial({\r\n        ...cropInitial,\r\n        x: e.clientX * 2.8 - cropOffset.x,\r\n        y: e.clientY * 2.6 - cropOffset.y,\r\n      });\r\n    } else {\r\n      setcropInitial({\r\n        ...cropInitial,\r\n        x: e.touches[0].clientX * 2.8 - cropOffset.x,\r\n        y: e.touches[0].clientY * 2.6 - cropOffset.y,\r\n      });\r\n    }\r\n    if (e.target) {\r\n      setDrag(true);\r\n    }\r\n  };\r\n\r\n  const handleTouchEnd = () => {\r\n    setcropInitial({\r\n      ...cropInitial,\r\n      x: crop.x,\r\n      y: crop.y,\r\n    });\r\n    setDrag(false);\r\n  };\r\n\r\n  const handleTouchDrag = (e: any, type: any) => {\r\n    if (Drag) {\r\n      if (type === 0) {\r\n        setcrop({\r\n          ...crop,\r\n          x: e.clientX * 2.8 - cropInitial.x,\r\n          y: e.clientY * 2.6 - cropInitial.y,\r\n        });\r\n      } else {\r\n        setcrop({\r\n          ...crop,\r\n          x: e.touches[0].clientX * 2.8 - cropInitial.x,\r\n          y: e.touches[0].clientY * 2.6 - cropInitial.y,\r\n        });\r\n      }\r\n\r\n      setcropOffset({\r\n        ...cropOffset,\r\n        x: crop.x,\r\n        y: crop.y,\r\n      });\r\n    }\r\n  };\r\n\r\n  const draw = useCallback(\r\n    (ctx: any, dimensions: any, type: number, axis: number) => {\r\n      if (type === 1) {\r\n        ctx.drawImage(CropImageHolder, axis, 0, dimensions, getCropHeight);\r\n      } else if (type === 2) {\r\n        ctx.drawImage(CropImageHolder, 0, axis, getCropHeight, dimensions);\r\n      } else {\r\n        ctx.drawImage(\r\n          CropImageHolder,\r\n          0,\r\n          0,\r\n          OriginalImageWidth,\r\n          OriginalImageHeight\r\n        );\r\n      }\r\n    },\r\n    [OriginalImageWidth, OriginalImageHeight, CropImageHolder, getCropHeight]\r\n  );\r\n\r\n  useLayoutEffect(() => {\r\n    const Newcropimage = new Image();\r\n    Newcropimage.src = cropimage;\r\n    Newcropimage.onload = function () {\r\n      setCropImageHolder(Newcropimage);\r\n\r\n      var data1 = Newcropimage.naturalWidth;\r\n      var data2 = Newcropimage.naturalHeight;\r\n      setOriginalImageWidth(data1);\r\n      setOriginalImageHeight(data2);\r\n\r\n      if (Newcropimage.naturalWidth > Newcropimage.naturalHeight) {\r\n        setWideImageCheck(true);\r\n      }\r\n\r\n      setcropwidth(data1);\r\n      setcropheight(data2);\r\n    };\r\n  }, [cropimage, BoxCropActivated]);\r\n\r\n  useLayoutEffect(() => {\r\n    if (CropImageHolder && cropCanvasRef.current) {\r\n      const ctx = cropCanvasRef.current.getContext(\"2d\");\r\n\r\n      var RatiofromOriginalandfixedHeight = OriginalImageHeight / getCropHeight;\r\n      var NewBoxRatioWidth_WIDEIMAGE =\r\n        OriginalImageWidth / RatiofromOriginalandfixedHeight;\r\n\r\n      setSourceWidthForCropX(NewBoxRatioWidth_WIDEIMAGE);\r\n\r\n      var RatiofromOriginalandfixedHeightx = OriginalImageWidth / getCropHeight;\r\n      var NewBoxRatioWidth_LONGIMAGE =\r\n        OriginalImageHeight / RatiofromOriginalandfixedHeightx;\r\n\r\n      setSourceWidthForCropY(NewBoxRatioWidth_LONGIMAGE);\r\n\r\n      var ratioh = (OriginalImageWidth * 3) / OriginalImageWidth;\r\n      var ratiow = (OriginalImageHeight * 3) / OriginalImageHeight;\r\n\r\n      if (BoxCropActivated) {\r\n        cropCanvasRef.current.width = getCropHeight;\r\n        cropCanvasRef.current.height = getCropHeight;\r\n      } else {\r\n        cropCanvasRef.current.width = OriginalImageWidth;\r\n        cropCanvasRef.current.height = OriginalImageHeight;\r\n      }\r\n\r\n      var centerpreview =\r\n        cropCanvasRef.current.width / 1.5 - NewBoxRatioWidth_LONGIMAGE / 1.5;\r\n\r\n      var xtraZoom = getCropHeight / NewBoxRatioWidth_WIDEIMAGE;\r\n\r\n      var centerCropCanvas =\r\n        cropCanvasRef.current.width / 2 - NewBoxRatioWidth_WIDEIMAGE / 2;\r\n\r\n      var RatiofromOriginalandfixedHeight =\r\n        OriginalImageHeight / getCropHeightRealImageRatio;\r\n      var newcropCSSWidth =\r\n        OriginalImageWidth / RatiofromOriginalandfixedHeight;\r\n\r\n      if (BoxCropActivated) {\r\n        var dragDistanceY = NewBoxRatioWidth_LONGIMAGE - getCropHeight;\r\n        var dragDistanceX = NewBoxRatioWidth_WIDEIMAGE - getCropHeight;\r\n\r\n        if (OriginalImageWidth > OriginalImageHeight) {\r\n          if (crop.x < -dragDistanceX) {\r\n            setcrop({ ...crop, x: -dragDistanceX });\r\n          } else if (crop.x > 0) {\r\n            setcrop({ ...crop, x: 0 });\r\n          } else {\r\n          }\r\n\r\n          requestAnimationFrame(() => {\r\n            draw(ctx, NewBoxRatioWidth_WIDEIMAGE, 1, crop.x);\r\n          });\r\n        } else {\r\n          if (crop.y < -dragDistanceY) {\r\n            setcrop({ ...crop, y: -dragDistanceY });\r\n          } else if (crop.y > 0) {\r\n            setcrop({ ...crop, y: 0 });\r\n          } else {\r\n          }\r\n\r\n          requestAnimationFrame(() => {\r\n            draw(ctx, NewBoxRatioWidth_LONGIMAGE, 2, crop.y);\r\n          });\r\n        }\r\n\r\n        cropCanvasRef.current.style.width = `${\r\n          getCropHeight / hdcanvasvalue\r\n        }px`;\r\n        cropCanvasRef.current.style.height = `${\r\n          getCropHeight / hdcanvasvalue\r\n        }px`;\r\n      } else {\r\n        requestAnimationFrame(() => {\r\n          draw(ctx, 0, 3, 0);\r\n        });\r\n\r\n        cropCanvasRef.current.style.width = `${newcropCSSWidth}px`;\r\n        cropCanvasRef.current.style.height = `${getCropHeightRealImageRatio}px`;\r\n      }\r\n    }\r\n  }, [\r\n    CropImageHolder,\r\n    cropCanvasRef,\r\n    BoxCropActivated,\r\n    OriginalImageWidth,\r\n    OriginalImageHeight,\r\n    crop,\r\n    draw,\r\n  ]);\r\n  const gg = () => {};\r\n\r\n  const cropaspectchange = () => {\r\n    setBoxCropActivated((BoxCropActivated) => !BoxCropActivated);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        ref={getCropHeightRef}\r\n        style={{\r\n          position: \"relative\",\r\n          width: \"100%\",\r\n          height: \"70%\",\r\n        }}\r\n      >\r\n        <Grid item xs={12}>\r\n          <Grid item ref={getFixedCropWidthRef} xs={4}></Grid>\r\n        </Grid>\r\n\r\n        <canvas\r\n          onMouseDown={(e: any) => {\r\n            handleTouchStart(e, 0);\r\n          }}\r\n          onTouchStart={(e: any) => {\r\n            handleTouchStart(e, 1);\r\n          }}\r\n          onMouseMove={(e: any) => {\r\n            handleTouchDrag(e, 0);\r\n          }}\r\n          onTouchMove={(e: any) => {\r\n            handleTouchDrag(e, 1);\r\n          }}\r\n          onMouseUp={handleTouchEnd}\r\n          onTouchEnd={handleTouchEnd}\r\n          className={darkmodeReducer ? \"turlightCrop\" : \"turdarkCrop\"}\r\n          ref={cropCanvasRef}\r\n          key={cropimage}\r\n          style={{\r\n            padding: \"0px\",\r\n            margin: \"auto\",\r\n          }}\r\n        />\r\n        <Grid\r\n          container\r\n          style={{\r\n            padding: \"0px\",\r\n            bottom: \"13vh\",\r\n            margin: \"auto\",\r\n            width: `100%`,\r\n            height: \"0px\",\r\n            position: \"absolute\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            alignContent: \"center\",\r\n            alignSelf: \"center\",\r\n          }}\r\n        >\r\n          <Grid\r\n            item\r\n            xs={6}\r\n            style={{\r\n              padding: \"0px\",\r\n              height: \"0px\",\r\n              margin: \"auto\",\r\n              display: \"grid\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <CropIcon\r\n              onClick={cropaspectchange}\r\n              className={\r\n                darkmodeReducer\r\n                  ? \"make-small-icons-clickable-lightCrop turdark dontallowhighlighting zuperkingIcon \"\r\n                  : \"make-small-icons-clickable-darkCrop  turdark dontallowhighlighting zuperkingIcon  \"\r\n              }\r\n              style={{ margin: \"auto\", marginRight: \"9%\", fontSize: \"2.9vw\" }}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid\r\n            item\r\n            xs={6}\r\n            style={{\r\n              padding: \"0px\",\r\n              height: \"0px\",\r\n              margin: \"auto\",\r\n              display: \"grid\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <CheckIcon\r\n              className={\r\n                darkmodeReducer\r\n                  ? \"make-small-icons-clickable-lightCrop turdark dontallowhighlighting zuperkingIcon \"\r\n                  : \"make-small-icons-clickable-darkCrop  turdark dontallowhighlighting zuperkingIcon  \"\r\n              }\r\n              style={{ margin: \"auto\", marginLeft: \"9%\", fontSize: \"2.9vw\" }}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid\r\n        item\r\n        xs={12}\r\n        style={{\r\n          padding: \"0px\",\r\n        }}\r\n      >\r\n        <Grid\r\n          item\r\n          ref={getpreviewFixedWidthRef}\r\n          xs={5}\r\n          style={{\r\n            padding: \"0px\",\r\n          }}\r\n        ></Grid>\r\n      </Grid>\r\n      <Masonry\r\n        columns={matchPc ? (selectedImage.length > 2 ? 3 : 2) : 1}\r\n        spacing={0}\r\n        style={{\r\n          overflowX: \"hidden\",\r\n          position: \"relative\",\r\n          zIndex: 2,\r\n        }}\r\n      >\r\n        {selectedImage\r\n          ? selectedImage.map((photo: any, index: any) => {\r\n              return (\r\n                <div key={index}>\r\n                  <PreviewCanvas image={photo} index={index} />\r\n                </div>\r\n              );\r\n            })\r\n          : null}{\" \"}\r\n      </Masonry>\r\n      <Masonry\r\n        columns={matchPc ? 3 : 1}\r\n        spacing={0}\r\n        style={{\r\n          overflowX: \"hidden\",\r\n          zIndex: 1,\r\n          position: \"fixed\",\r\n          top: \"-400vh\",\r\n        }}\r\n      >\r\n        {selectedImage\r\n          ? selectedImage.map((photo: any, index: any) => {\r\n              return (\r\n                <div key={index}>\r\n                  <PreviewCanvasCropAll\r\n                    WideImageCheck={WideImageCheck}\r\n                    SourceWidthForCropX={SourceWidthForCropX}\r\n                    SourceWidthForCropY={SourceWidthForCropY}\r\n                    hdcanvasvalue={hdcanvasvalue}\r\n                    BoxCropActivated={BoxCropActivated}\r\n                    cropheight={cropheight}\r\n                    cropwidth={cropwidth}\r\n                    CropImageHolder={CropImageHolder}\r\n                    cropCanvasRef={cropCanvasRef}\r\n                    crop={crop}\r\n                    image={photo}\r\n                    getpreviewFixedWidth={getpreviewFixedWidth}\r\n                  />\r\n                </div>\r\n              );\r\n            })\r\n          : null}{\" \"}\r\n      </Masonry>\r\n    </>\r\n  );\r\n}\r\n\r\nexport const SuperCrop = React.memo(SuperCropx);\r\n"]},"metadata":{},"sourceType":"module"}