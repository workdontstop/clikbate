{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oghen\\\\OneDrive\\\\Documents\\\\ClikBate\\\\Clikbate\\\\src\\\\upload\\\\VideoEditor.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { matchMobile } from \"../DetectDevice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction VideoEditorx({\n  VideoUrl,\n  VideoUrl2,\n  ShowVideo2,\n  ShowVideo,\n  setShowVideo2,\n  setShowVideo\n}) {\n  _s();\n\n  ///\n  const videoPlayerRef = useRef(null); ///\n  ///DARKMODE FROM REDUX\n\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const [currentTimestamp, setCurrentTimestamp] = useState(0);\n\n  const updateCurrentTimestamp = () => {\n    if (videoPlayerRef.current) {\n      var x = videoPlayerRef.current.currentTime;\n      setCurrentTimestamp(x);\n      setprocessing(true);\n      startRecording(VideoUrl, x - 1, 17);\n    }\n  }; // New state for recorded video URL\n\n\n  const [recordedVideoUrl, setRecordedVideoUrl] = useState(null);\n  const [rec, setRec] = useState(false);\n  const [processing, setprocessing] = useState(false); // Function to start recording\n\n  const startRecording = (sourceVideoUrl, startTime, duration) => {\n    const video = videoPlayerRef.current;\n\n    if (video) {\n      video.src = sourceVideoUrl;\n      video.currentTime = startTime;\n\n      video.onloadedmetadata = () => {\n        video.currentTime = startTime;\n      };\n\n      video.onseeked = () => {\n        video.play();\n        const stream = video.captureStream(); // Specify MIME type and quality parameters\n\n        const options = {\n          mimeType: 'video/webm; codecs=vp9',\n          // or 'video/mp4' based on browser support\n          videoBitsPerSecond: 750000 // Adjust bitrate as needed\n\n        };\n        let recorder;\n\n        if (MediaRecorder.isTypeSupported(options.mimeType)) {\n          recorder = new MediaRecorder(stream, options);\n        } else {\n          recorder = new MediaRecorder(stream); // Fallback to default settings\n        }\n\n        const chunks = [];\n\n        recorder.ondataavailable = e => chunks.push(e.data);\n\n        recorder.onstop = () => {\n          const blob = new Blob(chunks, {\n            type: options.mimeType\n          });\n          const url = URL.createObjectURL(blob);\n          setRecordedVideoUrl(url);\n          video.pause();\n          setTimeout(() => {\n            setRec(true);\n            setprocessing(false);\n          }, 2000);\n        };\n\n        recorder.start();\n\n        if (Timer2.current) {\n          clearTimeout(Timer2.current);\n        }\n\n        Timer2.current = setTimeout(() => {\n          recorder.stop();\n        }, duration * 1000);\n      };\n\n      video.load();\n    }\n  }; // Call this function when you want to start recording\n  // For example: startRecording(VideoUrl, 0, 10) for a 10-second clip from the start\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      xs: 12,\n      style: {\n        display: ShowVideo || ShowVideo2 ? 'block' : 'none',\n        position: 'fixed',\n        top: '0vh',\n        height: '100vh',\n        backgroundColor: '#555555',\n        width: '100%',\n        margin: 'auto',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        ref: videoPlayerRef,\n        src: VideoUrl,\n        controls: true,\n        style: {\n          width: '60%',\n          margin: 'auto',\n          textAlign: 'center'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        style: {\n          bottom: '-7vh',\n          position: 'relative',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          fontSize: '24px',\n          fontFamily: 'Helvetica, Arial, sans-serif',\n          color: '#ffffff'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 2,\n          onClick: () => {\n            if (processing) {} else {\n              updateCurrentTimestamp();\n            }\n          },\n          style: {\n            cursor: processing ? 'default' : 'pointer',\n            opacity: processing ? 0.25 : 1,\n            height: '15vh',\n            border: '2px solid white',\n            borderRadius: '8px',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center'\n          },\n          children: processing ? currentTimestamp : 'START'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), processing ? /*#__PURE__*/_jsxDEV(Grid, {\n          className: \"blinking\",\n          item: true,\n          xs: 2,\n          style: {\n            height: '15vh',\n            border: '0px solid white',\n            borderRadius: '8px',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            fontSize: '24px',\n            visibility: 'visible'\n          },\n          children: \"PROCESSING..\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 2,\n          style: {\n            height: '15vh',\n            border: '2px solid white',\n            borderRadius: '8px',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            fontSize: '24px',\n            visibility: recordedVideoUrl && rec ? 'visible' : 'hidden'\n          },\n          children: \"PREVIEW\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          onClick: () => {\n            const video = videoPlayerRef.current;\n            video === null || video === void 0 ? void 0 : video.pause();\n            setprocessing(false);\n          },\n          xs: 2,\n          style: {\n            cursor: processing ? 'pointer' : 'default',\n            opacity: processing ? 1 : 0.25,\n            height: '15vh',\n            border: '2px solid white',\n            borderRadius: '8px',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            fontSize: '24px'\n          },\n          children: \"END\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      style: {\n        margin: \"auto\",\n        textAlign: \"right\",\n        left: '5px',\n        height: \"20px\",\n        position: 'fixed',\n        top: '3vh',\n        right: '3vw'\n      },\n      children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n        onClick: () => {\n          setShowVideo(false);\n          setShowVideo2(false);\n        },\n        className: darkmodeReducer ? \"make-small-icons-clickable-lightCrop dontallowhighlighting zuperkingIcon \" : \"make-small-icons-clickable-darkCrop dontallowhighlighting zuperkingIcon  \",\n        style: {\n          margin: \"auto\",\n          color: \"#ffffff\",\n          fontSize: matchMobile ? `3vh` : `2.5vw`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this), recordedVideoUrl && rec ? /*#__PURE__*/_jsxDEV(\"video\", {\n      src: recordedVideoUrl,\n      controls: true,\n      style: {\n        width: '40%',\n        margin: 'auto',\n        textAlign: 'center',\n        visibility: 'hidden'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 35\n    }, this) : null]\n  }, void 0, true);\n}\n\n_s(VideoEditorx, \"aw6ERjfYrn/2NlPAr6dRXKApP7Y=\", false, function () {\n  return [useSelector];\n});\n\n_c = VideoEditorx;\nexport const VideoEditor = /*#__PURE__*/React.memo(VideoEditorx);\n_c2 = VideoEditor;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"VideoEditorx\");\n$RefreshReg$(_c2, \"VideoEditor\");","map":{"version":3,"sources":["C:/Users/oghen/OneDrive/Documents/ClikBate/Clikbate/src/upload/VideoEditor.tsx"],"names":["React","useRef","useState","Grid","useSelector","CloseIcon","matchMobile","VideoEditorx","VideoUrl","VideoUrl2","ShowVideo2","ShowVideo","setShowVideo2","setShowVideo","videoPlayerRef","darkmode","state","GlobalReducer","darkmodeReducer","currentTimestamp","setCurrentTimestamp","updateCurrentTimestamp","current","x","currentTime","setprocessing","startRecording","recordedVideoUrl","setRecordedVideoUrl","rec","setRec","processing","sourceVideoUrl","startTime","duration","video","src","onloadedmetadata","onseeked","play","stream","captureStream","options","mimeType","videoBitsPerSecond","recorder","MediaRecorder","isTypeSupported","chunks","ondataavailable","e","push","data","onstop","blob","Blob","type","url","URL","createObjectURL","pause","setTimeout","start","Timer2","clearTimeout","stop","load","display","position","top","height","backgroundColor","width","margin","textAlign","bottom","alignItems","justifyContent","fontSize","fontFamily","color","cursor","opacity","border","borderRadius","visibility","left","right","VideoEditor","memo"],"mappings":"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","sourcesContent":["import React, {\r\n  useRef,\r\n  useState,\r\n  useEffect,\r\n  useLayoutEffect,\r\n  useCallback,\r\n} from \"react\";\r\n\r\nimport { Grid } from \"@material-ui/core\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport Cropper from \"react-easy-crop\";\r\nimport MusicNoteIcon from \"@mui/icons-material/MusicNote\";\r\nimport PhotoIcon from \"@mui/icons-material/Photo\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport GifIcon from \"@mui/icons-material/Gif\";\r\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\r\nimport Slider from \"@mui/material/Slider\";\r\nimport { AnySoaRecord } from \"dns\";\r\nimport { PreviewCanvas } from \"./PreviewCanvas\";\r\nimport { PreviewCanvasCropAll } from \"./PreviewCanvasCropAll\";\r\nimport CropIcon from \"@mui/icons-material/Crop\";\r\nimport CheckIcon from \"@mui/icons-material/Check\";\r\nimport { matchPc, matchTablet, matchMobile } from \"../DetectDevice\";\r\n\r\ninterface HTMLVideoElementWithCapture extends HTMLVideoElement {\r\n  captureStream(): MediaStream;\r\n}\r\n\r\n\r\n\r\nfunction VideoEditorx({ VideoUrl, VideoUrl2, ShowVideo2, ShowVideo, setShowVideo2, setShowVideo }: any): JSX.Element {\r\n\r\n  ///\r\n\r\n  const videoPlayerRef = useRef<HTMLVideoElementWithCapture>(null);\r\n\r\n\r\n\r\n  ///\r\n  ///DARKMODE FROM REDUX\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n\r\n  const darkmodeReducer = darkmode;\r\n\r\n  const [currentTimestamp, setCurrentTimestamp] = useState(0);\r\n\r\n  const updateCurrentTimestamp = () => {\r\n    if (videoPlayerRef.current) {\r\n      var x = videoPlayerRef.current.currentTime;\r\n      setCurrentTimestamp(x);\r\n\r\n      setprocessing(true);\r\n\r\n      startRecording(VideoUrl, x - 1, 17);\r\n    }\r\n  };\r\n\r\n  // New state for recorded video URL\r\n  const [recordedVideoUrl, setRecordedVideoUrl] = useState(null);\r\n\r\n  const [rec, setRec] = useState(false);\r\n\r\n  const [processing, setprocessing] = useState(false);\r\n\r\n\r\n\r\n  // Function to start recording\r\n  const startRecording = (sourceVideoUrl: any, startTime: any, duration: any) => {\r\n    const video = videoPlayerRef.current;\r\n\r\n    if (video) {\r\n      video.src = sourceVideoUrl;\r\n      video.currentTime = startTime;\r\n\r\n      video.onloadedmetadata = () => {\r\n        video.currentTime = startTime;\r\n      };\r\n\r\n      video.onseeked = () => {\r\n        video.play();\r\n        const stream = video.captureStream();\r\n\r\n        // Specify MIME type and quality parameters\r\n        const options = {\r\n          mimeType: 'video/webm; codecs=vp9', // or 'video/mp4' based on browser support\r\n          videoBitsPerSecond: 750000 // Adjust bitrate as needed\r\n        };\r\n\r\n        let recorder: any;\r\n        if (MediaRecorder.isTypeSupported(options.mimeType)) {\r\n          recorder = new MediaRecorder(stream, options);\r\n        } else {\r\n          recorder = new MediaRecorder(stream); // Fallback to default settings\r\n        }\r\n\r\n        const chunks: any = [];\r\n        recorder.ondataavailable = (e: any) => chunks.push(e.data);\r\n        recorder.onstop = () => {\r\n          const blob = new Blob(chunks, { type: options.mimeType });\r\n          const url: any = URL.createObjectURL(blob);\r\n          setRecordedVideoUrl(url);\r\n          video.pause();\r\n\r\n          setTimeout(() => {\r\n            setRec(true);\r\n            setprocessing(false);\r\n          }, 2000);\r\n        };\r\n\r\n        recorder.start();\r\n        if (Timer2.current) {\r\n          clearTimeout(Timer2.current);\r\n        }\r\n        Timer2.current = setTimeout(() => {\r\n          recorder.stop();\r\n        }, duration * 1000);\r\n      };\r\n\r\n      video.load();\r\n    }\r\n  };\r\n\r\n\r\n  // Call this function when you want to start recording\r\n  // For example: startRecording(VideoUrl, 0, 10) for a 10-second clip from the start\r\n\r\n  return (\r\n    <>\r\n\r\n      <Grid xs={12} style={{\r\n        display: ShowVideo || ShowVideo2 ? 'block' : 'none', position: 'fixed', top: '0vh', height: '100vh',\r\n        backgroundColor: '#555555', width: '100%', margin: 'auto', textAlign: 'center'\r\n      }} >\r\n        <video ref={videoPlayerRef} src={VideoUrl} controls style={{\r\n          width: '60%', margin: 'auto', textAlign: 'center'\r\n\r\n        }}></video>\r\n\r\n\r\n\r\n\r\n        <Grid item xs={12} style={{\r\n          bottom: '-7vh', position: 'relative', display: 'flex', alignItems: 'center',\r\n          justifyContent: 'center', fontSize: '24px', fontFamily: 'Helvetica, Arial, sans-serif', color: '#ffffff'\r\n        }}>\r\n          <Grid item xs={2}\r\n\r\n            onClick={() => {\r\n              if (processing) { } else {\r\n                updateCurrentTimestamp();\r\n              }\r\n\r\n            }}\r\n            style={{\r\n              cursor: processing ? 'default' : 'pointer',\r\n              opacity: processing ? 0.25 : 1,\r\n              height: '15vh', border: '2px solid white', borderRadius: '8px', display: 'flex', alignItems: 'center', justifyContent: 'center',\r\n\r\n            }}>\r\n            {processing ? currentTimestamp : 'START'}\r\n          </Grid>\r\n\r\n\r\n          {processing ? <Grid className=\"blinking\" item xs={2} style={{\r\n            height: '15vh', border: '0px solid white', borderRadius: '8px',\r\n            display: 'flex', alignItems: 'center', justifyContent: 'center', fontSize: '24px', visibility: 'visible'\r\n          }}>\r\n            PROCESSING..\r\n          </Grid> : <Grid item xs={2} style={{\r\n            height: '15vh', border: '2px solid white', borderRadius: '8px',\r\n            display: 'flex', alignItems: 'center', justifyContent: 'center', fontSize: '24px',\r\n            visibility: recordedVideoUrl && rec ? 'visible' : 'hidden'\r\n          }}>\r\n            PREVIEW\r\n          </Grid>}\r\n\r\n\r\n\r\n\r\n          <Grid item onClick={() => {\r\n            const video = videoPlayerRef.current;\r\n            video?.pause();\r\n            setprocessing(false);\r\n          }} xs={2} style={{\r\n            cursor: processing ? 'pointer' : 'default',\r\n            opacity: processing ? 1 : 0.25,\r\n            height: '15vh', border: '2px solid white', borderRadius: '8px',\r\n            display: 'flex', alignItems: 'center', justifyContent: 'center', fontSize: '24px',\r\n          }}>\r\n            END\r\n          </Grid>\r\n\r\n        </Grid>\r\n\r\n\r\n      </Grid >\r\n      <Grid\r\n        item\r\n        xs={12}\r\n        style={{\r\n          margin: \"auto\",\r\n          textAlign: \"right\",\r\n          left: '5px',\r\n          height: \"20px\",\r\n          position: 'fixed',\r\n          top: '3vh',\r\n          right: '3vw'\r\n        }}\r\n      >\r\n        <CloseIcon\r\n          onClick={() => {\r\n            setShowVideo(false);\r\n            setShowVideo2(false);\r\n\r\n          }}\r\n          className={\r\n            darkmodeReducer\r\n              ? \"make-small-icons-clickable-lightCrop dontallowhighlighting zuperkingIcon \"\r\n              : \"make-small-icons-clickable-darkCrop dontallowhighlighting zuperkingIcon  \"\r\n          }\r\n          style={{\r\n            margin: \"auto\",\r\n            color: \"#ffffff\",\r\n            fontSize: matchMobile\r\n              ? `3vh`\r\n              : `2.5vw`,\r\n\r\n          }}\r\n        />\r\n      </Grid>\r\n\r\n\r\n\r\n      {/* Preview for recorded video */}\r\n      {\r\n        recordedVideoUrl && rec ? <video src={recordedVideoUrl} controls style={{\r\n          width: '40%', margin: 'auto',\r\n          textAlign: 'center', visibility: 'hidden',\r\n        }}></video> : null\r\n      }\r\n\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport const VideoEditor = React.memo(VideoEditorx)"]},"metadata":{},"sourceType":"module"}