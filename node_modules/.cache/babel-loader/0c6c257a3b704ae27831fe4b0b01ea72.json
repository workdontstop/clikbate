{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\upload\\\\PreviewCanvas.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction PreviewCanvasx({\n  crop,\n  zoom,\n  image,\n  getSliderWidth,\n  index,\n  cropCanvasRef\n}) {\n  _s();\n\n  ///\n  ///\n  ///DARKMODE FROM REDUX\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const canvasRef = useRef(null);\n  const [imagehold, setimagehold] = useState(null);\n  const [imageWidth, setimageWidth] = useState(null);\n  const [imageHeight, setimageHeight] = useState(null);\n  const [imageHeightx, setimageHeightx] = useState(null);\n  const [imageW, setimageW] = useState(null);\n  const [imageH, setimageH] = useState(null);\n  useEffect(() => {\n    const catimage = new Image();\n    catimage.src = image;\n\n    catimage.onload = function () {\n      setimagehold(catimage);\n      let nw = catimage.naturalWidth;\n      let nh = catimage.naturalHeight;\n      let aspectH = 1;\n      let h = getSliderWidth / aspectH;\n      setimageHeight(h);\n\n      if (index === 0) {\n        let aspectH = cropCanvasRef.current.width / cropCanvasRef.current.height;\n        let h = getSliderWidth / aspectH;\n        setimageHeight(h);\n        setimageW(cropCanvasRef.current.width * 1);\n        setimageH(cropCanvasRef.current.height * 1);\n      } else {\n        setimageW(catimage.naturalWidth * 1);\n        setimageH(catimage.naturalHeight * 1);\n      }\n\n      let hxx = imageW / aspectH;\n      setimageHeightx(hxx);\n    };\n  }, [image, imageHeight, imageHeightx, getSliderWidth]);\n  useEffect(() => {\n    if (imagehold && canvasRef.current) {\n      var sourceX = 150;\n      var sourceY = 0;\n      var sourceW = imageWidth;\n      var sourceH = imageHeight;\n      var destW = sourceW;\n      var destH = sourceH;\n      var destX = canvasRef.width / 2 - destW / 2;\n      var destY = canvasRef.height / 2 - destH / 2;\n      const ctx = canvasRef.current.getContext(\"2d\");\n      var ratiow = imageW / crop.y;\n      var newWcxj = crop.x;\n      var newHcxj = imageW / ratiow;\n      var tatioh = imageH / imageHeight;\n      newHcxj = zoom * imageHeight;\n      newWcxj = zoom * imageH / tatioh;\n      canvasRef.current.height = imageHeightx;\n      canvasRef.current.width = imageW;\n\n      if (index === 0) {\n        canvasRef.current.height = imageH;\n        canvasRef.current.width = imageW;\n        ctx.drawImage(cropCanvasRef.current, 0, 0, imageW, imageH);\n      } else {\n        ctx.drawImage(imagehold, 0, 0, imageW, imageH, crop.x, crop.y, imageW * zoom, imageH * zoom);\n      }\n\n      canvasRef.current.style.width = `${getSliderWidth}px`;\n      canvasRef.current.style.height = `${imageHeight}px`;\n    }\n  }, [imagehold, canvasRef, getSliderWidth, imageHeight, crop]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      className: darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\",\n      ref: canvasRef,\n      style: {\n        padding: \"0px\",\n        marginTop: index === 0 || index === 1 || index === 2 ? \"0px\" : \"-5px\"\n      }\n    }, image, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(PreviewCanvasx, \"083X1PNSTlmEYRoSa+Cp0hfkNw0=\", false, function () {\n  return [useSelector];\n});\n\n_c = PreviewCanvasx;\nexport const PreviewCanvas = /*#__PURE__*/React.memo(PreviewCanvasx);\n_c2 = PreviewCanvas;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PreviewCanvasx\");\n$RefreshReg$(_c2, \"PreviewCanvas\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/upload/PreviewCanvas.tsx"],"names":["React","useRef","useState","useEffect","useSelector","PreviewCanvasx","crop","zoom","image","getSliderWidth","index","cropCanvasRef","darkmode","state","GlobalReducer","darkmodeReducer","canvasRef","imagehold","setimagehold","imageWidth","setimageWidth","imageHeight","setimageHeight","imageHeightx","setimageHeightx","imageW","setimageW","imageH","setimageH","catimage","Image","src","onload","nw","naturalWidth","nh","naturalHeight","aspectH","h","current","width","height","hxx","sourceX","sourceY","sourceW","sourceH","destW","destH","destX","destY","ctx","getContext","ratiow","y","newWcxj","x","newHcxj","tatioh","drawImage","style","padding","marginTop","PreviewCanvas","memo"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport Cropper from \"react-easy-crop\";\r\nimport MusicNoteIcon from \"@mui/icons-material/MusicNote\";\r\nimport PhotoIcon from \"@mui/icons-material/Photo\";\r\nimport GifIcon from \"@mui/icons-material/Gif\";\r\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\r\nimport Slider from \"@mui/material/Slider\";\r\nimport { AnySoaRecord } from \"dns\";\r\n\r\nfunction PreviewCanvasx({\r\n  crop,\r\n  zoom,\r\n  image,\r\n  getSliderWidth,\r\n  index,\r\n  cropCanvasRef,\r\n}: any): JSX.Element {\r\n  ///\r\n  ///\r\n  ///DARKMODE FROM REDUX\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n\r\n  const darkmodeReducer = darkmode;\r\n\r\n  const canvasRef: any = useRef(null);\r\n\r\n  const [imagehold, setimagehold] = useState<any>(null);\r\n  const [imageWidth, setimageWidth] = useState<any>(null);\r\n  const [imageHeight, setimageHeight] = useState<any>(null);\r\n  const [imageHeightx, setimageHeightx] = useState<any>(null);\r\n\r\n  const [imageW, setimageW] = useState<any>(null);\r\n  const [imageH, setimageH] = useState<any>(null);\r\n\r\n  useEffect(() => {\r\n    const catimage = new Image();\r\n    catimage.src = image;\r\n    catimage.onload = function () {\r\n      setimagehold(catimage);\r\n\r\n      let nw = catimage.naturalWidth;\r\n      let nh = catimage.naturalHeight;\r\n\r\n      let aspectH = 1;\r\n      let h = getSliderWidth / aspectH;\r\n      setimageHeight(h);\r\n\r\n      if (index === 0) {\r\n        let aspectH =\r\n          cropCanvasRef.current.width / cropCanvasRef.current.height;\r\n        let h = getSliderWidth / aspectH;\r\n        setimageHeight(h);\r\n        setimageW(cropCanvasRef.current.width * 1);\r\n        setimageH(cropCanvasRef.current.height * 1);\r\n      } else {\r\n        setimageW(catimage.naturalWidth * 1);\r\n        setimageH(catimage.naturalHeight * 1);\r\n      }\r\n\r\n      let hxx = imageW / aspectH;\r\n      setimageHeightx(hxx);\r\n    };\r\n  }, [image, imageHeight, imageHeightx, getSliderWidth]);\r\n\r\n  useEffect(() => {\r\n    if (imagehold && canvasRef.current) {\r\n      var sourceX = 150;\r\n      var sourceY = 0;\r\n      var sourceW = imageWidth;\r\n      var sourceH = imageHeight;\r\n      var destW = sourceW;\r\n      var destH = sourceH;\r\n      var destX = canvasRef.width / 2 - destW / 2;\r\n      var destY = canvasRef.height / 2 - destH / 2;\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n\r\n      var ratiow = imageW / crop.y;\r\n      var newWcxj = crop.x;\r\n      var newHcxj = imageW / ratiow;\r\n\r\n      var tatioh = imageH / imageHeight;\r\n      newHcxj = zoom * imageHeight;\r\n      newWcxj = (zoom * imageH) / tatioh;\r\n\r\n      canvasRef.current.height = imageHeightx;\r\n      canvasRef.current.width = imageW;\r\n\r\n      if (index === 0) {\r\n        canvasRef.current.height = imageH;\r\n        canvasRef.current.width = imageW;\r\n        ctx.drawImage(cropCanvasRef.current, 0, 0, imageW, imageH);\r\n      } else {\r\n        ctx.drawImage(\r\n          imagehold,\r\n          0,\r\n          0,\r\n          imageW,\r\n          imageH,\r\n          crop.x,\r\n          crop.y,\r\n          imageW * zoom,\r\n          imageH * zoom\r\n        );\r\n      }\r\n\r\n      canvasRef.current.style.width = `${getSliderWidth}px`;\r\n      canvasRef.current.style.height = `${imageHeight}px`;\r\n    }\r\n  }, [imagehold, canvasRef, getSliderWidth, imageHeight, crop]);\r\n\r\n  return (\r\n    <>\r\n      <canvas\r\n        className={darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\"}\r\n        ref={canvasRef}\r\n        key={image}\r\n        style={{\r\n          padding: \"0px\",\r\n          marginTop: index === 0 || index === 1 || index === 2 ? \"0px\" : \"-5px\",\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport const PreviewCanvas = React.memo(PreviewCanvasx);\r\n"]},"metadata":{},"sourceType":"module"}