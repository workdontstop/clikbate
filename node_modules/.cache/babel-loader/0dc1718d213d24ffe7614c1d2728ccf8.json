{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from 'react';\nconst useTopElementInView = ref => {\n  _s();\n  const [isTopElementInView, setIsTopElementInView] = useState(false);\n  const observerRef = useRef(null); // S\n\n  useEffect(() => {\n    const handleIntersection = entries => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          setIsTopElementInView(true);\n        } else {\n          setIsTopElementInView(false);\n        }\n      });\n    };\n    observerRef.current = new IntersectionObserver(handleIntersection, {\n      threshold: 0\n    });\n    if (ref.current) {\n      observerRef.current.observe(ref.current);\n    }\n    return () => {\n      if (observerRef.current) {\n        observerRef.current.disconnect();\n      }\n    };\n  }, [ref]);\n  return isTopElementInView;\n};\n\n// Now, `isTopElementInView` will be true if the top element is in view, otherwise false.\n_s(useTopElementInView, \"tYSjrnxDaflKKqPwl/tJmXYS5x8=\");","map":{"version":3,"names":["useEffect","useRef","useState","useTopElementInView","ref","_s","isTopElementInView","setIsTopElementInView","observerRef","handleIntersection","entries","forEach","entry","isIntersecting","current","IntersectionObserver","threshold","observe","disconnect"],"sources":["C:/Users/oghen/OneDrive/Documents/ClikBate/clikbate/src/profile/useTopElementInView.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\r\n\r\nconst useTopElementInView = (ref: any) => {\r\n    const [isTopElementInView, setIsTopElementInView] = useState(false);\r\n    const observerRef = useRef<IntersectionObserver | null>(null); // S\r\n\r\n    useEffect(() => {\r\n        const handleIntersection = (entries: any) => {\r\n            entries.forEach((entry: any) => {\r\n                if (entry.isIntersecting) {\r\n                    setIsTopElementInView(true);\r\n                } else {\r\n                    setIsTopElementInView(false);\r\n                }\r\n            });\r\n        };\r\n\r\n\r\n        observerRef.current = new IntersectionObserver(handleIntersection, {\r\n            threshold: 0,\r\n        });\r\n\r\n        if (ref.current) {\r\n            observerRef.current.observe(ref.current);\r\n        }\r\n\r\n        return () => {\r\n            if (observerRef.current) {\r\n                observerRef.current.disconnect();\r\n            }\r\n        };\r\n\r\n\r\n    }, [ref]);\r\n\r\n    return isTopElementInView;\r\n};\r\n\r\n\r\n\r\n// Now, `isTopElementInView` will be true if the top element is in view, otherwise false.\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAEnD,MAAMC,mBAAmB,GAAIC,GAAQ,IAAK;EAAAC,EAAA;EACtC,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EACnE,MAAMM,WAAW,GAAGP,MAAM,CAA8B,IAAI,CAAC,CAAC,CAAC;;EAE/DD,SAAS,CAAC,MAAM;IACZ,MAAMS,kBAAkB,GAAIC,OAAY,IAAK;MACzCA,OAAO,CAACC,OAAO,CAAEC,KAAU,IAAK;QAC5B,IAAIA,KAAK,CAACC,cAAc,EAAE;UACtBN,qBAAqB,CAAC,IAAI,CAAC;QAC/B,CAAC,MAAM;UACHA,qBAAqB,CAAC,KAAK,CAAC;QAChC;MACJ,CAAC,CAAC;IACN,CAAC;IAGDC,WAAW,CAACM,OAAO,GAAG,IAAIC,oBAAoB,CAACN,kBAAkB,EAAE;MAC/DO,SAAS,EAAE;IACf,CAAC,CAAC;IAEF,IAAIZ,GAAG,CAACU,OAAO,EAAE;MACbN,WAAW,CAACM,OAAO,CAACG,OAAO,CAACb,GAAG,CAACU,OAAO,CAAC;IAC5C;IAEA,OAAO,MAAM;MACT,IAAIN,WAAW,CAACM,OAAO,EAAE;QACrBN,WAAW,CAACM,OAAO,CAACI,UAAU,CAAC,CAAC;MACpC;IACJ,CAAC;EAGL,CAAC,EAAE,CAACd,GAAG,CAAC,CAAC;EAET,OAAOE,kBAAkB;AAC7B,CAAC;;AAID;AAAAD,EAAA,CAtCMF,mBAAmB"},"metadata":{},"sourceType":"module"}