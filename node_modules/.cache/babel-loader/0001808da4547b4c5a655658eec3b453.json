{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\upload\\\\PreviewCanvas.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction PreviewCanvasx({\n  crop,\n  zoom,\n  image,\n  getSliderWidth,\n  index,\n  cropCanvasRef\n}) {\n  _s();\n\n  ///\n  ///\n  ///DARKMODE FROM REDUX\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const canvasRef = useRef(null);\n  const [imagehold, setimagehold] = useState(null);\n  const [imageWidth, setimageWidth] = useState(null);\n  const [imageHeight, setimageHeight] = useState(null);\n  const [imageHeightx, setimageHeightx] = useState(null);\n  const [imageW, setimageW] = useState(null);\n  const [imageH, setimageH] = useState(null);\n  useEffect(() => {\n    if (cropCanvasRef && cropCanvasRef.current) {\n      let aspectH = cropCanvasRef.current.width / cropCanvasRef.current.height;\n      let h = getSliderWidth / aspectH;\n      setimageHeight(h);\n      setimageW(cropCanvasRef.current.width * 1);\n      setimageH(cropCanvasRef.current.height * 1);\n    }\n  }, []);\n  useEffect(() => {\n    if (cropCanvasRef && canvasRef.current) {\n      const ctx = canvasRef.current.getContext(\"2d\");\n      canvasRef.current.width = imageW;\n      canvasRef.current.height = imageH;\n      ctx.drawImage(cropCanvasRef.current, 0, 0, imageW, imageH);\n      canvasRef.current.style.width = `${getSliderWidth}px`;\n      canvasRef.current.style.height = `${imageHeight}px`;\n    }\n  }, [cropCanvasRef, canvasRef, getSliderWidth, imageHeight, imageW, imageH]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      className: darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\",\n      ref: canvasRef,\n      style: {\n        padding: \"0px\",\n        marginTop: index === 0 || index === 1 || index === 2 ? \"0px\" : \"-5px\"\n      }\n    }, image, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(PreviewCanvasx, \"083X1PNSTlmEYRoSa+Cp0hfkNw0=\", false, function () {\n  return [useSelector];\n});\n\n_c = PreviewCanvasx;\nexport const PreviewCanvas = /*#__PURE__*/React.memo(PreviewCanvasx);\n_c2 = PreviewCanvas;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PreviewCanvasx\");\n$RefreshReg$(_c2, \"PreviewCanvas\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/upload/PreviewCanvas.tsx"],"names":["React","useRef","useState","useEffect","useSelector","PreviewCanvasx","crop","zoom","image","getSliderWidth","index","cropCanvasRef","darkmode","state","GlobalReducer","darkmodeReducer","canvasRef","imagehold","setimagehold","imageWidth","setimageWidth","imageHeight","setimageHeight","imageHeightx","setimageHeightx","imageW","setimageW","imageH","setimageH","current","aspectH","width","height","h","ctx","getContext","drawImage","style","padding","marginTop","PreviewCanvas","memo"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport Cropper from \"react-easy-crop\";\r\nimport MusicNoteIcon from \"@mui/icons-material/MusicNote\";\r\nimport PhotoIcon from \"@mui/icons-material/Photo\";\r\nimport GifIcon from \"@mui/icons-material/Gif\";\r\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\r\nimport Slider from \"@mui/material/Slider\";\r\nimport { AnySoaRecord } from \"dns\";\r\n\r\nfunction PreviewCanvasx({\r\n  crop,\r\n  zoom,\r\n  image,\r\n  getSliderWidth,\r\n  index,\r\n  cropCanvasRef,\r\n}: any): JSX.Element {\r\n  ///\r\n  ///\r\n  ///DARKMODE FROM REDUX\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n\r\n  const darkmodeReducer = darkmode;\r\n\r\n  const canvasRef: any = useRef(null);\r\n\r\n  const [imagehold, setimagehold] = useState<any>(null);\r\n\r\n  const [imageWidth, setimageWidth] = useState<any>(null);\r\n  const [imageHeight, setimageHeight] = useState<any>(null);\r\n  const [imageHeightx, setimageHeightx] = useState<any>(null);\r\n\r\n  const [imageW, setimageW] = useState<any>(null);\r\n  const [imageH, setimageH] = useState<any>(null);\r\n\r\n  useEffect(() => {\r\n    if (cropCanvasRef && cropCanvasRef.current) {\r\n      let aspectH = cropCanvasRef.current.width / cropCanvasRef.current.height;\r\n      let h = getSliderWidth / aspectH;\r\n      setimageHeight(h);\r\n      setimageW(cropCanvasRef.current.width * 1);\r\n      setimageH(cropCanvasRef.current.height * 1);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (cropCanvasRef && canvasRef.current) {\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n\r\n      canvasRef.current.width = imageW;\r\n      canvasRef.current.height = imageH;\r\n\r\n      ctx.drawImage(cropCanvasRef.current, 0, 0, imageW, imageH);\r\n\r\n      canvasRef.current.style.width = `${getSliderWidth}px`;\r\n      canvasRef.current.style.height = `${imageHeight}px`;\r\n    }\r\n  }, [cropCanvasRef, canvasRef, getSliderWidth, imageHeight, imageW, imageH]);\r\n\r\n  return (\r\n    <>\r\n      <canvas\r\n        className={darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\"}\r\n        ref={canvasRef}\r\n        key={image}\r\n        style={{\r\n          padding: \"0px\",\r\n          marginTop: index === 0 || index === 1 || index === 2 ? \"0px\" : \"-5px\",\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport const PreviewCanvas = React.memo(PreviewCanvasx);\r\n"]},"metadata":{},"sourceType":"module"}