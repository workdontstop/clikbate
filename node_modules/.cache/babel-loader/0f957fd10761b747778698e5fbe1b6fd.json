{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oghen\\\\OneDrive\\\\Documents\\\\ClikBate\\\\super\\\\src\\\\upload\\\\UploadMenu.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { useSpring, animated } from \"react-spring\";\nimport { CropUploadMode } from \"./CropUploadMode\";\nimport { FilterMode } from \"./FilterMode\";\nimport { UpdateNavCropReducer } from \"../GlobalActions\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction UploadMenux({\n  optionsShow,\n  optinstopshowingReducer,\n  typeTop,\n  closeoptionsslide,\n  animationop,\n  optionsCollectImageRef,\n  handleTouchStartOptions,\n  handleTouchMoveOptions,\n  modalanimation,\n  nextSlidePc,\n  optionsImages,\n  ActiveSlide,\n  optionsNameData,\n  clickOptions,\n  optionsClickType,\n  getSliderWidthNew,\n  cropTOPLEVELScrollRef,\n  refWithimageData,\n  CropSaved,\n  setCropSaved,\n  setallowOverflow,\n  allowOverflow,\n  closeUploadModal,\n  cropscrollRef,\n  setShowModalUpload,\n  setStopBodyScroll,\n  selectedImage,\n  setselectedImage\n}) {\n  _s();\n\n  const [filterImage, setfilterImage] = useState([]);\n  const itemUploadRefSD = useRef([]);\n  const itemUploadRefThumb = useRef([]);\n  const dispatch = useDispatch();\n  const itemUploadRef = useRef([]);\n  const [ActivatefilterImage, setActivatefilterImage] = useState(false); ///\n  ///\n  ///\n  /// GET GLOBAL INNER NAVIGATION VARIABLE\n\n  const {\n    activatefilterImage,\n    activatecropImage\n  } = useSelector(state => ({ ...state.GlobalNavuploadReducer\n  }));\n  const activatefilterImageReducer = activatefilterImage;\n  const activatecropImageReducer = activatecropImage; //\n  //\n  //\n  //USE SLIDE DOWN ANIMATION FROM REACT SPRING\n\n  const animation = useSpring({\n    config: {\n      duration: 600\n    },\n    opacity: activatefilterImageReducer ? 1 : 0\n  });\n  useEffect(() => {\n    dispatch(UpdateNavCropReducer(false));\n  }, []);\n  useEffect(() => {\n    if (activatefilterImageReducer) {\n      setallowOverflow(false);\n    } else {\n      setallowOverflow(true);\n    }\n  }, [activatefilterImageReducer]); ///\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(animated.div, {\n      style: { ...animation,\n        position: activatefilterImageReducer ? \"relative\" : \"fixed\",\n        top: activatefilterImageReducer ? \"\" : \"-2000vh\",\n        zIndex: activatefilterImageReducer ? 10 : 1,\n        padding: \"0px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(FilterMode, {\n        closeUploadModal: closeUploadModal,\n        itemUploadRefThumb: itemUploadRefThumb,\n        itemUploadRefSD: itemUploadRefSD,\n        itemUploadRef: itemUploadRef,\n        filterImage: filterImage,\n        selectedImage: selectedImage,\n        ActivatefilterImage: ActivatefilterImage,\n        setActivatefilterImage: setActivatefilterImage,\n        getSliderWidthNew: getSliderWidthNew\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: activatefilterImageReducer ? \"fixed\" : \"relative\",\n        top: activatefilterImageReducer ? \"-2000vh\" : \"\",\n        zIndex: activatefilterImageReducer ? 1 : 10,\n        padding: \"0px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(CropUploadMode, {\n        itemUploadRefThumb: itemUploadRefThumb,\n        itemUploadRefSD: itemUploadRefSD,\n        allowOverflow: allowOverflow,\n        setallowOverflow: setallowOverflow,\n        cropscrollRef: cropscrollRef,\n        closeUploadModalx: closeUploadModal,\n        itemUploadRef: itemUploadRef,\n        CropSaved: CropSaved,\n        ActiveSlide: ActiveSlide,\n        handleTouchStartOptions: handleTouchStartOptions,\n        handleTouchMoveOptions: handleTouchMoveOptions,\n        optionsCollectImageRef: optionsCollectImageRef,\n        modalanimation: modalanimation,\n        getSliderWidthNew: getSliderWidthNew,\n        optionsClickType: optionsClickType,\n        clickOptions: clickOptions,\n        optionsImages: optionsImages,\n        optionsNameData: optionsNameData,\n        cropTOPLEVELScrollRef: cropTOPLEVELScrollRef,\n        refWithimageData: refWithimageData,\n        filterImage: filterImage,\n        setfilterImage: setfilterImage,\n        setActivatefilterImage: setActivatefilterImage,\n        selectedImage: selectedImage,\n        setselectedImage: setselectedImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(UploadMenux, \"7pJ1ZLJIlH4a7cVmFCdxCzMOlVc=\", false, function () {\n  return [useDispatch, useSelector, useSpring];\n});\n\n_c = UploadMenux;\nexport const UploadMenu = /*#__PURE__*/React.memo(UploadMenux);\n_c2 = UploadMenu;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"UploadMenux\");\n$RefreshReg$(_c2, \"UploadMenu\");","map":{"version":3,"sources":["C:/Users/oghen/OneDrive/Documents/ClikBate/super/src/upload/UploadMenu.tsx"],"names":["React","useRef","useState","useEffect","useSpring","animated","CropUploadMode","FilterMode","UpdateNavCropReducer","useSelector","useDispatch","UploadMenux","optionsShow","optinstopshowingReducer","typeTop","closeoptionsslide","animationop","optionsCollectImageRef","handleTouchStartOptions","handleTouchMoveOptions","modalanimation","nextSlidePc","optionsImages","ActiveSlide","optionsNameData","clickOptions","optionsClickType","getSliderWidthNew","cropTOPLEVELScrollRef","refWithimageData","CropSaved","setCropSaved","setallowOverflow","allowOverflow","closeUploadModal","cropscrollRef","setShowModalUpload","setStopBodyScroll","selectedImage","setselectedImage","filterImage","setfilterImage","itemUploadRefSD","itemUploadRefThumb","dispatch","itemUploadRef","ActivatefilterImage","setActivatefilterImage","activatefilterImage","activatecropImage","state","GlobalNavuploadReducer","activatefilterImageReducer","activatecropImageReducer","animation","config","duration","opacity","position","top","zIndex","padding","UploadMenu","memo"],"mappings":"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","sourcesContent":["import React, {\r\n  useRef,\r\n  useState,\r\n  useCallback,\r\n  useEffect,\r\n  useLayoutEffect,\r\n} from \"react\";\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport { SuperCrop } from \"./SuperCrop\";\r\nimport MusicNoteIcon from \"@mui/icons-material/MusicNote\";\r\nimport PhotoIcon from \"@mui/icons-material/Photo\";\r\nimport GifIcon from \"@mui/icons-material/Gif\";\r\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\r\nimport Axios from \"axios\";\r\nimport CropIcon from \"@mui/icons-material/Crop\";\r\nimport CheckIcon from \"@mui/icons-material/Check\";\r\nimport { PreviewCanvasCropAll } from \"./PreviewCanvasCropAll\";\r\nimport { PreviewCanvas } from \"./PreviewCanvas\";\r\nimport { CropUploadMode } from \"./CropUploadMode\";\r\nimport { FilterMode } from \"./FilterMode\";\r\nimport { UpdateNavCropReducer } from \"../GlobalActions\";\r\nimport { RootStateOrAny, useSelector, useDispatch } from \"react-redux\";\r\n\r\nfunction UploadMenux({\r\n  optionsShow,\r\n  optinstopshowingReducer,\r\n  typeTop,\r\n  closeoptionsslide,\r\n  animationop,\r\n  optionsCollectImageRef,\r\n  handleTouchStartOptions,\r\n  handleTouchMoveOptions,\r\n  modalanimation,\r\n  nextSlidePc,\r\n  optionsImages,\r\n  ActiveSlide,\r\n  optionsNameData,\r\n  clickOptions,\r\n  optionsClickType,\r\n  getSliderWidthNew,\r\n  cropTOPLEVELScrollRef,\r\n  refWithimageData,\r\n  CropSaved,\r\n  setCropSaved,\r\n  setallowOverflow,\r\n  allowOverflow,\r\n  closeUploadModal,\r\n  cropscrollRef,\r\n  setShowModalUpload,\r\n  setStopBodyScroll,\r\n  selectedImage,\r\n  setselectedImage\r\n}: any): JSX.Element {\r\n  const [filterImage, setfilterImage] = useState<Array<any>>([]);\r\n\r\n  const itemUploadRefSD = useRef<any>([]);\r\n  const itemUploadRefThumb = useRef<any>([]);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const itemUploadRef = useRef<any>([]);\r\n\r\n  const [ActivatefilterImage, setActivatefilterImage] =\r\n    useState<boolean>(false);\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// GET GLOBAL INNER NAVIGATION VARIABLE\r\n  const { activatefilterImage, activatecropImage } = useSelector(\r\n    (state: RootStateOrAny) => ({\r\n      ...state.GlobalNavuploadReducer,\r\n    })\r\n  );\r\n\r\n  const activatefilterImageReducer = activatefilterImage;\r\n  const activatecropImageReducer = activatecropImage;\r\n\r\n\r\n  //\r\n  //\r\n  //\r\n  //USE SLIDE DOWN ANIMATION FROM REACT SPRING\r\n  const animation = useSpring({\r\n    config: {\r\n      duration: 600,\r\n    },\r\n    opacity: activatefilterImageReducer ? 1 : 0,\r\n  });\r\n\r\n  useEffect(() => {\r\n    dispatch(UpdateNavCropReducer(false));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (activatefilterImageReducer) {\r\n      setallowOverflow(false);\r\n    } else {\r\n      setallowOverflow(true);\r\n    }\r\n  }, [activatefilterImageReducer]);\r\n  ///\r\n\r\n  return (\r\n    <>\r\n      <animated.div\r\n        style={{\r\n          ...animation,\r\n          position: activatefilterImageReducer ? \"relative\" : \"fixed\",\r\n          top: activatefilterImageReducer ? \"\" : \"-2000vh\",\r\n          zIndex: activatefilterImageReducer ? 10 : 1,\r\n          padding: \"0px\",\r\n        }}\r\n      >\r\n        <FilterMode\r\n          closeUploadModal={closeUploadModal}\r\n          itemUploadRefThumb={itemUploadRefThumb}\r\n          itemUploadRefSD={itemUploadRefSD}\r\n          itemUploadRef={itemUploadRef}\r\n          filterImage={filterImage}\r\n          selectedImage={selectedImage}\r\n          ActivatefilterImage={ActivatefilterImage}\r\n          setActivatefilterImage={setActivatefilterImage}\r\n          getSliderWidthNew={getSliderWidthNew}\r\n        />\r\n      </animated.div>\r\n\r\n      <div\r\n        style={{\r\n          position: activatefilterImageReducer ? \"fixed\" : \"relative\",\r\n          top: activatefilterImageReducer ? \"-2000vh\" : \"\",\r\n          zIndex: activatefilterImageReducer ? 1 : 10,\r\n          padding: \"0px\",\r\n        }}\r\n      >\r\n        <CropUploadMode\r\n          itemUploadRefThumb={itemUploadRefThumb}\r\n          itemUploadRefSD={itemUploadRefSD}\r\n          allowOverflow={allowOverflow}\r\n          setallowOverflow={setallowOverflow}\r\n          cropscrollRef={cropscrollRef}\r\n          closeUploadModalx={closeUploadModal}\r\n          itemUploadRef={itemUploadRef}\r\n          CropSaved={CropSaved}\r\n          ActiveSlide={ActiveSlide}\r\n          handleTouchStartOptions={handleTouchStartOptions}\r\n          handleTouchMoveOptions={handleTouchMoveOptions}\r\n          optionsCollectImageRef={optionsCollectImageRef}\r\n          modalanimation={modalanimation}\r\n          getSliderWidthNew={getSliderWidthNew}\r\n          optionsClickType={optionsClickType}\r\n          clickOptions={clickOptions}\r\n          optionsImages={optionsImages}\r\n          optionsNameData={optionsNameData}\r\n          cropTOPLEVELScrollRef={cropTOPLEVELScrollRef}\r\n          refWithimageData={refWithimageData}\r\n          filterImage={filterImage}\r\n          setfilterImage={setfilterImage}\r\n          setActivatefilterImage={setActivatefilterImage}\r\n          selectedImage={selectedImage}\r\n          setselectedImage={setselectedImage}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport const UploadMenu = React.memo(UploadMenux);\r\n"]},"metadata":{},"sourceType":"module"}