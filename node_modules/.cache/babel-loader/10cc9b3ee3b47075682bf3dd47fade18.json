{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\upload\\\\PreviewCanvas.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction PreviewCanvasx({\n  image,\n  getSliderWidth,\n  index\n}) {\n  _s();\n\n  ///\n  ///\n  ///DARKMODE FROM REDUX\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const canvasRef = useRef(null);\n  const [imagehold, setimagehold] = useState(null);\n  const [imageWidth, setimageWidth] = useState(null);\n  const [imageHeight, setimageHeight] = useState(null);\n  const [imageW, setimageW] = useState(null);\n  const [imageH, setimageH] = useState(null);\n  useEffect(() => {\n    const catimage = new Image();\n    catimage.src = image;\n\n    catimage.onload = function () {\n      setimagehold(catimage);\n      setimageW(catimage.naturalWidth * 1.5);\n      setimageH(catimage.naturalHeight * 1.5);\n      let aspectH = nw / nh;\n      let h = getSliderWidth / aspectH;\n      setimageHeight(h);\n    };\n  }, [image, imageHeight, getSliderWidth]);\n  useEffect(() => {\n    if (imagehold && canvasRef.current) {\n      const ctx = canvasRef.current.getContext(\"2d\");\n      canvasRef.current.height = imageH;\n      canvasRef.current.width = imageW;\n      var ratiow = imageW / 600;\n      var newWcxj = -900;\n      var newHcxj = imageW / ratiow;\n      ctx.drawImage(imagehold, 0, 0, imageW, imageH);\n      canvasRef.current.style.width = `${getSliderWidth}px`;\n      canvasRef.current.style.height = `${imageHeight}px`;\n    }\n  }, [imagehold, canvasRef, getSliderWidth, imageHeight]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      className: darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\",\n      ref: canvasRef,\n      style: {\n        padding: \"0px\",\n        marginTop: index === 0 || index === 1 || index === 2 ? \"0px\" : \"-5px\"\n      }\n    }, image, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(PreviewCanvasx, \"E6oIUX3FGpVIwpHvk62Cd9EQmuo=\", false, function () {\n  return [useSelector];\n});\n\n_c = PreviewCanvasx;\nexport const PreviewCanvas = /*#__PURE__*/React.memo(PreviewCanvasx);\n_c2 = PreviewCanvas;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PreviewCanvasx\");\n$RefreshReg$(_c2, \"PreviewCanvas\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/upload/PreviewCanvas.tsx"],"names":["React","useRef","useState","useEffect","useSelector","PreviewCanvasx","image","getSliderWidth","index","darkmode","state","GlobalReducer","darkmodeReducer","canvasRef","imagehold","setimagehold","imageWidth","setimageWidth","imageHeight","setimageHeight","imageW","setimageW","imageH","setimageH","catimage","Image","src","onload","naturalWidth","naturalHeight","aspectH","nw","nh","h","current","ctx","getContext","height","width","ratiow","newWcxj","newHcxj","drawImage","style","padding","marginTop","PreviewCanvas","memo"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport Cropper from \"react-easy-crop\";\r\nimport MusicNoteIcon from \"@mui/icons-material/MusicNote\";\r\nimport PhotoIcon from \"@mui/icons-material/Photo\";\r\nimport GifIcon from \"@mui/icons-material/Gif\";\r\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\r\nimport Slider from \"@mui/material/Slider\";\r\nimport { AnySoaRecord } from \"dns\";\r\n\r\nfunction PreviewCanvasx({ image, getSliderWidth, index }: any): JSX.Element {\r\n  ///\r\n  ///\r\n  ///DARKMODE FROM REDUX\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n\r\n  const darkmodeReducer = darkmode;\r\n\r\n  const canvasRef: any = useRef(null);\r\n\r\n  const [imagehold, setimagehold] = useState<any>(null);\r\n  const [imageWidth, setimageWidth] = useState<any>(null);\r\n  const [imageHeight, setimageHeight] = useState<any>(null);\r\n\r\n  const [imageW, setimageW] = useState<any>(null);\r\n  const [imageH, setimageH] = useState<any>(null);\r\n\r\n  useEffect(() => {\r\n    const catimage = new Image();\r\n    catimage.src = image;\r\n    catimage.onload = function () {\r\n      setimagehold(catimage);\r\n\r\n      setimageW(catimage.naturalWidth * 1.5);\r\n      setimageH(catimage.naturalHeight * 1.5);\r\n\r\n      let aspectH = nw / nh;\r\n      let h = getSliderWidth / aspectH;\r\n      setimageHeight(h);\r\n    };\r\n  }, [image, imageHeight, getSliderWidth]);\r\n\r\n  useEffect(() => {\r\n    if (imagehold && canvasRef.current) {\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n      canvasRef.current.height = imageH;\r\n      canvasRef.current.width = imageW;\r\n\r\n      var ratiow = imageW / 600;\r\n      var newWcxj = -900;\r\n      var newHcxj = imageW / ratiow;\r\n\r\n      ctx.drawImage(imagehold, 0, 0, imageW, imageH);\r\n\r\n      canvasRef.current.style.width = `${getSliderWidth}px`;\r\n      canvasRef.current.style.height = `${imageHeight}px`;\r\n    }\r\n  }, [imagehold, canvasRef, getSliderWidth, imageHeight]);\r\n\r\n  return (\r\n    <>\r\n      <canvas\r\n        className={darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\"}\r\n        ref={canvasRef}\r\n        key={image}\r\n        style={{\r\n          padding: \"0px\",\r\n          marginTop: index === 0 || index === 1 || index === 2 ? \"0px\" : \"-5px\",\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport const PreviewCanvas = React.memo(PreviewCanvasx);\r\n"]},"metadata":{},"sourceType":"module"}