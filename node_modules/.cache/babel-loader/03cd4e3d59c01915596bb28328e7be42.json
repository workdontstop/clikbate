{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\upload\\\\CropInput.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback } from \"react\";\nimport { matchPc } from \"../DetectDevice\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { animated } from \"react-spring\";\nimport { UploadOptions } from \"./UploadOptions\";\nimport { UpdateNavFilterReducer } from \"../GlobalActions\";\nimport { UpdateNavCropReducer } from \"../GlobalActions\";\nimport { Grid } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction CropInputx({\n  setcropimage,\n  allowFilters,\n  setallowCropAllCanvas,\n  ActiveSlide,\n  optionsClickType,\n  clickOptions,\n  setselectedImage,\n  handleTouchStartOptions,\n  handleTouchMoveOptions,\n  optionsCollectImageRef,\n  modalanimation,\n  optionsImages,\n  optionsNameData,\n  getSliderWidthNew\n}) {\n  _s();\n\n  const dispatch = useDispatch();\n\n  const imageHandleChange = e => {\n    if (e.target.files && e.target.files.length > 0) {\n      const FileArray = Array.from(e.target.files).map(file => URL.createObjectURL(file));\n      setselectedImage([]);\n      setselectedImage(prevImages => prevImages.concat(FileArray));\n      setcropimage(FileArray[0]); //const formData = new FormData();\n      ///for (let i = 0; i < e.target.files.length; i++) {\n      //formData.append(\"superImages\", e.target.files[i]);}\n      ////\n\n      window.history.pushState(null, \"\", \"Crop\");\n      dispatch(UpdateNavCropReducer(true));\n    }\n  }; ///\n  ///\n  ///\n  ///OPEN MODAL THEN CALL CLOSEMODAL FUNCTION WHICH WAITS FOR A POP EVENT(for closing modal)\n\n\n  const OpenFilter = useCallback(() => {\n    window.history.pushState(null, \"\", \"filter\");\n    dispatch(UpdateNavFilterReducer(true)); //pushstate add enteries to your history\n  }, []); ///\n  ///\n  ///\n  /// CLOSE MODAL (STARTS AN ONPOPSTATE EVENT)\n\n  const ClickMonster = useCallback(ii => {\n    clickOptions(ii, optionsClickType, \"\");\n\n    if (ActiveSlide === 3 && ii === 3) {\n      if (allowFilters) {\n        setallowCropAllCanvas(false);\n        OpenFilter();\n      }\n    }\n  }, [allowFilters, ActiveSlide, optionsClickType]); ///\n  ///\n  ///\n  /// GET GLOBAL INNER NAVIGATION VARIABLE\n\n  const {\n    activatecropImage\n  } = useSelector(state => ({ ...state.GlobalNavuploadReducer\n  }));\n  const activatecropImageReducer = activatecropImage;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: activatecropImageReducer ? null : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: imageHandleChange,\n        type: \"file\",\n        name: \"superImages\",\n        accept: \"image/*\",\n        multiple: true,\n        id: \"file\",\n        style: {\n          visibility: \"hidden\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        onTouchStart: handleTouchStartOptions,\n        onTouchMove: handleTouchMoveOptions,\n        style: {\n          zIndex: 1,\n          padding: \"0px\",\n          top: matchPc ? \"-2vh\" : \"0vh\",\n          position: \"relative\",\n          margin: \"0 auto\",\n          overflow: \"hidden\",\n          left: \"0px\",\n          height: matchPc ? \"24.4vh\" : \"20.5vh\",\n          paddingBottom: \"1px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(animated.div, {\n          ref: optionsCollectImageRef,\n          style: modalanimation,\n          children: optionsImages.map(i => /*#__PURE__*/_jsxDEV(UploadOptions, {\n            i: i,\n            ActiveSlide: ActiveSlide,\n            optionsNameData: optionsNameData,\n            clickOptions: clickOptions,\n            optionsClickType: optionsClickType,\n            getSliderWidthNew: getSliderWidthNew,\n            ClickMonster: ClickMonster\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this), \" \"]\n    }, void 0, true)\n  }, void 0, false);\n}\n\n_s(CropInputx, \"7VEnFqNNDrtCUkCUZoBwp5y6ouY=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = CropInputx;\nexport const CropInput = /*#__PURE__*/React.memo(CropInputx);\n_c2 = CropInput;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CropInputx\");\n$RefreshReg$(_c2, \"CropInput\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/upload/CropInput.tsx"],"names":["React","useCallback","matchPc","useSelector","useDispatch","animated","UploadOptions","UpdateNavFilterReducer","UpdateNavCropReducer","Grid","CropInputx","setcropimage","allowFilters","setallowCropAllCanvas","ActiveSlide","optionsClickType","clickOptions","setselectedImage","handleTouchStartOptions","handleTouchMoveOptions","optionsCollectImageRef","modalanimation","optionsImages","optionsNameData","getSliderWidthNew","dispatch","imageHandleChange","e","target","files","length","FileArray","Array","from","map","file","URL","createObjectURL","prevImages","concat","window","history","pushState","OpenFilter","ClickMonster","ii","activatecropImage","state","GlobalNavuploadReducer","activatecropImageReducer","visibility","zIndex","padding","top","position","margin","overflow","left","height","paddingBottom","i","CropInput","memo"],"mappings":"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","sourcesContent":["import React, {\r\n  useRef,\r\n  useState,\r\n  useCallback,\r\n  useEffect,\r\n  useLayoutEffect,\r\n} from \"react\";\r\nimport { matchPc, matchTablet, matchMobile } from \"../DetectDevice\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { RootStateOrAny, useSelector, useDispatch } from \"react-redux\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport { SuperCrop } from \"./SuperCrop\";\r\nimport MusicNoteIcon from \"@mui/icons-material/MusicNote\";\r\nimport PhotoIcon from \"@mui/icons-material/Photo\";\r\nimport GifIcon from \"@mui/icons-material/Gif\";\r\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\r\nimport Axios from \"axios\";\r\nimport CropIcon from \"@mui/icons-material/Crop\";\r\nimport CheckIcon from \"@mui/icons-material/Check\";\r\nimport { PreviewCanvasHolder } from \"./PreviewCanvasHolder\";\r\nimport { UploadOptions } from \"./UploadOptions\";\r\n\r\nimport { PreviewCanvas } from \"./PreviewCanvas\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport { UpdateNavFilterReducer } from \"../GlobalActions\";\r\nimport { UpdateNavCropReducer } from \"../GlobalActions\";\r\nimport { styled } from \"@mui/system\";\r\nimport { Grid, Box } from \"@material-ui/core\";\r\n\r\nfunction CropInputx({\r\n  setcropimage,\r\n  allowFilters,\r\n  setallowCropAllCanvas,\r\n  ActiveSlide,\r\n  optionsClickType,\r\n  clickOptions,\r\n  setselectedImage,\r\n  handleTouchStartOptions,\r\n  handleTouchMoveOptions,\r\n  optionsCollectImageRef,\r\n  modalanimation,\r\n  optionsImages,\r\n  optionsNameData,\r\n  getSliderWidthNew,\r\n}: any): JSX.Element {\r\n  const dispatch = useDispatch();\r\n\r\n  const imageHandleChange = (e: any) => {\r\n    if (e.target.files && e.target.files.length > 0) {\r\n      const FileArray = Array.from(e.target.files).map((file: any) =>\r\n        URL.createObjectURL(file)\r\n      );\r\n      setselectedImage([]);\r\n      setselectedImage((prevImages: any) => prevImages.concat(FileArray));\r\n      setcropimage(FileArray[0]);\r\n\r\n      //const formData = new FormData();\r\n      ///for (let i = 0; i < e.target.files.length; i++) {\r\n      //formData.append(\"superImages\", e.target.files[i]);}\r\n      ////\r\n      window.history.pushState(null, \"\", \"Crop\");\r\n      dispatch(UpdateNavCropReducer(true));\r\n    }\r\n  };\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  ///OPEN MODAL THEN CALL CLOSEMODAL FUNCTION WHICH WAITS FOR A POP EVENT(for closing modal)\r\n  const OpenFilter = useCallback(() => {\r\n    window.history.pushState(null, \"\", \"filter\");\r\n    dispatch(UpdateNavFilterReducer(true));\r\n\r\n    //pushstate add enteries to your history\r\n  }, []);\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// CLOSE MODAL (STARTS AN ONPOPSTATE EVENT)\r\n  const ClickMonster = useCallback(\r\n    (ii: any) => {\r\n      clickOptions(ii, optionsClickType, \"\");\r\n      if (ActiveSlide === 3 && ii === 3) {\r\n        if (allowFilters) {\r\n          setallowCropAllCanvas(false);\r\n          OpenFilter();\r\n        }\r\n      }\r\n    },\r\n    [allowFilters, ActiveSlide, optionsClickType]\r\n  );\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// GET GLOBAL INNER NAVIGATION VARIABLE\r\n  const { activatecropImage } = useSelector((state: RootStateOrAny) => ({\r\n    ...state.GlobalNavuploadReducer,\r\n  }));\r\n  const activatecropImageReducer = activatecropImage;\r\n\r\n  return (\r\n    <>\r\n      {activatecropImageReducer ? null : (\r\n        <>\r\n          {\" \"}\r\n          <input\r\n            onChange={imageHandleChange}\r\n            type=\"file\"\r\n            name=\"superImages\"\r\n            accept=\"image/*\"\r\n            multiple\r\n            id=\"file\"\r\n            style={{ visibility: \"hidden\" }}\r\n          />\r\n          <Grid\r\n            container\r\n            onTouchStart={handleTouchStartOptions}\r\n            onTouchMove={handleTouchMoveOptions}\r\n            style={{\r\n              zIndex: 1,\r\n              padding: \"0px\",\r\n              top: matchPc ? \"-2vh\" : \"0vh\",\r\n              position: \"relative\",\r\n              margin: \"0 auto\",\r\n              overflow: \"hidden\",\r\n              left: \"0px\",\r\n              height: matchPc ? \"24.4vh\" : \"20.5vh\",\r\n              paddingBottom: \"1px\",\r\n            }}\r\n          >\r\n            <animated.div ref={optionsCollectImageRef} style={modalanimation}>\r\n              {optionsImages.map((i: any) => (\r\n                <UploadOptions\r\n                  i={i}\r\n                  ActiveSlide={ActiveSlide}\r\n                  optionsNameData={optionsNameData}\r\n                  clickOptions={clickOptions}\r\n                  optionsClickType={optionsClickType}\r\n                  getSliderWidthNew={getSliderWidthNew}\r\n                  ClickMonster={ClickMonster}\r\n                />\r\n              ))}\r\n            </animated.div>\r\n          </Grid>{\" \"}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport const CropInput = React.memo(CropInputx);\r\n"]},"metadata":{},"sourceType":"module"}