{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\profile\\\\Slider.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport Arrow from \"./Arrow\";\nimport Dots from \"./Dots\";\nimport SliderNumber from \"./SliderNumber\";\nimport { Grid } from \"@material-ui/core\";\nimport { animated, useTransition } from \"react-spring\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Slider = ({\n  slides\n}) => {\n  _s();\n\n  const [index, set] = useState(0);\n\n  const getWidth = () => window.innerWidth; ///var newGetWidth = getWidth() * slides.length;\n\n\n  const SlideimageRef = useRef(null);\n  const [height, setheight] = useState(0);\n  const transitions = useTransition(index, {\n    key: index,\n    from: {\n      opacity: 0\n    },\n    enter: {\n      opacity: 1\n    },\n    leave: {\n      opacity: 0\n    },\n    config: {\n      duration: 3000\n    }\n  });\n\n  const nextSlide = () => {\n    set(state => (state + 1) % slides.length);\n  };\n\n  const prevSlide = () => {\n    if (index === 0) {\n      set(slides.length - 1);\n    } else {\n      set(index - 1);\n    }\n  };\n\n  const [touchPosition, setTouchPosition] = useState(null); // ...\n\n  const handleTouchStart = e => {\n    const touchDown = e.touches[0].clientX;\n    setTouchPosition(touchDown);\n  };\n\n  console.log(touchPosition);\n\n  const slideImageOnLoad = item => {\n    if (item === 0 && height === 0) {\n      if (SlideimageRef.current && SlideimageRef.current.clientHeight) {\n        setheight(SlideimageRef.current.clientHeight);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    item: true,\n    xs: 12,\n    children: [/*#__PURE__*/_jsxDEV(SliderNumber, {\n      activeSlide: index,\n      total: slides.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), transitions((style, i) => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(animated.img, {\n        style: { ...style,\n          height: \"auto\",\n          width: \"100%\",\n          objectFit: \"contain\",\n          position: \"absolute\",\n          top: \"0\",\n          left: \"0\"\n        },\n        src: `./images/thumbs/${slides[i]}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(animated.img, {\n        onTouchStart: handleTouchStart,\n        ref: SlideimageRef,\n        onLoad: () => {\n          slideImageOnLoad(i);\n        },\n        style: { ...style,\n          height: \"auto\",\n          width: \"100%\",\n          objectFit: \"contain\",\n          position: \"absolute\",\n          top: \"0\",\n          left: \"0\",\n          zIndex: 1\n        },\n        src: `./images/${slides[i]}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)), \" \", /*#__PURE__*/_jsxDEV(Arrow, {\n      direction: \"left\",\n      clickSlidep: prevSlide,\n      clickSliden: nextSlide,\n      height: height\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dots, {\n      slides: slides,\n      activeSlide: index\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Slider, \"cu4Te5mEoYua/lUQd9wNLKO1MEw=\", false, function () {\n  return [useTransition];\n});\n\n_c = Slider;\nexport default Slider;\n\nvar _c;\n\n$RefreshReg$(_c, \"Slider\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/profile/Slider.tsx"],"names":["React","useState","useRef","Arrow","Dots","SliderNumber","Grid","animated","useTransition","Slider","slides","index","set","getWidth","window","innerWidth","SlideimageRef","height","setheight","transitions","key","from","opacity","enter","leave","config","duration","nextSlide","state","length","prevSlide","touchPosition","setTouchPosition","handleTouchStart","e","touchDown","touches","clientX","console","log","slideImageOnLoad","item","current","clientHeight","style","i","width","objectFit","position","top","left","zIndex"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nimport Arrow from \"./Arrow\";\r\nimport Dots from \"./Dots\";\r\nimport SliderNumber from \"./SliderNumber\";\r\nimport { Paper, Grid } from \"@material-ui/core\";\r\nimport { useSpring, animated, useTransition } from \"react-spring\";\r\n\r\nconst Slider = ({ slides }: any) => {\r\n  const [index, set] = useState(0);\r\n  const getWidth = () => window.innerWidth;\r\n  ///var newGetWidth = getWidth() * slides.length;\r\n\r\n  const SlideimageRef = useRef<HTMLImageElement>(null);\r\n  const [height, setheight] = useState(0);\r\n\r\n  const transitions = useTransition(index, {\r\n    key: index,\r\n    from: { opacity: 0 },\r\n    enter: { opacity: 1 },\r\n    leave: { opacity: 0 },\r\n    config: { duration: 3000 },\r\n  });\r\n\r\n  const nextSlide = () => {\r\n    set((state) => (state + 1) % slides.length);\r\n  };\r\n\r\n  const prevSlide = () => {\r\n    if (index === 0) {\r\n      set(slides.length - 1);\r\n    } else {\r\n      set(index - 1);\r\n    }\r\n  };\r\n\r\n  const [touchPosition, setTouchPosition] = useState(null);\r\n  // ...\r\n  const handleTouchStart = (e) => {\r\n    const touchDown = e.touches[0].clientX;\r\n    setTouchPosition(touchDown);\r\n  };\r\n\r\n  console.log(touchPosition);\r\n\r\n  const slideImageOnLoad = (item: number) => {\r\n    if (item === 0 && height === 0) {\r\n      if (SlideimageRef.current && SlideimageRef.current.clientHeight) {\r\n        setheight(SlideimageRef.current.clientHeight);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid item xs={12}>\r\n      <SliderNumber activeSlide={index} total={slides.length} />\r\n      {transitions((style, i) => (\r\n        <>\r\n          <animated.img\r\n            style={{\r\n              ...style,\r\n              height: \"auto\",\r\n              width: \"100%\",\r\n              objectFit: \"contain\",\r\n              position: \"absolute\",\r\n              top: \"0\",\r\n              left: \"0\",\r\n            }}\r\n            src={`./images/thumbs/${slides[i]}`}\r\n          />\r\n\r\n          <animated.img\r\n            onTouchStart={handleTouchStart}\r\n            ref={SlideimageRef}\r\n            onLoad={() => {\r\n              slideImageOnLoad(i);\r\n            }}\r\n            style={{\r\n              ...style,\r\n              height: \"auto\",\r\n              width: \"100%\",\r\n              objectFit: \"contain\",\r\n              position: \"absolute\",\r\n              top: \"0\",\r\n              left: \"0\",\r\n              zIndex: 1,\r\n            }}\r\n            src={`./images/${slides[i]}`}\r\n          />\r\n        </>\r\n      ))}{\" \"}\r\n      <Arrow\r\n        direction=\"left\"\r\n        clickSlidep={prevSlide}\r\n        clickSliden={nextSlide}\r\n        height={height}\r\n      />\r\n      <Dots slides={slides} activeSlide={index} />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Slider;\r\n"]},"metadata":{},"sourceType":"module"}