{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\upload\\\\PreviewCanvas.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction PreviewCanvasx({\n  crop,\n  zoom,\n  image,\n  getSliderWidth,\n  index\n}) {\n  _s();\n\n  ///\n  ///\n  ///DARKMODE FROM REDUX\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const canvasRef = useRef(null);\n  const [imagehold, setimagehold] = useState(null);\n  const [imageWidth, setimageWidth] = useState(null);\n  const [imageHeight, setimageHeight] = useState(null);\n  const [imageW, setimageW] = useState(null);\n  const [imageH, setimageH] = useState(null);\n  useEffect(() => {\n    const catimage = new Image();\n    catimage.src = image;\n\n    catimage.onload = function () {\n      setimagehold(catimage);\n      let nw = catimage.naturalWidth;\n      let nh = catimage.naturalHeight;\n      setimageW(catimage.naturalWidth * 1);\n      setimageH(catimage.naturalHeight * 1);\n      let aspectH = 1;\n      let h = getSliderWidth / aspectH;\n      setimageHeight(h);\n      let aspectHx = nw / nh;\n      let hx = getSliderWidth / aspectH;\n      setimageHeightx(hx);\n    };\n  }, [image, imageHeight, getSliderWidth]);\n  useEffect(() => {\n    if (imagehold && canvasRef.current) {\n      var sourceX = 150;\n      var sourceY = 0;\n      var sourceW = imageWidth;\n      var sourceH = imageHeight;\n      var destW = sourceW;\n      var destH = sourceH;\n      var destX = canvasRef.width / 2 - destW / 2;\n      var destY = canvasRef.height / 2 - destH / 2;\n      const ctx = canvasRef.current.getContext(\"2d\");\n      canvasRef.current.height = imageH;\n      canvasRef.current.width = imageW;\n      var ratiow = imageW / crop.y;\n      var newWcxj = crop.x;\n      var newHcxj = imageW / ratiow;\n      var tatioh = imageH / imageHeight;\n      newHcxj = zoom * imageHeight;\n      newWcxj = zoom * imageH / tatioh;\n      ctx.drawImage(imagehold, crop.x, crop.y, imageW * zoom, imageH * zoom);\n      canvasRef.current.style.width = `${getSliderWidth}px`;\n      canvasRef.current.style.height = `${imageHeight}px`;\n    }\n  }, [imagehold, canvasRef, getSliderWidth, imageHeight, crop]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      className: darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\",\n      ref: canvasRef,\n      style: {\n        padding: \"0px\",\n        marginTop: index === 0 || index === 1 || index === 2 ? \"0px\" : \"-5px\"\n      }\n    }, image, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(PreviewCanvasx, \"E6oIUX3FGpVIwpHvk62Cd9EQmuo=\", false, function () {\n  return [useSelector];\n});\n\n_c = PreviewCanvasx;\nexport const PreviewCanvas = /*#__PURE__*/React.memo(PreviewCanvasx);\n_c2 = PreviewCanvas;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PreviewCanvasx\");\n$RefreshReg$(_c2, \"PreviewCanvas\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/upload/PreviewCanvas.tsx"],"names":["React","useRef","useState","useEffect","useSelector","PreviewCanvasx","crop","zoom","image","getSliderWidth","index","darkmode","state","GlobalReducer","darkmodeReducer","canvasRef","imagehold","setimagehold","imageWidth","setimageWidth","imageHeight","setimageHeight","imageW","setimageW","imageH","setimageH","catimage","Image","src","onload","nw","naturalWidth","nh","naturalHeight","aspectH","h","aspectHx","hx","setimageHeightx","current","sourceX","sourceY","sourceW","sourceH","destW","destH","destX","width","destY","height","ctx","getContext","ratiow","y","newWcxj","x","newHcxj","tatioh","drawImage","style","padding","marginTop","PreviewCanvas","memo"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AAIA,SAASC,WAAT,QAAyC,aAAzC;;;;AAYA,SAASC,cAAT,CAAwB;AACtBC,EAAAA,IADsB;AAEtBC,EAAAA,IAFsB;AAGtBC,EAAAA,KAHsB;AAItBC,EAAAA,cAJsB;AAKtBC,EAAAA;AALsB,CAAxB,EAMqB;AAAA;;AACnB;AACA;AACA;AAMA,QAAM;AAAEC,IAAAA;AAAF,MAAeP,WAAW,CAAEQ,KAAD,KAAoC,EACnE,GAAGA,KAAK,CAACC;AAD0D,GAApC,CAAD,CAAhC;AAIA,QAAMC,eAAe,GAAGH,QAAxB;AAEA,QAAMI,SAAc,GAAGd,MAAM,CAAC,IAAD,CAA7B;AAEA,QAAM,CAACe,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAM,IAAN,CAA1C;AACA,QAAM,CAACgB,UAAD,EAAaC,aAAb,IAA8BjB,QAAQ,CAAM,IAAN,CAA5C;AACA,QAAM,CAACkB,WAAD,EAAcC,cAAd,IAAgCnB,QAAQ,CAAM,IAAN,CAA9C;AAEA,QAAM,CAACoB,MAAD,EAASC,SAAT,IAAsBrB,QAAQ,CAAM,IAAN,CAApC;AACA,QAAM,CAACsB,MAAD,EAASC,SAAT,IAAsBvB,QAAQ,CAAM,IAAN,CAApC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMuB,QAAQ,GAAG,IAAIC,KAAJ,EAAjB;AACAD,IAAAA,QAAQ,CAACE,GAAT,GAAepB,KAAf;;AACAkB,IAAAA,QAAQ,CAACG,MAAT,GAAkB,YAAY;AAC5BZ,MAAAA,YAAY,CAACS,QAAD,CAAZ;AAEA,UAAII,EAAE,GAAGJ,QAAQ,CAACK,YAAlB;AACA,UAAIC,EAAE,GAAGN,QAAQ,CAACO,aAAlB;AAEAV,MAAAA,SAAS,CAACG,QAAQ,CAACK,YAAT,GAAwB,CAAzB,CAAT;AACAN,MAAAA,SAAS,CAACC,QAAQ,CAACO,aAAT,GAAyB,CAA1B,CAAT;AAEA,UAAIC,OAAO,GAAG,CAAd;AACA,UAAIC,CAAC,GAAG1B,cAAc,GAAGyB,OAAzB;AACAb,MAAAA,cAAc,CAACc,CAAD,CAAd;AAEA,UAAIC,QAAQ,GAAGN,EAAE,GAAGE,EAApB;AACA,UAAIK,EAAE,GAAG5B,cAAc,GAAGyB,OAA1B;AACAI,MAAAA,eAAe,CAACD,EAAD,CAAf;AACD,KAhBD;AAiBD,GApBQ,EAoBN,CAAC7B,KAAD,EAAQY,WAAR,EAAqBX,cAArB,CApBM,CAAT;AAsBAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,SAAS,IAAID,SAAS,CAACwB,OAA3B,EAAoC;AAClC,UAAIC,OAAO,GAAG,GAAd;AACA,UAAIC,OAAO,GAAG,CAAd;AACA,UAAIC,OAAO,GAAGxB,UAAd;AACA,UAAIyB,OAAO,GAAGvB,WAAd;AACA,UAAIwB,KAAK,GAAGF,OAAZ;AACA,UAAIG,KAAK,GAAGF,OAAZ;AACA,UAAIG,KAAK,GAAG/B,SAAS,CAACgC,KAAV,GAAkB,CAAlB,GAAsBH,KAAK,GAAG,CAA1C;AACA,UAAII,KAAK,GAAGjC,SAAS,CAACkC,MAAV,GAAmB,CAAnB,GAAuBJ,KAAK,GAAG,CAA3C;AACA,YAAMK,GAAG,GAAGnC,SAAS,CAACwB,OAAV,CAAkBY,UAAlB,CAA6B,IAA7B,CAAZ;AACApC,MAAAA,SAAS,CAACwB,OAAV,CAAkBU,MAAlB,GAA2BzB,MAA3B;AACAT,MAAAA,SAAS,CAACwB,OAAV,CAAkBQ,KAAlB,GAA0BzB,MAA1B;AAEA,UAAI8B,MAAM,GAAG9B,MAAM,GAAGhB,IAAI,CAAC+C,CAA3B;AACA,UAAIC,OAAO,GAAGhD,IAAI,CAACiD,CAAnB;AACA,UAAIC,OAAO,GAAGlC,MAAM,GAAG8B,MAAvB;AAEA,UAAIK,MAAM,GAAGjC,MAAM,GAAGJ,WAAtB;AACAoC,MAAAA,OAAO,GAAGjD,IAAI,GAAGa,WAAjB;AACAkC,MAAAA,OAAO,GAAI/C,IAAI,GAAGiB,MAAR,GAAkBiC,MAA5B;AAEAP,MAAAA,GAAG,CAACQ,SAAJ,CAAc1C,SAAd,EAAyBV,IAAI,CAACiD,CAA9B,EAAiCjD,IAAI,CAAC+C,CAAtC,EAAyC/B,MAAM,GAAGf,IAAlD,EAAwDiB,MAAM,GAAGjB,IAAjE;AAEAQ,MAAAA,SAAS,CAACwB,OAAV,CAAkBoB,KAAlB,CAAwBZ,KAAxB,GAAiC,GAAEtC,cAAe,IAAlD;AACAM,MAAAA,SAAS,CAACwB,OAAV,CAAkBoB,KAAlB,CAAwBV,MAAxB,GAAkC,GAAE7B,WAAY,IAAhD;AACD;AACF,GA3BQ,EA2BN,CAACJ,SAAD,EAAYD,SAAZ,EAAuBN,cAAvB,EAAuCW,WAAvC,EAAoDd,IAApD,CA3BM,CAAT;AA6BA,sBACE;AAAA,2BACE;AACE,MAAA,SAAS,EAAEQ,eAAe,GAAG,mBAAH,GAAyB,oBADrD;AAEE,MAAA,GAAG,EAAEC,SAFP;AAIE,MAAA,KAAK,EAAE;AACL6C,QAAAA,OAAO,EAAE,KADJ;AAELC,QAAAA,SAAS,EAAEnD,KAAK,KAAK,CAAV,IAAeA,KAAK,KAAK,CAAzB,IAA8BA,KAAK,KAAK,CAAxC,GAA4C,KAA5C,GAAoD;AAF1D;AAJT,OAGOF,KAHP;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAaD;;GA9FQH,c;UAecD,W;;;KAfdC,c;AAgGT,OAAO,MAAMyD,aAAa,gBAAG9D,KAAK,CAAC+D,IAAN,CAAW1D,cAAX,CAAtB;MAAMyD,a","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport Cropper from \"react-easy-crop\";\r\nimport MusicNoteIcon from \"@mui/icons-material/MusicNote\";\r\nimport PhotoIcon from \"@mui/icons-material/Photo\";\r\nimport GifIcon from \"@mui/icons-material/Gif\";\r\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\r\nimport Slider from \"@mui/material/Slider\";\r\nimport { AnySoaRecord } from \"dns\";\r\n\r\nfunction PreviewCanvasx({\r\n  crop,\r\n  zoom,\r\n  image,\r\n  getSliderWidth,\r\n  index,\r\n}: any): JSX.Element {\r\n  ///\r\n  ///\r\n  ///DARKMODE FROM REDUX\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n\r\n  const darkmodeReducer = darkmode;\r\n\r\n  const canvasRef: any = useRef(null);\r\n\r\n  const [imagehold, setimagehold] = useState<any>(null);\r\n  const [imageWidth, setimageWidth] = useState<any>(null);\r\n  const [imageHeight, setimageHeight] = useState<any>(null);\r\n\r\n  const [imageW, setimageW] = useState<any>(null);\r\n  const [imageH, setimageH] = useState<any>(null);\r\n\r\n  useEffect(() => {\r\n    const catimage = new Image();\r\n    catimage.src = image;\r\n    catimage.onload = function () {\r\n      setimagehold(catimage);\r\n\r\n      let nw = catimage.naturalWidth;\r\n      let nh = catimage.naturalHeight;\r\n\r\n      setimageW(catimage.naturalWidth * 1);\r\n      setimageH(catimage.naturalHeight * 1);\r\n\r\n      let aspectH = 1;\r\n      let h = getSliderWidth / aspectH;\r\n      setimageHeight(h);\r\n\r\n      let aspectHx = nw / nh;\r\n      let hx = getSliderWidth / aspectH;\r\n      setimageHeightx(hx);\r\n    };\r\n  }, [image, imageHeight, getSliderWidth]);\r\n\r\n  useEffect(() => {\r\n    if (imagehold && canvasRef.current) {\r\n      var sourceX = 150;\r\n      var sourceY = 0;\r\n      var sourceW = imageWidth;\r\n      var sourceH = imageHeight;\r\n      var destW = sourceW;\r\n      var destH = sourceH;\r\n      var destX = canvasRef.width / 2 - destW / 2;\r\n      var destY = canvasRef.height / 2 - destH / 2;\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n      canvasRef.current.height = imageH;\r\n      canvasRef.current.width = imageW;\r\n\r\n      var ratiow = imageW / crop.y;\r\n      var newWcxj = crop.x;\r\n      var newHcxj = imageW / ratiow;\r\n\r\n      var tatioh = imageH / imageHeight;\r\n      newHcxj = zoom * imageHeight;\r\n      newWcxj = (zoom * imageH) / tatioh;\r\n\r\n      ctx.drawImage(imagehold, crop.x, crop.y, imageW * zoom, imageH * zoom);\r\n\r\n      canvasRef.current.style.width = `${getSliderWidth}px`;\r\n      canvasRef.current.style.height = `${imageHeight}px`;\r\n    }\r\n  }, [imagehold, canvasRef, getSliderWidth, imageHeight, crop]);\r\n\r\n  return (\r\n    <>\r\n      <canvas\r\n        className={darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\"}\r\n        ref={canvasRef}\r\n        key={image}\r\n        style={{\r\n          padding: \"0px\",\r\n          marginTop: index === 0 || index === 1 || index === 2 ? \"0px\" : \"-5px\",\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport const PreviewCanvas = React.memo(PreviewCanvasx);\r\n"]},"metadata":{},"sourceType":"module"}