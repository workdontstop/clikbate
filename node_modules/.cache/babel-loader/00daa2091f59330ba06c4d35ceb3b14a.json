{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\upload\\\\PreviewCanvasCropAll.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useLayoutEffect, useCallback } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction PreviewCanvasCropAllx({\n  setwaitONLOAD,\n  cropCanvasRef,\n  image,\n  getpreviewFixedWidth,\n  index,\n  CropImageHolder,\n  cropheight,\n  cropwidth,\n  BoxCropActivated,\n  hdcanvasvalue,\n  SourceWidthForCropX,\n  SourceWidthForCropY,\n  WideImageCheck,\n  crop,\n  getCropHeight,\n  canvasToimage,\n  refWithimageData,\n  addUploadItemsRef,\n  itemUploadRef,\n  itemUploadRefThumb,\n  itemUploadRefSD,\n  setsuperCropLoadFade,\n  length,\n  filterImage,\n  setfilterImage,\n  setallowFilters,\n  allowCropAllCanvas,\n  cutOffLoader,\n  setcutOffLoader,\n  zoom\n}) {\n  _s();\n\n  ///\n  ///\n  ///DARKMODE FROM REDUX\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const canvasRef = useRef(null);\n  const [previewFilehold, setpreviewFilehold] = useState(null);\n  const [quality, setquality] = useState(0);\n  const [previewCSSHeight, setpreviewCSSHeight] = useState(null);\n  const [cropCanvasWidth, setcropCanvasWidth] = useState(null);\n  const [cropCanvasHeight, setcropCanvasHeight] = useState(null);\n  const Timer1 = useRef(null);\n  const Timer2 = useRef(null);\n  const [imageWidthWithAspectRatio, setimageWidthWithAspectRatio] = useState(null);\n  const [imageWidthWithAspectRatioxx, setimageWidthWithAspectRatioxx] = useState(null);\n  useLayoutEffect(() => {\n    const previewFileReadimage = new Image();\n    previewFileReadimage.src = image;\n\n    previewFileReadimage.onload = function () {\n      if (cropCanvasRef.current) {\n        setpreviewFilehold(previewFileReadimage);\n        var cropH, cropW;\n\n        if (CropImageHolder) {\n          cropW = cropCanvasRef.current.width;\n          cropH = cropCanvasRef.current.height;\n        } else {\n          cropW = previewFileReadimage.naturalWidth;\n          cropH = previewFileReadimage.naturalHeight;\n        }\n\n        if (cropW > cropH) {\n          var Ratio1500 = cropW / quality;\n          var height1500 = cropH / Ratio1500;\n          setcropCanvasWidth(quality);\n          setcropCanvasHeight(height1500);\n        } else {\n          var Ratio1500 = cropH / quality;\n          var width1500 = cropW / Ratio1500;\n          setcropCanvasWidth(width1500);\n          setcropCanvasHeight(quality);\n        }\n\n        let CropAspectRatio = cropwidth / cropheight;\n        let newheight = getpreviewFixedWidth / CropAspectRatio;\n        setpreviewCSSHeight(newheight);\n        let AspectRatioPrevHeightandWidth = previewFileReadimage.naturalHeight / previewFileReadimage.naturalWidth;\n        let newWidth = cropCanvasHeight / AspectRatioPrevHeightandWidth;\n        setimageWidthWithAspectRatio(newWidth);\n        let AspectRatioPrevHeightandWidthx = cropCanvasWidth / cropCanvasHeight;\n        let newWidthx = getpreviewFixedWidth / AspectRatioPrevHeightandWidthx;\n        setimageWidthWithAspectRatioxx(newWidthx);\n      }\n    };\n  }, [quality, image, BoxCropActivated, previewCSSHeight, getpreviewFixedWidth, cropCanvasRef, CropImageHolder, cropwidth, cropheight, crop]); ///\n  ///\n  ///\n  ///  CROPED CANVAS CONVER TO IMAGE\n\n  const convertCroppedCanvasToImage = useCallback(savetox => {\n    if (savetox === 0) {\n      itemUploadRef.current[index].src = canvasRef.current.toDataURL();\n      setcallLayoutoNCE(false); ///////////////////////////////\n\n      const newArraa = [...filterImage];\n      newArraa[index] = canvasRef.current.toDataURL();\n      setfilterImage(newArraa); ///////////////////////////////\n\n      setquality(500);\n      drawcrop(1);\n    } else if (savetox === 1) {\n      itemUploadRefThumb.current[index].src = canvasRef.current.toDataURL();\n\n      if (length - 1 === index) {\n        setwaitONLOAD(false);\n        setsuperCropLoadFade(false);\n        setallowFilters(true);\n      }\n    } else {}\n  }, [canvasToimage, itemUploadRef, itemUploadRefThumb, itemUploadRefSD, canvasRef]); ///\n  ///\n  ///\n  ///  DRAW CANVAS ON CROP COMPLETE CLICK\n\n  const drawcrop = useCallback(saveto => {\n    if (previewFilehold && canvasRef.current) {\n      const ctx = canvasRef.current.getContext(\"2d\");\n      canvasRef.current.height = cropCanvasHeight;\n      canvasRef.current.width = cropCanvasWidth;\n\n      if (BoxCropActivated) {\n        var CropAspectRatio = cropCanvasWidth / cropCanvasHeight;\n        var newheightq = getpreviewFixedWidth / CropAspectRatio;\n\n        if (previewFilehold.naturalWidth > previewFilehold.naturalHeight) {\n          var zoomINBOXWide = previewFilehold.naturalWidth / previewFilehold.naturalHeight;\n          let AspectRatioPrevHeightandWidthxWideCRop = previewFilehold.naturalWidth / previewFilehold.naturalHeight;\n          let boxWIDEheight = cropCanvasWidth * zoomINBOXWide / AspectRatioPrevHeightandWidthxWideCRop;\n          var centerpreview = canvasRef.current.width / 2 - cropCanvasWidth * zoomINBOXWide / 2;\n          var RatiofromOriginalandfixedHeight = previewFilehold.naturalHeight / cropCanvasWidth * zoomINBOXWide;\n          var SourceWidthForCropXx = previewFilehold.naturalWidth / RatiofromOriginalandfixedHeight;\n          var dragDistanceX = cropCanvasWidth * zoomINBOXWide * zoom - cropCanvasWidth;\n          let AspectRatioPrevHeightandWidthxWideCRopx = previewFilehold.naturalWidth / previewFilehold.naturalHeight;\n          let boxWIDEheightx = cropCanvasWidth * zoomINBOXWide * zoom / AspectRatioPrevHeightandWidthxWideCRopx;\n          var dragDistanceY = boxWIDEheightx - cropCanvasHeight;\n          var cropXprev = crop.x;\n          cropXprev = cropXprev * cropCanvasWidth * zoomINBOXWide / SourceWidthForCropX;\n\n          if (cropXprev < -dragDistanceX) {\n            cropXprev = -dragDistanceX;\n          } else if (cropXprev > 0) {\n            cropXprev = 0;\n          } else {}\n\n          var cropYprev = crop.y;\n          cropYprev = cropYprev * cropCanvasWidth * zoomINBOXWide / SourceWidthForCropX;\n\n          if (cropYprev < -dragDistanceY) {\n            cropYprev = -dragDistanceY;\n          } else if (cropYprev > 0) {\n            cropYprev = 0;\n          } else {} ////////////////////\n\n\n          requestAnimationFrame(async () => {\n            ctx.drawImage(previewFilehold, WideImageCheck ? cropXprev : 0, WideImageCheck ? cropYprev : 0, cropCanvasWidth * zoomINBOXWide * zoom, boxWIDEheight * zoom);\n\n            try {\n              convertCroppedCanvasToImage(saveto);\n            } catch {\n              console.log(\"previewcanvascropall cropper  error\");\n            }\n          }); ////////////////////\n        } else {\n          let AspectRatioPrevHeightandWidthxBox = previewFilehold.naturalWidth / previewFilehold.naturalHeight;\n          let boxedHeight = cropCanvasWidth / AspectRatioPrevHeightandWidthxBox;\n          let AspectRatioPrevHeightandWidthxBoxx = previewFilehold.naturalWidth / previewFilehold.naturalHeight;\n          let boxedHeightx = cropCanvasWidth * zoom / AspectRatioPrevHeightandWidthxBoxx;\n          var dragDistanceX = cropCanvasWidth * zoom - cropCanvasWidth;\n          var dragDistanceY = boxedHeightx - cropCanvasHeight;\n          var cropYprev = crop.y;\n          cropYprev = cropYprev * boxedHeight / SourceWidthForCropY;\n\n          if (cropYprev < -dragDistanceY) {\n            cropYprev = -dragDistanceY;\n          } else if (cropYprev > 0) {\n            cropYprev = 0;\n          } else {}\n\n          var cropXprev = crop.x;\n          cropXprev = cropXprev * boxedHeight / SourceWidthForCropY;\n\n          if (cropXprev < -dragDistanceX) {\n            cropXprev = -dragDistanceX;\n          } else if (cropXprev > 0) {\n            cropXprev = 0;\n          } else {} ////////////////////\n\n\n          requestAnimationFrame(async () => {\n            ctx.drawImage(previewFilehold, WideImageCheck ? 0 : cropXprev, WideImageCheck ? 0 : cropYprev, cropCanvasWidth * zoom, boxedHeight * zoom);\n\n            try {\n              convertCroppedCanvasToImage(saveto);\n            } catch {\n              console.log(\"previewcanvascropall cropper  error\");\n            }\n          }); ////////////////////\n        }\n\n        canvasRef.current.style.width = `${getpreviewFixedWidth}px`;\n        canvasRef.current.style.height = `${newheightq}px`;\n      } else {\n        var xtraZoom = cropCanvasWidth / imageWidthWithAspectRatio;\n        var centerpreview = canvasRef.current.width / 2 - imageWidthWithAspectRatio / 2;\n        var centerpreview2 = canvasRef.current.height / 3 - cropCanvasHeight * xtraZoom / 3;\n\n        if (imageWidthWithAspectRatio < cropCanvasWidth) {\n          if (cropCanvasWidth > cropCanvasHeight) {\n            ////WIDE IMAGE SOURCE NOT PROPERLY FITTED\n            ////////////////////\n            requestAnimationFrame(async () => {\n              ctx.drawImage(previewFilehold, 0, centerpreview2, imageWidthWithAspectRatio * xtraZoom, cropCanvasHeight * xtraZoom);\n\n              try {\n                convertCroppedCanvasToImage(saveto);\n              } catch {\n                console.log(\"previewcanvascropall cropper  error\");\n              }\n            }); ////////////////////\n          } else {\n            ////LONG IMAGE SOURCE NOT PROPERLY FITTED\n            ////////////////////\n            requestAnimationFrame(async () => {\n              ctx.drawImage(previewFilehold, 0, 0, imageWidthWithAspectRatio * xtraZoom, cropCanvasHeight * xtraZoom);\n\n              try {\n                convertCroppedCanvasToImage(saveto);\n              } catch {\n                console.log(\"previewcanvascropall cropper  error\");\n              }\n            }); ////////////////////\n          }\n        } else {\n          ////////LONG IMAGE SOURCE WIDE IMAGE SOURCE\n          requestAnimationFrame(async () => {\n            ctx.drawImage(previewFilehold, centerpreview, 0, imageWidthWithAspectRatio, cropCanvasHeight);\n\n            try {\n              convertCroppedCanvasToImage(saveto);\n            } catch {\n              console.log(\"previewcanvascropall cropper  error\");\n            }\n          }); ////////////////////\n        }\n\n        canvasRef.current.style.width = `${getpreviewFixedWidth}px`;\n        canvasRef.current.style.height = `${previewCSSHeight}px`;\n      }\n    }\n  }, [previewFilehold, canvasRef, CropImageHolder, cropCanvasWidth, cropCanvasHeight, imageWidthWithAspectRatio, WideImageCheck, zoom, quality]);\n  const [callLayoutoNCE, setcallLayoutoNCE] = useState(true);\n  useLayoutEffect(() => {\n    if (canvasToimage && callLayoutoNCE && canvasRef.current) {\n      drawcrop(0);\n    }\n  }, [canvasToimage, callLayoutoNCE, canvasRef]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        xs: 12,\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          ref: addUploadItemsRef,\n          style: {\n            width: \"100%\",\n            height: \"auto\",\n            position: \"relative\",\n            margin: \"auto\",\n            display: callLayoutoNCE ? \"none\" : \"block\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 7\n    }, this), allowCropAllCanvas ? /*#__PURE__*/_jsxDEV(\"canvas\", {\n      className: darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\",\n      ref: canvasRef,\n      style: {\n        display: callLayoutoNCE ? \"block\" : \"none\",\n        padding: \"0px\",\n        marginTop: index === 0 || index === 1 || index === 2 ? \"0px\" : \"-5px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true);\n}\n\n_s(PreviewCanvasCropAllx, \"Vs5iYtqN7nEGP/WVA1psNBHXIh4=\", false, function () {\n  return [useSelector];\n});\n\n_c = PreviewCanvasCropAllx;\nexport const PreviewCanvasCropAll = /*#__PURE__*/React.memo(PreviewCanvasCropAllx);\n_c2 = PreviewCanvasCropAll;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PreviewCanvasCropAllx\");\n$RefreshReg$(_c2, \"PreviewCanvasCropAll\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/upload/PreviewCanvasCropAll.tsx"],"names":["React","useRef","useState","useLayoutEffect","useCallback","Grid","useSelector","PreviewCanvasCropAllx","setwaitONLOAD","cropCanvasRef","image","getpreviewFixedWidth","index","CropImageHolder","cropheight","cropwidth","BoxCropActivated","hdcanvasvalue","SourceWidthForCropX","SourceWidthForCropY","WideImageCheck","crop","getCropHeight","canvasToimage","refWithimageData","addUploadItemsRef","itemUploadRef","itemUploadRefThumb","itemUploadRefSD","setsuperCropLoadFade","length","filterImage","setfilterImage","setallowFilters","allowCropAllCanvas","cutOffLoader","setcutOffLoader","zoom","darkmode","state","GlobalReducer","darkmodeReducer","canvasRef","previewFilehold","setpreviewFilehold","quality","setquality","previewCSSHeight","setpreviewCSSHeight","cropCanvasWidth","setcropCanvasWidth","cropCanvasHeight","setcropCanvasHeight","Timer1","Timer2","imageWidthWithAspectRatio","setimageWidthWithAspectRatio","imageWidthWithAspectRatioxx","setimageWidthWithAspectRatioxx","previewFileReadimage","Image","src","onload","current","cropH","cropW","width","height","naturalWidth","naturalHeight","Ratio1500","height1500","width1500","CropAspectRatio","newheight","AspectRatioPrevHeightandWidth","newWidth","AspectRatioPrevHeightandWidthx","newWidthx","convertCroppedCanvasToImage","savetox","toDataURL","setcallLayoutoNCE","newArraa","drawcrop","saveto","ctx","getContext","newheightq","zoomINBOXWide","AspectRatioPrevHeightandWidthxWideCRop","boxWIDEheight","centerpreview","RatiofromOriginalandfixedHeight","SourceWidthForCropXx","dragDistanceX","AspectRatioPrevHeightandWidthxWideCRopx","boxWIDEheightx","dragDistanceY","cropXprev","x","cropYprev","y","requestAnimationFrame","drawImage","console","log","AspectRatioPrevHeightandWidthxBox","boxedHeight","AspectRatioPrevHeightandWidthxBoxx","boxedHeightx","style","xtraZoom","centerpreview2","callLayoutoNCE","position","margin","display","padding","marginTop","PreviewCanvasCropAll","memo"],"mappings":"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","sourcesContent":["import React, {\r\n  useRef,\r\n  useState,\r\n  useEffect,\r\n  useLayoutEffect,\r\n  useCallback,\r\n} from \"react\";\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport Cropper from \"react-easy-crop\";\r\nimport MusicNoteIcon from \"@mui/icons-material/MusicNote\";\r\nimport PhotoIcon from \"@mui/icons-material/Photo\";\r\nimport GifIcon from \"@mui/icons-material/Gif\";\r\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\r\nimport Slider from \"@mui/material/Slider\";\r\nimport { AnySoaRecord } from \"dns\";\r\n\r\nfunction PreviewCanvasCropAllx({\r\n  setwaitONLOAD,\r\n  cropCanvasRef,\r\n  image,\r\n  getpreviewFixedWidth,\r\n  index,\r\n  CropImageHolder,\r\n  cropheight,\r\n  cropwidth,\r\n  BoxCropActivated,\r\n  hdcanvasvalue,\r\n  SourceWidthForCropX,\r\n  SourceWidthForCropY,\r\n  WideImageCheck,\r\n  crop,\r\n  getCropHeight,\r\n  canvasToimage,\r\n  refWithimageData,\r\n  addUploadItemsRef,\r\n  itemUploadRef,\r\n  itemUploadRefThumb,\r\n  itemUploadRefSD,\r\n  setsuperCropLoadFade,\r\n  length,\r\n  filterImage,\r\n  setfilterImage,\r\n  setallowFilters,\r\n  allowCropAllCanvas,\r\n  cutOffLoader,\r\n  setcutOffLoader,\r\n  zoom,\r\n}: any): JSX.Element {\r\n  ///\r\n  ///\r\n  ///DARKMODE FROM REDUX\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n\r\n  const darkmodeReducer = darkmode;\r\n\r\n  const canvasRef: any = useRef(null);\r\n\r\n  const [previewFilehold, setpreviewFilehold] = useState<any>(null);\r\n\r\n  const [quality, setquality] = useState<any>(0);\r\n\r\n  const [previewCSSHeight, setpreviewCSSHeight] = useState<any>(null);\r\n\r\n  const [cropCanvasWidth, setcropCanvasWidth] = useState<any>(null);\r\n\r\n  const [cropCanvasHeight, setcropCanvasHeight] = useState<any>(null);\r\n\r\n  const Timer1 = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n\r\n  const Timer2 = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n\r\n  const [imageWidthWithAspectRatio, setimageWidthWithAspectRatio] =\r\n    useState<any>(null);\r\n\r\n  const [imageWidthWithAspectRatioxx, setimageWidthWithAspectRatioxx] =\r\n    useState<any>(null);\r\n\r\n  useLayoutEffect(() => {\r\n    const previewFileReadimage = new Image();\r\n    previewFileReadimage.src = image;\r\n    previewFileReadimage.onload = function () {\r\n      if (cropCanvasRef.current) {\r\n        setpreviewFilehold(previewFileReadimage);\r\n        var cropH, cropW;\r\n        if (CropImageHolder) {\r\n          cropW = cropCanvasRef.current.width;\r\n          cropH = cropCanvasRef.current.height;\r\n        } else {\r\n          cropW = previewFileReadimage.naturalWidth;\r\n          cropH = previewFileReadimage.naturalHeight;\r\n        }\r\n\r\n        if (cropW > cropH) {\r\n          var Ratio1500 = cropW / quality;\r\n          var height1500 = cropH / Ratio1500;\r\n\r\n          setcropCanvasWidth(quality);\r\n          setcropCanvasHeight(height1500);\r\n        } else {\r\n          var Ratio1500 = cropH / quality;\r\n          var width1500 = cropW / Ratio1500;\r\n\r\n          setcropCanvasWidth(width1500);\r\n          setcropCanvasHeight(quality);\r\n        }\r\n\r\n        let CropAspectRatio = cropwidth / cropheight;\r\n        let newheight = getpreviewFixedWidth / CropAspectRatio;\r\n        setpreviewCSSHeight(newheight);\r\n\r\n        let AspectRatioPrevHeightandWidth =\r\n          previewFileReadimage.naturalHeight /\r\n          previewFileReadimage.naturalWidth;\r\n        let newWidth = cropCanvasHeight / AspectRatioPrevHeightandWidth;\r\n        setimageWidthWithAspectRatio(newWidth);\r\n\r\n        let AspectRatioPrevHeightandWidthx = cropCanvasWidth / cropCanvasHeight;\r\n        let newWidthx = getpreviewFixedWidth / AspectRatioPrevHeightandWidthx;\r\n        setimageWidthWithAspectRatioxx(newWidthx);\r\n      }\r\n    };\r\n  }, [\r\n    quality,\r\n    image,\r\n    BoxCropActivated,\r\n    previewCSSHeight,\r\n    getpreviewFixedWidth,\r\n    cropCanvasRef,\r\n    CropImageHolder,\r\n    cropwidth,\r\n    cropheight,\r\n    crop,\r\n  ]);\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  ///  CROPED CANVAS CONVER TO IMAGE\r\n  const convertCroppedCanvasToImage = useCallback(\r\n    (savetox: number) => {\r\n      if (savetox === 0) {\r\n        itemUploadRef.current[index].src = canvasRef.current.toDataURL();\r\n        setcallLayoutoNCE(false);\r\n        ///////////////////////////////\r\n        const newArraa = [...filterImage];\r\n        newArraa[index] = canvasRef.current.toDataURL();\r\n        setfilterImage(newArraa);\r\n        ///////////////////////////////\r\n        setquality(500);\r\n        drawcrop(1);\r\n      } else if (savetox === 1) {\r\n        itemUploadRefThumb.current[index].src = canvasRef.current.toDataURL();\r\n\r\n        if (length - 1 === index) {\r\n          setwaitONLOAD(false);\r\n          setsuperCropLoadFade(false);\r\n          setallowFilters(true);\r\n        }\r\n      } else {\r\n      }\r\n    },\r\n    [\r\n      canvasToimage,\r\n      itemUploadRef,\r\n      itemUploadRefThumb,\r\n      itemUploadRefSD,\r\n      canvasRef,\r\n    ]\r\n  );\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  ///  DRAW CANVAS ON CROP COMPLETE CLICK\r\n  const drawcrop = useCallback(\r\n    (saveto: number) => {\r\n      if (previewFilehold && canvasRef.current) {\r\n        const ctx = canvasRef.current.getContext(\"2d\");\r\n\r\n        canvasRef.current.height = cropCanvasHeight;\r\n        canvasRef.current.width = cropCanvasWidth;\r\n\r\n        if (BoxCropActivated) {\r\n          var CropAspectRatio = cropCanvasWidth / cropCanvasHeight;\r\n          var newheightq = getpreviewFixedWidth / CropAspectRatio;\r\n\r\n          if (previewFilehold.naturalWidth > previewFilehold.naturalHeight) {\r\n            var zoomINBOXWide =\r\n              previewFilehold.naturalWidth / previewFilehold.naturalHeight;\r\n\r\n            let AspectRatioPrevHeightandWidthxWideCRop =\r\n              previewFilehold.naturalWidth / previewFilehold.naturalHeight;\r\n            let boxWIDEheight =\r\n              (cropCanvasWidth * zoomINBOXWide) /\r\n              AspectRatioPrevHeightandWidthxWideCRop;\r\n\r\n            var centerpreview =\r\n              canvasRef.current.width / 2 -\r\n              (cropCanvasWidth * zoomINBOXWide) / 2;\r\n\r\n            var RatiofromOriginalandfixedHeight =\r\n              (previewFilehold.naturalHeight / cropCanvasWidth) * zoomINBOXWide;\r\n            var SourceWidthForCropXx =\r\n              previewFilehold.naturalWidth / RatiofromOriginalandfixedHeight;\r\n\r\n            var dragDistanceX =\r\n              cropCanvasWidth * zoomINBOXWide * zoom - cropCanvasWidth;\r\n\r\n            let AspectRatioPrevHeightandWidthxWideCRopx =\r\n              previewFilehold.naturalWidth / previewFilehold.naturalHeight;\r\n            let boxWIDEheightx =\r\n              (cropCanvasWidth * zoomINBOXWide * zoom) /\r\n              AspectRatioPrevHeightandWidthxWideCRopx;\r\n\r\n            var dragDistanceY = boxWIDEheightx - cropCanvasHeight;\r\n\r\n            var cropXprev = crop.x;\r\n            cropXprev =\r\n              (cropXprev * cropCanvasWidth * zoomINBOXWide) /\r\n              SourceWidthForCropX;\r\n\r\n            if (cropXprev < -dragDistanceX) {\r\n              cropXprev = -dragDistanceX;\r\n            } else if (cropXprev > 0) {\r\n              cropXprev = 0;\r\n            } else {\r\n            }\r\n\r\n            var cropYprev = crop.y;\r\n\r\n            cropYprev =\r\n              (cropYprev * cropCanvasWidth * zoomINBOXWide) /\r\n              SourceWidthForCropX;\r\n\r\n            if (cropYprev < -dragDistanceY) {\r\n              cropYprev = -dragDistanceY;\r\n            } else if (cropYprev > 0) {\r\n              cropYprev = 0;\r\n            } else {\r\n            }\r\n            ////////////////////\r\n\r\n            requestAnimationFrame(async () => {\r\n              ctx.drawImage(\r\n                previewFilehold,\r\n                WideImageCheck ? cropXprev : 0,\r\n                WideImageCheck ? cropYprev : 0,\r\n                cropCanvasWidth * zoomINBOXWide * zoom,\r\n                boxWIDEheight * zoom\r\n              );\r\n              try {\r\n                convertCroppedCanvasToImage(saveto);\r\n              } catch {\r\n                console.log(\"previewcanvascropall cropper  error\");\r\n              }\r\n            });\r\n\r\n            ////////////////////\r\n          } else {\r\n            let AspectRatioPrevHeightandWidthxBox =\r\n              previewFilehold.naturalWidth / previewFilehold.naturalHeight;\r\n            let boxedHeight =\r\n              cropCanvasWidth / AspectRatioPrevHeightandWidthxBox;\r\n\r\n            let AspectRatioPrevHeightandWidthxBoxx =\r\n              previewFilehold.naturalWidth / previewFilehold.naturalHeight;\r\n            let boxedHeightx =\r\n              (cropCanvasWidth * zoom) / AspectRatioPrevHeightandWidthxBoxx;\r\n\r\n            var dragDistanceX = cropCanvasWidth * zoom - cropCanvasWidth;\r\n            var dragDistanceY = boxedHeightx - cropCanvasHeight;\r\n\r\n            var cropYprev = crop.y;\r\n\r\n            cropYprev = (cropYprev * boxedHeight) / SourceWidthForCropY;\r\n\r\n            if (cropYprev < -dragDistanceY) {\r\n              cropYprev = -dragDistanceY;\r\n            } else if (cropYprev > 0) {\r\n              cropYprev = 0;\r\n            } else {\r\n            }\r\n\r\n            var cropXprev = crop.x;\r\n            cropXprev = (cropXprev * boxedHeight) / SourceWidthForCropY;\r\n            if (cropXprev < -dragDistanceX) {\r\n              cropXprev = -dragDistanceX;\r\n            } else if (cropXprev > 0) {\r\n              cropXprev = 0;\r\n            } else {\r\n            }\r\n\r\n            ////////////////////\r\n\r\n            requestAnimationFrame(async () => {\r\n              ctx.drawImage(\r\n                previewFilehold,\r\n                WideImageCheck ? 0 : cropXprev,\r\n                WideImageCheck ? 0 : cropYprev,\r\n                cropCanvasWidth * zoom,\r\n                boxedHeight * zoom\r\n              );\r\n              try {\r\n                convertCroppedCanvasToImage(saveto);\r\n              } catch {\r\n                console.log(\"previewcanvascropall cropper  error\");\r\n              }\r\n            });\r\n\r\n            ////////////////////\r\n          }\r\n\r\n          canvasRef.current.style.width = `${getpreviewFixedWidth}px`;\r\n          canvasRef.current.style.height = `${newheightq}px`;\r\n        } else {\r\n          var xtraZoom = cropCanvasWidth / imageWidthWithAspectRatio;\r\n\r\n          var centerpreview =\r\n            canvasRef.current.width / 2 - imageWidthWithAspectRatio / 2;\r\n\r\n          var centerpreview2 =\r\n            canvasRef.current.height / 3 - (cropCanvasHeight * xtraZoom) / 3;\r\n\r\n          if (imageWidthWithAspectRatio < cropCanvasWidth) {\r\n            if (cropCanvasWidth > cropCanvasHeight) {\r\n              ////WIDE IMAGE SOURCE NOT PROPERLY FITTED\r\n\r\n              ////////////////////\r\n\r\n              requestAnimationFrame(async () => {\r\n                ctx.drawImage(\r\n                  previewFilehold,\r\n                  0,\r\n                  centerpreview2,\r\n                  imageWidthWithAspectRatio * xtraZoom,\r\n                  cropCanvasHeight * xtraZoom\r\n                );\r\n                try {\r\n                  convertCroppedCanvasToImage(saveto);\r\n                } catch {\r\n                  console.log(\"previewcanvascropall cropper  error\");\r\n                }\r\n              });\r\n\r\n              ////////////////////\r\n            } else {\r\n              ////LONG IMAGE SOURCE NOT PROPERLY FITTED\r\n\r\n              ////////////////////\r\n\r\n              requestAnimationFrame(async () => {\r\n                ctx.drawImage(\r\n                  previewFilehold,\r\n                  0,\r\n                  0,\r\n                  imageWidthWithAspectRatio * xtraZoom,\r\n                  cropCanvasHeight * xtraZoom\r\n                );\r\n                try {\r\n                  convertCroppedCanvasToImage(saveto);\r\n                } catch {\r\n                  console.log(\"previewcanvascropall cropper  error\");\r\n                }\r\n              });\r\n\r\n              ////////////////////\r\n            }\r\n          } else {\r\n            ////////LONG IMAGE SOURCE WIDE IMAGE SOURCE\r\n\r\n            requestAnimationFrame(async () => {\r\n              ctx.drawImage(\r\n                previewFilehold,\r\n                centerpreview,\r\n                0,\r\n                imageWidthWithAspectRatio,\r\n                cropCanvasHeight\r\n              );\r\n              try {\r\n                convertCroppedCanvasToImage(saveto);\r\n              } catch {\r\n                console.log(\"previewcanvascropall cropper  error\");\r\n              }\r\n            });\r\n\r\n            ////////////////////\r\n          }\r\n          canvasRef.current.style.width = `${getpreviewFixedWidth}px`;\r\n          canvasRef.current.style.height = `${previewCSSHeight}px`;\r\n        }\r\n      }\r\n    },\r\n    [\r\n      previewFilehold,\r\n      canvasRef,\r\n      CropImageHolder,\r\n      cropCanvasWidth,\r\n      cropCanvasHeight,\r\n      imageWidthWithAspectRatio,\r\n      WideImageCheck,\r\n      zoom,\r\n      quality,\r\n    ]\r\n  );\r\n\r\n  const [callLayoutoNCE, setcallLayoutoNCE] = useState<any>(true);\r\n\r\n  useLayoutEffect(() => {\r\n    if (canvasToimage && callLayoutoNCE && canvasRef.current) {\r\n      drawcrop(0);\r\n    }\r\n  }, [canvasToimage, callLayoutoNCE, canvasRef]);\r\n\r\n  return (\r\n    <>\r\n      <Grid container>\r\n        <Grid xs={12} item>\r\n          <img\r\n            ref={addUploadItemsRef}\r\n            style={{\r\n              width: \"100%\",\r\n              height: \"auto\",\r\n              position: \"relative\",\r\n              margin: \"auto\",\r\n              display: callLayoutoNCE ? \"none\" : \"block\",\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {allowCropAllCanvas ? (\r\n        <canvas\r\n          className={\r\n            darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\"\r\n          }\r\n          ref={canvasRef}\r\n          style={{\r\n            display: callLayoutoNCE ? \"block\" : \"none\",\r\n\r\n            padding: \"0px\",\r\n            marginTop:\r\n              index === 0 || index === 1 || index === 2 ? \"0px\" : \"-5px\",\r\n          }}\r\n        />\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport const PreviewCanvasCropAll = React.memo(PreviewCanvasCropAllx);\r\n"]},"metadata":{},"sourceType":"module"}