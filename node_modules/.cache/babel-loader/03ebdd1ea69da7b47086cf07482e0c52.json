{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oghen\\\\OneDrive\\\\Documents\\\\ClikBate\\\\super\\\\src\\\\profile\\\\TaskbarCrop.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useCallback, useState } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Masonry from \"@mui/lab/Masonry\";\nimport DoneOutlineIcon from '@mui/icons-material/DoneOutline';\nimport CloseIcon from '@mui/icons-material/Close';\nimport AspectRatioIcon from '@mui/icons-material/AspectRatio';\nimport CircleIcon from \"@mui/icons-material/Circle\";\nimport { UpdateNavFilterReducer } from \"../GlobalActions\";\nimport Cropper from \"react-easy-crop\";\nimport TouchAppIcon from '@material-ui/icons/TouchApp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction TaskbarCropx({\n  showModalUploadTask,\n  uploadClose,\n  setfinalimage,\n  finalImage,\n  setHidecropper,\n  hideCrop,\n  sethideCrop,\n  ratiox,\n  setratiox,\n  itemUploadRefThumb,\n  itemUploadRefSD,\n  itemUploadRef\n}) {\n  _s();\n\n  const dispatch = useDispatch();\n  const canRef = useRef(null); ///\n  ///\n  ///\n  /// INTERFACE/TYPES FOR SCREENHEIGHT AND DARKMODE\n\n  ///\n  ///\n  ///\n  /// GET DARKMODE FROM REDUX STORE\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const {\n    activatefilterImage,\n    activatecropImage,\n    selectedImage,\n    cropimage\n  } = useSelector(state => ({ ...state.GlobalNavuploadReducer\n  }));\n  const activatefilterImageReducer = activatefilterImage;\n  const activatecropImageReducer = activatecropImage;\n  const selectedImageReducer = selectedImage;\n  const cropimageReducer = cropimage;\n  const cropCanvasRef = useRef(null);\n  const cropCanvasRefx = useRef(null);\n  const navRef = useRef(null);\n  const IconRef = useRef(null);\n  const IconRef2 = useRef(null);\n  const [allowCropAllCanvas, setallowCropAllCanvas] = useState(true);\n  const [CropImageHolder, setCropImageHolder] = useState(null);\n  const [FinalCropImageHolder, setFinalCropImageHolder] = useState(null);\n  const [imageHeight, setimageHeight] = useState(0);\n  const [imageWidth, setimageWidth] = useState(0);\n  const [Box, setBox] = useState(false);\n  const [final, setFinal] = useState(false);\n  const [cropInitial, setcropInitial] = useState({\n    x: 0,\n    y: 0\n  });\n  const [cropInitialx, setcropInitialx] = useState({\n    x: 0,\n    y: 0\n  });\n  const [cropOffset, setcropOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [Drag, setDrag] = useState(false);\n  const [cropx, setcropx] = useState({\n    x: 0,\n    y: 0\n  });\n  const allowscrolltimer = useRef(null);\n  var extendxy = 3.3;\n  const [allowOverflow, setallowOverflow] = useState(false);\n  const [optionscropshow, setoptionscropshow] = useState(true);\n  const [optionscropshow2, setoptionscropshow2] = useState(true);\n  const [SaveCropData, setSaveCropData] = useState(false);\n  const [hide, sethide] = useState(true);\n  const [CropImage, setcropImage] = useState(null);\n  const [multiPost, setmultiPost] = useState(false);\n  const [showIcon] = useState(false);\n  const [prevImage, setprevimage] = useState([]);\n  const menuTimer5 = useRef(null);\n  const [NewCanH, setNewCanH] = useState(0);\n  const [NewCanW, setNewCanW] = useState(0);\n  const [crop, setCrop] = useState({\n    x: 0,\n    y: 0\n  });\n  const [crop2, setCrop2] = useState({\n    x: 0,\n    y: 0\n  });\n  const [crop3, setCrop3] = useState({\n    x: 0,\n    y: 0\n  });\n  const [zoom, setZoom] = useState(1);\n  const [count, setcount] = useState(0);\n  const [Tipper, setTipper] = useState(0); ///\n  ///\n  /// GET COLOR FROM REDUX STORE\n\n  const {\n    color,\n    colordark,\n    colortype\n  } = useSelector(state => ({ ...state.GlobalReducerColor\n  }));\n  const colorReducer = color;\n  const colorReducerdark = colordark;\n  const colortypeReducer = colortype;\n  useEffect(() => {\n    if (Tipper === 3) {\n      setHidecropper(true);\n      dispatch(UpdateNavFilterReducer(true));\n    }\n  }, [Tipper]);\n  useEffect(() => {\n    setprevimage(selectedImageReducer);\n    setcropImage(selectedImageReducer[0]);\n    sethideCrop(false);\n    setRay([]);\n    setcount(0);\n    setfinalimage([]);\n    sethide(true);\n    setTimeout(() => {\n      sethide(false);\n    }, 1000);\n  }, [selectedImageReducer, showModalUploadTask]);\n  const [croppedImage, setCroppedImage] = useState(null);\n  const cropperRef = useRef(null);\n  const [ray, setRay] = useState([]);\n  const Repli = useCallback(croppedAreaPixels => {\n    const canvas = document.createElement('canvas');\n    const imageRef = document.createElement('img');\n    imageRef.src = CropImage;\n    const scaleX = imageRef.naturalWidth / imageRef.width;\n    const scaleY = imageRef.naturalHeight / imageRef.height; // Set the desired lower resolution\n\n    const lowerResolutionWidth = 200; // Set your desired width\n\n    const lowerResolutionHeight = 200; // Set your desired height\n    // Calculate the scale factor based on the longer side of the cropped area\n\n    const longerSide = Math.max(croppedAreaPixels.width, croppedAreaPixels.height);\n    const scale = longerSide / Math.max(lowerResolutionWidth, lowerResolutionHeight); // Calculate the adjusted dimensions\n\n    const adjustedWidth = croppedAreaPixels.width / scale;\n    const adjustedHeight = croppedAreaPixels.height / scale;\n    canvas.width = adjustedWidth;\n    canvas.height = adjustedHeight;\n    const ctx = canvas.getContext('2d');\n\n    if (ctx) {\n      imageRef.onload = () => {\n        requestAnimationFrame(async () => {\n          try {\n            ctx.drawImage(imageRef, croppedAreaPixels.x * scaleX, croppedAreaPixels.y * scaleY, croppedAreaPixels.width * scaleX, croppedAreaPixels.height * scaleY, 0, 0, adjustedWidth, adjustedHeight);\n\n            if (count > 0 && SaveCropData) {\n              const dataUrl = canvas.toDataURL('image/png');\n              const g = count - 1;\n\n              if (ray[g]) {// alert('kj')\n              } else {\n                const updatedRay = [...ray];\n                updatedRay[g] = dataUrl;\n\n                if (x === 0) {} else if (x === 0) {}\n\n                itemUploadRefThumb.current[g].src = dataUrl;\n                itemUploadRefSD.current[g].src = dataUrl;\n                itemUploadRef.current[g].src = dataUrl;\n\n                if (selectedImageReducer.length === count) {\n                  ///setfinalimage(updatedRay);\n                  setTipper(Tipper + 1); ///console.log(itemUploadRefThumb.current);\n                } else if (count === 1) {\n                  setRay(updatedRay);\n                  setTimeout(() => {\n                    setcount(2);\n                    setcropImage(selectedImageReducer[1]);\n                  }, 100);\n                } else {\n                  setRay(updatedRay);\n                  setTimeout(() => {\n                    setcount(3);\n                    setcropImage(selectedImageReducer[2]);\n                  }, 100);\n                }\n              }\n            }\n          } catch (error) {\n            // alert(error)\n            console.error('Error while cropping the image:', error);\n          }\n        });\n      };\n    }\n  }, [CropImage, count, SaveCropData, ray, itemUploadRefThumb]);\n  const onCropComplete = useCallback((_, croppedAreaPixels) => {\n    Repli(croppedAreaPixels);\n  }, [CropImage, count, SaveCropData, ray, itemUploadRefThumb]);\n  const [ratio, setratio] = useState(2);\n  const [ShowNumber, setShowNumber] = useState(false);\n  const add = useCallback(() => {\n    setratiox(ratiox + 1);\n    setShowNumber(true);\n\n    if (allowscrolltimer.current) {\n      clearTimeout(allowscrolltimer.current);\n    }\n\n    allowscrolltimer.current = setTimeout(() => {\n      setShowNumber(false);\n    }, 1000);\n    setratio(ratio + 0.5);\n\n    if (ratio >= 4) {\n      setratio(2);\n      setratiox(1);\n    }\n  }, [ratio, ratiox]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      className: \"dontallowhighlighting\",\n      container: true,\n      style: {\n        padding: \"0px\",\n        width: '100%',\n        height: \"100%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        className: \"zuperxyinfo\",\n        item: true,\n        xs: 12,\n        style: {\n          height: '0px',\n          fontFamily: ' Arial, Helvetica, sans- serif',\n          fontWeight: 'bold',\n          opacity: 0.96,\n          display: SaveCropData ? 'block' : 'none',\n          padding: \"0px\",\n          position: 'fixed',\n          top: '42vh',\n          zIndex: 200000000,\n          left: '47.5%'\n        },\n        children: /*#__PURE__*/_jsxDEV(CircleIcon, {\n          className: SaveCropData ? \"dontallowhighlighting  blinken zuperkingIcon\" : ' ',\n          style: {\n            fontSize: '5vw',\n            color: colorReducer,\n            position: 'absolute'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        className: \"zuperxyinfo\",\n        item: true,\n        xs: 12,\n        style: {\n          height: '0px',\n          display: ShowNumber ? 'block' : 'none',\n          fontFamily: ' Arial, Helvetica, sans- serif',\n          fontWeight: 'bold',\n          opacity: 0.65,\n          padding: \"0px\",\n          position: 'fixed',\n          top: '40vh',\n          fontSize: '15vh',\n          zIndex: 20000000,\n          left: '47.5%'\n        },\n        children: ratiox\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        ref: navRef,\n        item: true,\n        xs: 12,\n        style: {\n          padding: \"0px\",\n          width: '94%',\n          height: multiPost ? \"80%\" : '100%',\n          position: 'fixed',\n          top: '-20000000000px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 17\n      }, this), croppedImage && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: croppedImage,\n        alt: \"Cropped Image\",\n        style: {\n          position: 'fixed',\n          top: '20vh',\n          zIndex: 30000000,\n          width: '20%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        style: {\n          padding: \"0px\",\n          filter: hideCrop ? SaveCropData ? 'brightness(0.8) blur(8px)' : 'brightness(1) blur(0px)' : 'brightness(0.8) blur(8px)'\n        },\n        children: [/*#__PURE__*/_jsxDEV(TouchAppIcon, {\n          className: darkmodeReducer ? \" dontallowhighlighting zuperkingIcon \" : \" dontallowhighlighting zuperkingIcon  \",\n          style: {\n            fontSize: \"5vw\",\n            position: \"fixed\",\n            opacity: optionscropshow2 ? 0.73 : 0,\n            borderRadius: '70%',\n            color: colorReducer,\n            top: '2vh',\n            left: '2vw',\n            zIndex: 2000,\n            display: hideCrop ? 'block' : 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 21\n        }, this), prevImage.length > 1 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Masonry, {\n            columns: 2,\n            spacing: 0,\n            style: {\n              padding: \"0px\",\n              overflow: 'hidden'\n            },\n            children: prevImage.map((picture, index) => /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                onClick: () => {\n                  ///setcount(index + 1);\n                  navRef.current.scrollIntoView({\n                    behavior: \"smooth\",\n                    block: \"start\"\n                  });\n                  setcropImage(picture);\n                  sethideCrop(false);\n                },\n                style: {\n                  cursor: 'pointer'\n                },\n                src: picture,\n                alt: `Image ${index}`\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 480,\n                columnNumber: 33\n              }, this)\n            }, void 0, false))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 47\n          }, this)\n        }, void 0, false) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"\",\n        children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canRef,\n          style: {\n            padding: \"0px\",\n            display: \"none\",\n            position: \"fixed\",\n            top: \"-400%\",\n            zIndex: 0,\n            visibility: \"hidden\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: hideCrop ? 'none' : 'block',\n            visibility: SaveCropData ? 'hidden' : 'visible'\n          },\n          children: /*#__PURE__*/_jsxDEV(Cropper, {\n            ref: cropperRef,\n            image: CropImage,\n            crop: crop,\n            zoom: zoom,\n            aspect: ratio / 2.8,\n            onCropChange: setCrop,\n            onCropComplete: onCropComplete,\n            onZoomChange: setZoom\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 523,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 17\n      }, this), selectedImageReducer.length > 1 ? /*#__PURE__*/_jsxDEV(CloseIcon, {\n        onClick: () => {\n          sethideCrop(true);\n        },\n        className: darkmodeReducer ? \"make-small-icons-clickable-darkab dontallowhighlighting zuperkingIcon \" : \"make-small-icons-clickable-lightab  dontallowhighlighting zuperkingIcon  \",\n        style: {\n          color: \"#ffffff\",\n          fontSize: \"3.8vw\",\n          position: \"absolute\",\n          opacity: optionscropshow2 ? 0.94 : 0,\n          borderRadius: '70%',\n          top: '3.8vh',\n          left: '2%',\n          right: \"\",\n          display: optionscropshow ? hideCrop ? 'none' : SaveCropData ? 'none' : hide ? 'none' : 'block' : 'none'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 52\n      }, this) : null, /*#__PURE__*/_jsxDEV(AspectRatioIcon, {\n        onClick: () => {\n          add();\n        },\n        className: darkmodeReducer ? \"make-small-icons-clickable-darkab dontallowhighlighting zuperkingIcon \" : \"make-small-icons-clickable-lightab  dontallowhighlighting zuperkingIcon  \",\n        style: {\n          color: \"#ffffff\",\n          fontSize: \"3.8vw\",\n          position: \"absolute\",\n          opacity: optionscropshow2 ? 0.94 : 0,\n          borderRadius: '70%',\n          top: '3.8vh',\n          left: '48%',\n          right: \"\",\n          display: optionscropshow ? hideCrop ? 'none' : SaveCropData ? 'none' : hide ? 'none' : 'block' : 'none'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DoneOutlineIcon, {\n        onClick: () => {\n          setcropImage([]);\n          setSaveCropData(true);\n          setTimeout(() => {\n            setcount(1);\n            setcropImage(selectedImageReducer[0]);\n          }, 100);\n        },\n        className: darkmodeReducer ? \"make-small-icons-clickable-darkab dontallowhighlighting zuperkingIcon \" : \"make-small-icons-clickable-lightab  dontallowhighlighting zuperkingIcon  \",\n        style: {\n          color: \"#ffffff\",\n          fontSize: \"3.8vw\",\n          position: \"absolute\",\n          opacity: optionscropshow2 ? 0.94 : 0,\n          borderRadius: '70%',\n          top: '3.8vh',\n          left: '94%',\n          right: \"\",\n          display: optionscropshow ? hideCrop ? 'none' : SaveCropData ? 'none' : hide ? 'none' : 'block' : 'none'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(TaskbarCropx, \"9deNPwbDJkJkdZ3MA5bj4fpIGsY=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = TaskbarCropx;\nexport const TaskbarCrop = /*#__PURE__*/React.memo(TaskbarCropx);\n_c2 = TaskbarCrop;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TaskbarCropx\");\n$RefreshReg$(_c2, \"TaskbarCrop\");","map":{"version":3,"sources":["C:/Users/oghen/OneDrive/Documents/ClikBate/super/src/profile/TaskbarCrop.tsx"],"names":["React","useRef","useEffect","useCallback","useState","Grid","useSelector","useDispatch","Masonry","DoneOutlineIcon","CloseIcon","AspectRatioIcon","CircleIcon","UpdateNavFilterReducer","Cropper","TouchAppIcon","TaskbarCropx","showModalUploadTask","uploadClose","setfinalimage","finalImage","setHidecropper","hideCrop","sethideCrop","ratiox","setratiox","itemUploadRefThumb","itemUploadRefSD","itemUploadRef","dispatch","canRef","darkmode","state","GlobalReducer","darkmodeReducer","activatefilterImage","activatecropImage","selectedImage","cropimage","GlobalNavuploadReducer","activatefilterImageReducer","activatecropImageReducer","selectedImageReducer","cropimageReducer","cropCanvasRef","cropCanvasRefx","navRef","IconRef","IconRef2","allowCropAllCanvas","setallowCropAllCanvas","CropImageHolder","setCropImageHolder","FinalCropImageHolder","setFinalCropImageHolder","imageHeight","setimageHeight","imageWidth","setimageWidth","Box","setBox","final","setFinal","cropInitial","setcropInitial","x","y","cropInitialx","setcropInitialx","cropOffset","setcropOffset","Drag","setDrag","cropx","setcropx","allowscrolltimer","extendxy","allowOverflow","setallowOverflow","optionscropshow","setoptionscropshow","optionscropshow2","setoptionscropshow2","SaveCropData","setSaveCropData","hide","sethide","CropImage","setcropImage","multiPost","setmultiPost","showIcon","prevImage","setprevimage","menuTimer5","NewCanH","setNewCanH","NewCanW","setNewCanW","crop","setCrop","crop2","setCrop2","crop3","setCrop3","zoom","setZoom","count","setcount","Tipper","setTipper","color","colordark","colortype","GlobalReducerColor","colorReducer","colorReducerdark","colortypeReducer","setRay","setTimeout","croppedImage","setCroppedImage","cropperRef","ray","Repli","croppedAreaPixels","canvas","document","createElement","imageRef","src","scaleX","naturalWidth","width","scaleY","naturalHeight","height","lowerResolutionWidth","lowerResolutionHeight","longerSide","Math","max","scale","adjustedWidth","adjustedHeight","ctx","getContext","onload","requestAnimationFrame","drawImage","dataUrl","toDataURL","g","updatedRay","current","length","error","console","onCropComplete","_","ratio","setratio","ShowNumber","setShowNumber","add","clearTimeout","padding","fontFamily","fontWeight","opacity","display","position","top","zIndex","left","fontSize","filter","borderRadius","overflow","map","picture","index","scrollIntoView","behavior","block","cursor","visibility","right","TaskbarCrop","memo"],"mappings":"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","sourcesContent":["import React, {\r\n    useRef,\r\n    useEffect,\r\n    useCallback,\r\n    useState,\r\n    useLayoutEffect,\r\n} from \"react\";\r\nimport ControlPointDuplicateIcon from \"@mui/icons-material/ControlPointDuplicate\";\r\nimport { Grid, Switch, DialogContent } from \"@material-ui/core\";\r\nimport { matchPc, matchTablet, matchMobile } from \"../DetectDevice\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport { OptionsSlider } from \"../profile/OptionsSlider\";\r\nimport { RootStateOrAny, useSelector, useDispatch } from \"react-redux\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport DoneOutlineIcon from '@mui/icons-material/DoneOutline';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport { UpdateUploadData } from \"../GlobalActions\";\r\nimport DoneIcon from '@mui/icons-material/Done';\r\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\r\nimport AspectRatioIcon from '@mui/icons-material/AspectRatio';\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport CropIcon from '@mui/icons-material/Crop';\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport { UpdateNavFilterReducer } from \"../GlobalActions\";\r\nimport Cropper from \"react-easy-crop\";\r\nimport TouchAppIcon from '@material-ui/icons/TouchApp';\r\nimport { Point, Area } from \"react-easy-crop/types\";\r\n\r\n\r\n\r\n\r\n\r\nfunction TaskbarCropx({\r\n    showModalUploadTask,\r\n    uploadClose,\r\n    setfinalimage,\r\n    finalImage,\r\n    setHidecropper,\r\n    hideCrop,\r\n    sethideCrop,\r\n    ratiox,\r\n    setratiox,\r\n    itemUploadRefThumb,\r\n    itemUploadRefSD,\r\n    itemUploadRef\r\n\r\n}: any): JSX.Element {\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const canRef: any = useRef(null);\r\n\r\n    ///\r\n    ///\r\n    ///\r\n    /// INTERFACE/TYPES FOR SCREENHEIGHT AND DARKMODE\r\n    interface RootStateGlobalReducer {\r\n        GlobalReducer: {\r\n            darkmode: boolean;\r\n            screenHeight: number;\r\n        };\r\n    }\r\n\r\n    ///\r\n    ///\r\n    ///\r\n    /// GET DARKMODE FROM REDUX STORE\r\n    const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n        ...state.GlobalReducer,\r\n    }));\r\n    const darkmodeReducer = darkmode;\r\n\r\n\r\n    const { activatefilterImage, activatecropImage, selectedImage, cropimage } = useSelector(\r\n        (state: RootStateOrAny) => ({\r\n            ...state.GlobalNavuploadReducer,\r\n        })\r\n    );\r\n    const activatefilterImageReducer = activatefilterImage;\r\n    const activatecropImageReducer = activatecropImage;\r\n    const selectedImageReducer = selectedImage;\r\n    const cropimageReducer = cropimage;\r\n\r\n\r\n\r\n    const cropCanvasRef: any = useRef(null);\r\n\r\n    const cropCanvasRefx: any = useRef(null);\r\n\r\n    const navRef: any = useRef(null);\r\n\r\n    const IconRef: any = useRef(null);\r\n\r\n    const IconRef2: any = useRef(null);\r\n\r\n    const [allowCropAllCanvas, setallowCropAllCanvas] = useState<boolean>(true);\r\n\r\n    const [CropImageHolder, setCropImageHolder] = useState<any>(null);\r\n\r\n    const [FinalCropImageHolder, setFinalCropImageHolder] = useState<any>(null);\r\n\r\n    const [imageHeight, setimageHeight] = useState(0);\r\n    const [imageWidth, setimageWidth] = useState(0);\r\n\r\n    const [Box, setBox] = useState<boolean>(false);\r\n\r\n    const [final, setFinal] = useState<boolean>(false);\r\n\r\n\r\n    const [cropInitial, setcropInitial] = useState<any>({ x: 0, y: 0 });\r\n\r\n    const [cropInitialx, setcropInitialx] = useState<any>({ x: 0, y: 0 });\r\n\r\n    const [cropOffset, setcropOffset] = useState<any>({ x: 0, y: 0 });\r\n\r\n    const [Drag, setDrag] = useState<boolean>(false);\r\n\r\n\r\n\r\n    const [cropx, setcropx] = useState<any>({ x: 0, y: 0 });\r\n\r\n    const allowscrolltimer = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n\r\n    var extendxy = 3.3;\r\n\r\n    const [allowOverflow, setallowOverflow] = useState<boolean>(false);\r\n\r\n    const [optionscropshow, setoptionscropshow] = useState<boolean>(true);\r\n\r\n    const [optionscropshow2, setoptionscropshow2] = useState<boolean>(true);\r\n\r\n    const [SaveCropData, setSaveCropData] = useState<boolean>(false);\r\n\r\n    const [hide, sethide] = useState<boolean>(true);\r\n\r\n    const [CropImage, setcropImage] = useState<any>(null);\r\n\r\n    const [multiPost, setmultiPost] = useState(false);\r\n\r\n    const [showIcon] = useState(false);\r\n\r\n    const [prevImage, setprevimage] = useState([]);\r\n\r\n    const menuTimer5 = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n\r\n\r\n    const [NewCanH, setNewCanH] = useState(0);\r\n\r\n    const [NewCanW, setNewCanW] = useState(0);\r\n\r\n\r\n\r\n\r\n    const [crop, setCrop] = useState<Point>({ x: 0, y: 0 });\r\n    const [crop2, setCrop2] = useState<Point>({ x: 0, y: 0 });\r\n    const [crop3, setCrop3] = useState<Point>({ x: 0, y: 0 });\r\n\r\n    const [zoom, setZoom] = useState(1);\r\n\r\n    const [count, setcount] = useState(0);\r\n\r\n\r\n    const [Tipper, setTipper] = useState(0);\r\n\r\n\r\n\r\n    ///\r\n    ///\r\n    /// GET COLOR FROM REDUX STORE\r\n    interface RootStateReducerColor {\r\n        GlobalReducerColor: {\r\n            color: string;\r\n            colordark: string;\r\n            colortype: number;\r\n        };\r\n    }\r\n    const { color, colordark, colortype } = useSelector(\r\n        (state: RootStateReducerColor) => ({\r\n            ...state.GlobalReducerColor,\r\n        })\r\n    );\r\n    const colorReducer = color;\r\n    const colorReducerdark = colordark;\r\n    const colortypeReducer = colortype;\r\n\r\n\r\n    useEffect(() => {\r\n        if (Tipper === 3) {\r\n\r\n            setHidecropper(true);\r\n            dispatch(UpdateNavFilterReducer(true));\r\n\r\n        }\r\n\r\n    }, [Tipper]);\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        setprevimage(selectedImageReducer);\r\n        setcropImage(selectedImageReducer[0])\r\n        sethideCrop(false);\r\n        setRay([]);\r\n        setcount(0);\r\n        setfinalimage([])\r\n\r\n        sethide(true)\r\n        setTimeout(() => { sethide(false) }, 1000)\r\n\r\n    }, [selectedImageReducer, showModalUploadTask]);\r\n\r\n\r\n\r\n\r\n\r\n    const [croppedImage, setCroppedImage] = useState<string | null>(null);\r\n\r\n    const cropperRef = useRef<Cropper | any>(null);\r\n    const [ray, setRay] = useState([]);\r\n\r\n\r\n\r\n    const Repli = useCallback((croppedAreaPixels) => {\r\n\r\n\r\n        const canvas = document.createElement('canvas');\r\n        const imageRef = document.createElement('img');\r\n        imageRef.src = CropImage;\r\n\r\n        const scaleX = imageRef.naturalWidth / imageRef.width;\r\n        const scaleY = imageRef.naturalHeight / imageRef.height;\r\n\r\n        // Set the desired lower resolution\r\n        const lowerResolutionWidth = 200; // Set your desired width\r\n        const lowerResolutionHeight = 200; // Set your desired height\r\n\r\n        // Calculate the scale factor based on the longer side of the cropped area\r\n        const longerSide = Math.max(croppedAreaPixels.width, croppedAreaPixels.height);\r\n        const scale = longerSide / Math.max(lowerResolutionWidth, lowerResolutionHeight);\r\n\r\n        // Calculate the adjusted dimensions\r\n        const adjustedWidth = croppedAreaPixels.width / scale;\r\n        const adjustedHeight = croppedAreaPixels.height / scale;\r\n\r\n        canvas.width = adjustedWidth;\r\n        canvas.height = adjustedHeight;\r\n\r\n        const ctx = canvas.getContext('2d');\r\n\r\n        if (ctx) {\r\n            imageRef.onload = () => {\r\n                requestAnimationFrame(async () => {\r\n                    try {\r\n                        ctx.drawImage(\r\n                            imageRef,\r\n                            croppedAreaPixels.x * scaleX,\r\n                            croppedAreaPixels.y * scaleY,\r\n                            croppedAreaPixels.width * scaleX,\r\n                            croppedAreaPixels.height * scaleY,\r\n                            0,\r\n                            0,\r\n                            adjustedWidth,\r\n                            adjustedHeight\r\n                        );\r\n\r\n                        if (count > 0 && SaveCropData) {\r\n                            const dataUrl = canvas.toDataURL('image/png');\r\n                            const g = count - 1;\r\n\r\n                            if (ray[g]) {\r\n                                // alert('kj')\r\n                            } else {\r\n                                const updatedRay: any = [...ray];\r\n                                updatedRay[g] = dataUrl;\r\n\r\n                                if (x === 0) { } else if (x === 0) { }\r\n                                itemUploadRefThumb.current[g].src = dataUrl;\r\n                                itemUploadRefSD.current[g].src = dataUrl;\r\n                                itemUploadRef.current[g].src = dataUrl;\r\n\r\n                                if (selectedImageReducer.length === count) {\r\n                                    ///setfinalimage(updatedRay);\r\n                                    setTipper(Tipper + 1);\r\n                                    ///console.log(itemUploadRefThumb.current);\r\n                                } else if (count === 1) {\r\n                                    setRay(updatedRay);\r\n                                    setTimeout(() => {\r\n                                        setcount(2);\r\n                                        setcropImage(selectedImageReducer[1]);\r\n                                    }, 100);\r\n                                } else {\r\n                                    setRay(updatedRay);\r\n                                    setTimeout(() => {\r\n                                        setcount(3);\r\n                                        setcropImage(selectedImageReducer[2]);\r\n                                    }, 100);\r\n                                }\r\n                            }\r\n                        }\r\n                    } catch (error) {\r\n                        // alert(error)\r\n                        console.error('Error while cropping the image:', error);\r\n                    }\r\n                });\r\n            };\r\n        }\r\n\r\n    }, [CropImage, count, SaveCropData, ray, itemUploadRefThumb])\r\n\r\n\r\n\r\n    const onCropComplete = useCallback((_, croppedAreaPixels) => {\r\n        Repli(croppedAreaPixels);\r\n    }, [CropImage, count, SaveCropData, ray, itemUploadRefThumb]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const [ratio, setratio] = useState(2);\r\n\r\n    const [ShowNumber, setShowNumber] = useState<boolean>(false);\r\n\r\n\r\n    const add = useCallback(() => {\r\n        setratiox(ratiox + 1);\r\n        setShowNumber(true)\r\n\r\n\r\n        if (allowscrolltimer.current) {\r\n            clearTimeout(allowscrolltimer.current);\r\n        }\r\n\r\n        allowscrolltimer.current = setTimeout(() => {\r\n            setShowNumber(false);\r\n        }, 1000)\r\n\r\n\r\n\r\n        setratio(ratio + 0.5);\r\n        if (ratio >= 4) {\r\n            setratio(2);\r\n            setratiox(1);\r\n        }\r\n    }, [ratio, ratiox])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n\r\n\r\n            <Grid className=\"dontallowhighlighting\"\r\n                container\r\n                style={{\r\n                    padding: \"0px\", width: '100%', height: \"100%\",\r\n\r\n                }}>\r\n\r\n\r\n\r\n                <Grid className=\"zuperxyinfo\"\r\n                    item\r\n                    xs={12}\r\n                    style={{\r\n                        height: '0px',\r\n                        fontFamily: ' Arial, Helvetica, sans- serif', fontWeight: 'bold', opacity: 0.96, display: SaveCropData ? 'block' : 'none',\r\n                        padding: \"0px\", position: 'fixed', top: '42vh', zIndex: 200000000, left: '47.5%'\r\n                    }}>\r\n\r\n\r\n                    <CircleIcon\r\n                        className={SaveCropData ? \"dontallowhighlighting  blinken zuperkingIcon\" : ' '}\r\n                        style={{\r\n                            fontSize: '5vw',\r\n                            color: colorReducer,\r\n                            position: 'absolute'\r\n                        }}\r\n                    />\r\n                </Grid>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                <Grid className=\"zuperxyinfo\"\r\n                    item\r\n                    xs={12}\r\n                    style={{\r\n                        height: '0px',\r\n                        display: ShowNumber ? 'block' : 'none',\r\n                        fontFamily: ' Arial, Helvetica, sans- serif', fontWeight: 'bold', opacity: 0.65,\r\n                        padding: \"0px\", position: 'fixed', top: '40vh', fontSize: '15vh', zIndex: 20000000, left: '47.5%'\r\n                    }}>\r\n                    {ratiox}\r\n                </Grid>\r\n\r\n\r\n\r\n                <Grid ref={navRef}\r\n                    item\r\n                    xs={12}\r\n                    style={{\r\n                        padding: \"0px\", width: '94%', height: multiPost ? \"80%\" : '100%', position: 'fixed', top: '-20000000000px',\r\n                    }}>\r\n\r\n                </Grid>\r\n\r\n\r\n\r\n                {croppedImage && (\r\n                    <img src={croppedImage} alt=\"Cropped Image\" style={{ position: 'fixed', top: '20vh', zIndex: 30000000, width: '20%' }} />\r\n                )}\r\n\r\n\r\n\r\n\r\n\r\n\r\n                <Grid\r\n                    item\r\n                    xs={12}\r\n                    style={{\r\n                        padding: \"0px\",\r\n                        filter: hideCrop ? SaveCropData ? 'brightness(0.8) blur(8px)' : 'brightness(1) blur(0px)' : 'brightness(0.8) blur(8px)'\r\n\r\n                    }}>\r\n\r\n                    <TouchAppIcon\r\n                        className={\r\n                            darkmodeReducer\r\n                                ? \" dontallowhighlighting zuperkingIcon \"\r\n                                : \" dontallowhighlighting zuperkingIcon  \"\r\n                        }\r\n\r\n\r\n                        style={{\r\n                            fontSize: \"5vw\",\r\n                            position: \"fixed\",\r\n                            opacity: optionscropshow2 ? 0.73 : 0,\r\n                            borderRadius: '70%',\r\n                            color: colorReducer,\r\n                            top: '2vh',\r\n                            left: '2vw',\r\n                            zIndex: 2000,\r\n                            display: hideCrop ? 'block' : 'none'\r\n                        }}\r\n                    />\r\n\r\n\r\n\r\n                    {prevImage.length > 1 ? <><Masonry\r\n                        columns={2}\r\n                        spacing={0}\r\n                        style={{\r\n                            padding: \"0px\",\r\n                            overflow: 'hidden',\r\n\r\n                        }}\r\n                    >\r\n\r\n                        {prevImage.map((picture: any, index: any) => (\r\n                            <>\r\n\r\n\r\n\r\n\r\n                                <img onClick={() => {\r\n\r\n                                    ///setcount(index + 1);\r\n                                    navRef.current.scrollIntoView({\r\n                                        behavior: \"smooth\",\r\n                                        block: \"start\",\r\n                                    });\r\n                                    setcropImage(picture)\r\n                                    sethideCrop(false)\r\n                                }}\r\n\r\n                                    key={index} style={{ cursor: 'pointer', }} src={picture} alt={`Image ${index}`} />\r\n\r\n\r\n\r\n                            </>\r\n\r\n                        ))}\r\n\r\n                    </Masonry ></> : null}\r\n\r\n                </Grid>\r\n\r\n\r\n                <div className=\"\">\r\n\r\n\r\n\r\n\r\n                    <canvas\r\n                        ref={canRef}\r\n                        style={{\r\n                            padding: \"0px\",\r\n                            display: \"none\",\r\n                            position: \"fixed\",\r\n                            top: \"-400%\",\r\n                            zIndex: 0,\r\n                            visibility: \"hidden\",\r\n                        }}\r\n                    />\r\n\r\n\r\n                    <div style={{ display: hideCrop ? 'none' : 'block', visibility: SaveCropData ? 'hidden' : 'visible' }}>\r\n                        <Cropper\r\n                            ref={cropperRef}\r\n                            image={CropImage}\r\n                            crop={crop}\r\n                            zoom={zoom}\r\n                            aspect={ratio / 2.8}\r\n                            onCropChange={setCrop}\r\n                            onCropComplete={onCropComplete}\r\n                            onZoomChange={setZoom}\r\n\r\n                        />\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n                {selectedImageReducer.length > 1 ? <CloseIcon\r\n                    onClick={() => {\r\n                        sethideCrop(true);\r\n                    }}\r\n\r\n                    className={\r\n                        darkmodeReducer\r\n                            ? \"make-small-icons-clickable-darkab dontallowhighlighting zuperkingIcon \"\r\n                            : \"make-small-icons-clickable-lightab  dontallowhighlighting zuperkingIcon  \"\r\n                    }\r\n                    style={{\r\n\r\n                        color: \"#ffffff\",\r\n                        fontSize: \"3.8vw\",\r\n                        position: \"absolute\",\r\n                        opacity: optionscropshow2 ? 0.94 : 0,\r\n                        borderRadius: '70%',\r\n                        top: '3.8vh',\r\n                        left: '2%',\r\n                        right: \"\",\r\n                        display: optionscropshow ? hideCrop ? 'none' : SaveCropData ? 'none' : hide ? 'none' : 'block' : 'none'\r\n                    }}\r\n                />\r\n\r\n                    : null}\r\n\r\n\r\n                <AspectRatioIcon\r\n                    onClick={() => {\r\n                        add();\r\n                    }}\r\n\r\n                    className={\r\n                        darkmodeReducer\r\n                            ? \"make-small-icons-clickable-darkab dontallowhighlighting zuperkingIcon \"\r\n                            : \"make-small-icons-clickable-lightab  dontallowhighlighting zuperkingIcon  \"\r\n                    }\r\n                    style={{\r\n                        color: \"#ffffff\",\r\n                        fontSize: \"3.8vw\",\r\n                        position: \"absolute\",\r\n                        opacity: optionscropshow2 ? 0.94 : 0,\r\n                        borderRadius: '70%',\r\n                        top: '3.8vh',\r\n                        left: '48%',\r\n                        right: \"\",\r\n                        display: optionscropshow ? hideCrop ? 'none' : SaveCropData ? 'none' : hide ? 'none' : 'block' : 'none'\r\n                    }}\r\n                />\r\n\r\n\r\n                <DoneOutlineIcon\r\n                    onClick={() => {\r\n                        setcropImage([]);\r\n                        setSaveCropData(true);\r\n                        setTimeout(() => {\r\n\r\n                            setcount(1);\r\n                            setcropImage(selectedImageReducer[0])\r\n                        }, 100)\r\n                    }}\r\n\r\n                    className={\r\n                        darkmodeReducer\r\n                            ? \"make-small-icons-clickable-darkab dontallowhighlighting zuperkingIcon \"\r\n                            : \"make-small-icons-clickable-lightab  dontallowhighlighting zuperkingIcon  \"\r\n                    }\r\n                    style={{\r\n\r\n                        color: \"#ffffff\",\r\n                        fontSize: \"3.8vw\",\r\n                        position: \"absolute\",\r\n                        opacity: optionscropshow2 ? 0.94 : 0,\r\n                        borderRadius: '70%',\r\n                        top: '3.8vh',\r\n                        left: '94%',\r\n                        right: \"\",\r\n                        display: optionscropshow ? hideCrop ? 'none' : SaveCropData ? 'none' : hide ? 'none' : 'block' : 'none'\r\n                    }}\r\n                />\r\n\r\n            </Grid >\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport const TaskbarCrop = React.memo(TaskbarCropx);\r\n"]},"metadata":{},"sourceType":"module"}