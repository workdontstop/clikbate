{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\upload\\\\ImageTobeFiltered.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ImageTobeFilteredx({\n  filterImage,\n  index,\n  itemUploadRef,\n  setActivatefilterImage\n}) {\n  _s();\n\n  ///\n  ///\n  ///\n  const filterbaseimageRef = useRef(null);\n  const canvasRef = useRef(null);\n  const canvasRefdummy = useRef(null);\n\n  const closegate = () => {\n    if (index === 0) {////\n      ///addfilter();\n    } else {\n      setActivatefilterImage(false);\n    }\n  };\n\n  function blend(background, foreground, width, height, transform) {\n    // Side note: grabbing this data is the most expensive piece. For better\n    // performance, you could consider caching this data\n    var bottom = background.getImageData(0, 0, width, height);\n    var top = foreground.getImageData(0, 0, width, height);\n\n    for (var i = 0, size = top.data.length; i < size; i += 4) {\n      // red\n      top.data[i + 0] = transform(bottom.data[i + 0], bottom.data[i + 0]); // green\n\n      top.data[i + 1] = transform(bottom.data[i + 1], top.data[i + 1]); // blue\n\n      top.data[i + 2] = transform(bottom.data[i + 2], top.data[i + 2]); // the fourth slot is alpha. We don't need that (so skip by 4)\n    }\n\n    return top;\n  }\n\n  const ApplyImageFilter = type => {\n    //////////////////INITIALIZE  CANVAS\n    const previewFileReadimage = new Image();\n    previewFileReadimage.src = itemUploadRef.current[index].src;\n\n    previewFileReadimage.onload = function () {\n      const ctx = canvasRef.current.getContext(\"2d\");\n      var widthx = window.innerWidth / 2.5;\n      var scalex = widthx / previewFileReadimage.naturalWidth;\n      var heightx = previewFileReadimage.naturalHeight * scalex;\n      var width = window.innerWidth / 0.5;\n      var scale = width / previewFileReadimage.naturalWidth;\n      var height = previewFileReadimage.naturalHeight * scale;\n      canvasRef.current.height = height;\n      canvasRef.current.width = width; //////////////////INITIALIZE  CANVAS\n      ////////////////////\n\n      requestAnimationFrame(() => {\n        if (type === \"lit\") {\n          ctx.filter = \"contrast(1.3) brightness(1) blur(0px)\";\n        }\n\n        ctx.drawImage(previewFileReadimage, 0, 0, canvasRef.current.width, canvasRef.current.height);\n\n        if (type === \"lit\") {\n          ////////////composition\n          ctx.globalCompositeOperation = \"screen\";\n          ctx.fillStyle = \"rgba(100, 100, 100,0.07)\";\n          ctx.fillRect(0, 0, width, height); ////////////composition\n        }\n      });\n      canvasRef.current.style.width = `${widthx}px`;\n      canvasRef.current.style.height = `${heightx}px`;\n    }; ////////////////////\n    ////\n\n  };\n\n  const jentle = () => {\n    const previewFileReadimage = new Image();\n    previewFileReadimage.src = itemUploadRef.current[index].src;\n\n    previewFileReadimage.onload = function () {\n      const ctx = canvasRef.current.getContext(\"2d\");\n      var widthx = window.innerWidth / 2.5;\n      var scalex = widthx / previewFileReadimage.naturalWidth;\n      var heightx = previewFileReadimage.naturalHeight * scalex;\n      var width = window.innerWidth / 0.5;\n      var scale = width / previewFileReadimage.naturalWidth;\n      var height = previewFileReadimage.naturalHeight * scale;\n      canvasRef.current.height = height;\n      canvasRef.current.width = width; ////////////////////\n\n      requestAnimationFrame(() => {\n        ctx.filter = \"contrast(1.15) brightness(1) hue-rotate(20deg) \";\n        ctx.drawImage(previewFileReadimage, 0, 0, canvasRef.current.width, canvasRef.current.height); ////////////composition\n        ////////////composition\n\n        ctx.globalCompositeOperation = \"soft-light\";\n        ctx.fillStyle = \"rgba(97, 79, 77,1)\";\n        ctx.fillRect(0, 0, width, height); ////////////composition\n        ///var gradient = toasterGradientJentle(width, height);\n\n        var screen = blend(ctx, gradient, width, height, function (bottomPixel, topPixel) {\n          return 255 - (255 - topPixel) * (255 - bottomPixel) / 255;\n        }); // replace `ctx.drawImage(gradient.canvas, 0, 0)` with this:\n\n        ctx.putImageData(screen, 0, 0);\n      });\n      canvasRef.current.style.width = `${widthx}px`;\n      canvasRef.current.style.height = `${heightx}px`;\n    }; ////////////////////\n    ////\n\n  };\n\n  const Floyd = () => {\n    const previewFileReadimage = new Image();\n    previewFileReadimage.src = itemUploadRef.current[index].src;\n\n    previewFileReadimage.onload = function () {\n      const ctx = canvasRef.current.getContext(\"2d\");\n      var widthx = window.innerWidth / 2.5;\n      var scalex = widthx / previewFileReadimage.naturalWidth;\n      var heightx = previewFileReadimage.naturalHeight * scalex;\n      var width = window.innerWidth / 0.5;\n      var scale = width / previewFileReadimage.naturalWidth;\n      var height = previewFileReadimage.naturalHeight * scale;\n      canvasRef.current.height = height;\n      canvasRef.current.width = width; ////////////////////\n\n      requestAnimationFrame(() => {\n        ctx.filter = \"contrast(1.23) brightness(1.06)\";\n        ctx.drawImage(previewFileReadimage, 0, 0, canvasRef.current.width, canvasRef.current.height); ////////////vignette\n\n        var w = canvasRef.current.width;\n        var h = canvasRef.current.height;\n        var gradient = ctx.createRadialGradient(w / 2, h / 3, 0, w / 2, h / 3, w * 1);\n        gradient.addColorStop(0, \"rgba(255, 255, 255,0.3)\");\n        gradient.addColorStop(1, \"rgba(000,000,000,0.45)\");\n        ctx.fillStyle = gradient;\n        ctx.fillRect(0, 0, width, height); ////////////vignette\n        ////////////composition\n\n        ctx.globalCompositeOperation = \"overlay\";\n        ctx.fillStyle = \"rgba(97, 79, 77,1)\";\n        ctx.fillRect(0, 0, width, height); ////////////composition\n      });\n      canvasRef.current.style.width = `${widthx}px`;\n      canvasRef.current.style.height = `${heightx}px`;\n    }; ////////////////////\n    ////\n\n  };\n\n  function toasterGradientMint(width, height) {\n    ////////////gradientcolor\n    var ctx = canvasRefdummy.current.getContext(\"2d\");\n    canvasRefdummy.current.height = height;\n    canvasRefdummy.current.width = width; // Fill a Radial Gradient\n    // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createRadialGradient\n\n    var gradient = ctx.createLinearGradient(width / 2, height / 2, 0, width / 2, height / 2, width * 0.6);\n    gradient.addColorStop(0, \"#002b22\");\n    gradient.addColorStop(1, \"#002b22\"); /// ctx.fillStyle = gradient;\n\n    ctx.fillRect(0, 0, width, height); ////////////gradientcolor\n\n    return ctx;\n  }\n\n  const mint = () => {\n    const previewFileReadimage = new Image();\n    previewFileReadimage.src = itemUploadRef.current[index].src;\n\n    previewFileReadimage.onload = function () {\n      const ctx = canvasRef.current.getContext(\"2d\");\n      var widthx = window.innerWidth / 2.5;\n      var scalex = widthx / previewFileReadimage.naturalWidth;\n      var heightx = previewFileReadimage.naturalHeight * scalex;\n      var width = window.innerWidth / 0.5;\n      var scale = width / previewFileReadimage.naturalWidth;\n      var height = previewFileReadimage.naturalHeight * scale;\n      canvasRef.current.height = height;\n      canvasRef.current.width = width; ////////////////////\n\n      requestAnimationFrame(() => {\n        ctx.filter = \"contrast(1.5) brightness(0.8)  \";\n        ctx.drawImage(previewFileReadimage, 0, 0, canvasRef.current.width, canvasRef.current.height); ////////////composition\n\n        ctx.globalCompositeOperation = \"overlay\";\n        ctx.fillStyle = \"rgba(10, 10, 10,0.1)\";\n        ctx.fillRect(0, 0, width, height); ////////////composition\n\n        var gradient = toasterGradientMint(width, height);\n        var screen = blend(ctx, gradient, width, height, function (bottomPixel, topPixel) {\n          return 255 - (245 - topPixel) * (255 - bottomPixel) / 255;\n        }); // replace `ctx.drawImage(gradient.canvas, 0, 0)` with this:\n\n        ctx.putImageData(screen, 0, 0);\n        const scannedImage = ctx.getImageData(0, 0, canvasRef.current.width, canvasRef.current.height);\n        const scannedData = scannedImage.data; ///\n\n        for (let i = 0; i < scannedData.length; i += 4) {\n          scannedData[i] = scannedData[i] / 2 + scannedData[i] / 3.6;\n          scannedData[i + 1] = scannedData[i + 1];\n          scannedData[i + 2] = scannedData[i + 2];\n        } ///\n\n\n        ctx.putImageData(scannedImage, 0, 0);\n      });\n      canvasRef.current.style.width = `${widthx}px`;\n      canvasRef.current.style.height = `${heightx}px`;\n    };\n  };\n\n  const nebula = () => {\n    const previewFileReadimage = new Image();\n    previewFileReadimage.src = itemUploadRef.current[index].src;\n\n    previewFileReadimage.onload = function () {\n      const ctx = canvasRef.current.getContext(\"2d\");\n      var widthx = window.innerWidth / 2.5;\n      var scalex = widthx / previewFileReadimage.naturalWidth;\n      var heightx = previewFileReadimage.naturalHeight * scalex;\n      var width = window.innerWidth / 0.5;\n      var scale = width / previewFileReadimage.naturalWidth;\n      var height = previewFileReadimage.naturalHeight * scale;\n      canvasRef.current.height = height;\n      canvasRef.current.width = width; ////////////////////\n\n      requestAnimationFrame(() => {\n        ctx.filter = \"contrast(1.2) brightness(0.85) saturate(0.81)\";\n        ctx.drawImage(previewFileReadimage, 0, 0, canvasRef.current.width, canvasRef.current.height); ////////////composition\n\n        ctx.globalCompositeOperation = \"xor\";\n        ctx.fillStyle = \"#07070a17\";\n        ctx.fillRect(0, 0, width, height); ////////////composition\n        ///var gradient = toasterGradientNebula(width, height);\n\n        var screen = blend(ctx, gradient, width, height, function (bottomPixel, topPixel) {\n          return 255 - (252 - topPixel) * (250 - bottomPixel) / 255;\n        }); // replace `ctx.drawImage(gradient.canvas, 0, 0)` with this:\n\n        ctx.putImageData(screen, 0, 0);\n        const scannedImage = ctx.getImageData(0, 0, canvasRef.current.width, canvasRef.current.height);\n        const scannedData = scannedImage.data; ///\n\n        for (let i = 0; i < scannedData.length; i += 4) {\n          scannedData[i] = scannedData[i] / 2 + scannedData[i] / 3.6;\n          scannedData[i + 1] = scannedData[i + 1];\n          scannedData[i + 2] = scannedData[i + 2];\n        } ///\n\n\n        ctx.putImageData(scannedImage, 0, 0);\n      });\n      canvasRef.current.style.width = `${widthx}px`;\n      canvasRef.current.style.height = `${heightx}px`;\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: itemUploadRef.current[index] ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: lit,\n        children: \" lit \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: Floyd,\n        children: \" floyd \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: jentle,\n        children: \" jentle \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: mint,\n        children: \" mint \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: nebula,\n        children: \" nebula \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        id: itemUploadRef.current[index],\n        ref: filterbaseimageRef,\n        onClick: closegate,\n        src: itemUploadRef.current ? itemUploadRef.current[index].src : null,\n        style: {\n          width: \"30%\",\n          height: \"auto\",\n          position: \"relative\",\n          margin: \"auto\",\n          marginRight: index === 0 ? \"20px\" : \"0px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        style: {\n          padding: \"0px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRefdummy,\n        style: {\n          padding: \"0px\",\n          display: \"none\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : null\n  }, void 0, false);\n}\n\n_s(ImageTobeFilteredx, \"ZWhJm1DdZVPEYmfxvg5uQgXY6wQ=\");\n\n_c = ImageTobeFilteredx;\nexport const ImageTobeFiltered = /*#__PURE__*/React.memo(ImageTobeFilteredx);\n_c2 = ImageTobeFiltered;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ImageTobeFilteredx\");\n$RefreshReg$(_c2, \"ImageTobeFiltered\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/upload/ImageTobeFiltered.tsx"],"names":["React","useRef","ImageTobeFilteredx","filterImage","index","itemUploadRef","setActivatefilterImage","filterbaseimageRef","canvasRef","canvasRefdummy","closegate","blend","background","foreground","width","height","transform","bottom","getImageData","top","i","size","data","length","ApplyImageFilter","type","previewFileReadimage","Image","src","current","onload","ctx","getContext","widthx","window","innerWidth","scalex","naturalWidth","heightx","naturalHeight","scale","requestAnimationFrame","filter","drawImage","globalCompositeOperation","fillStyle","fillRect","style","jentle","screen","gradient","bottomPixel","topPixel","putImageData","Floyd","w","h","createRadialGradient","addColorStop","toasterGradientMint","createLinearGradient","mint","scannedImage","scannedData","nebula","lit","position","margin","marginRight","padding","display","ImageTobeFiltered","memo"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from \"react\";\r\n\r\nfunction ImageTobeFilteredx({\r\n  filterImage,\r\n  index,\r\n  itemUploadRef,\r\n  setActivatefilterImage,\r\n}: any): JSX.Element {\r\n  ///\r\n  ///\r\n  ///\r\n  const filterbaseimageRef: any = useRef(null);\r\n\r\n  const canvasRef: any = useRef(null);\r\n\r\n  const canvasRefdummy: any = useRef(null);\r\n\r\n  const closegate = () => {\r\n    if (index === 0) {\r\n      ////\r\n      ///addfilter();\r\n    } else {\r\n      setActivatefilterImage(false);\r\n    }\r\n  };\r\n\r\n  function blend(\r\n    background: any,\r\n    foreground: any,\r\n    width: any,\r\n    height: any,\r\n    transform: any\r\n  ) {\r\n    // Side note: grabbing this data is the most expensive piece. For better\r\n    // performance, you could consider caching this data\r\n    var bottom = background.getImageData(0, 0, width, height);\r\n    var top = foreground.getImageData(0, 0, width, height);\r\n\r\n    for (var i = 0, size = top.data.length; i < size; i += 4) {\r\n      // red\r\n      top.data[i + 0] = transform(bottom.data[i + 0], bottom.data[i + 0]);\r\n      // green\r\n      top.data[i + 1] = transform(bottom.data[i + 1], top.data[i + 1]);\r\n      // blue\r\n      top.data[i + 2] = transform(bottom.data[i + 2], top.data[i + 2]);\r\n      // the fourth slot is alpha. We don't need that (so skip by 4)\r\n    }\r\n\r\n    return top;\r\n  }\r\n\r\n  const ApplyImageFilter = (type: string) => {\r\n    //////////////////INITIALIZE  CANVAS\r\n    const previewFileReadimage = new Image();\r\n    previewFileReadimage.src = itemUploadRef.current[index].src;\r\n    previewFileReadimage.onload = function () {\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n\r\n      var widthx = window.innerWidth / 2.5;\r\n      var scalex = widthx / previewFileReadimage.naturalWidth;\r\n      var heightx = previewFileReadimage.naturalHeight * scalex;\r\n\r\n      var width = window.innerWidth / 0.5;\r\n      var scale = width / previewFileReadimage.naturalWidth;\r\n      var height = previewFileReadimage.naturalHeight * scale;\r\n\r\n      canvasRef.current.height = height;\r\n      canvasRef.current.width = width;\r\n\r\n      //////////////////INITIALIZE  CANVAS\r\n\r\n      ////////////////////\r\n\r\n      requestAnimationFrame(() => {\r\n        if (type === \"lit\") {\r\n          ctx.filter = \"contrast(1.3) brightness(1) blur(0px)\";\r\n        }\r\n        ctx.drawImage(\r\n          previewFileReadimage,\r\n          0,\r\n          0,\r\n          canvasRef.current.width,\r\n          canvasRef.current.height\r\n        );\r\n\r\n        if (type === \"lit\") {\r\n          ////////////composition\r\n          ctx.globalCompositeOperation = \"screen\";\r\n          ctx.fillStyle = \"rgba(100, 100, 100,0.07)\";\r\n          ctx.fillRect(0, 0, width, height);\r\n          ////////////composition\r\n        }\r\n      });\r\n\r\n      canvasRef.current.style.width = `${widthx}px`;\r\n      canvasRef.current.style.height = `${heightx}px`;\r\n    };\r\n\r\n    ////////////////////\r\n    ////\r\n  };\r\n\r\n  const jentle = () => {\r\n    const previewFileReadimage = new Image();\r\n    previewFileReadimage.src = itemUploadRef.current[index].src;\r\n    previewFileReadimage.onload = function () {\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n\r\n      var widthx = window.innerWidth / 2.5;\r\n      var scalex = widthx / previewFileReadimage.naturalWidth;\r\n      var heightx = previewFileReadimage.naturalHeight * scalex;\r\n\r\n      var width = window.innerWidth / 0.5;\r\n      var scale = width / previewFileReadimage.naturalWidth;\r\n      var height = previewFileReadimage.naturalHeight * scale;\r\n\r\n      canvasRef.current.height = height;\r\n      canvasRef.current.width = width;\r\n\r\n      ////////////////////\r\n\r\n      requestAnimationFrame(() => {\r\n        ctx.filter = \"contrast(1.15) brightness(1) hue-rotate(20deg) \";\r\n\r\n        ctx.drawImage(\r\n          previewFileReadimage,\r\n          0,\r\n          0,\r\n          canvasRef.current.width,\r\n          canvasRef.current.height\r\n        );\r\n\r\n        ////////////composition\r\n\r\n        ////////////composition\r\n\r\n        ctx.globalCompositeOperation = \"soft-light\";\r\n        ctx.fillStyle = \"rgba(97, 79, 77,1)\";\r\n        ctx.fillRect(0, 0, width, height);\r\n        ////////////composition\r\n\r\n        ///var gradient = toasterGradientJentle(width, height);\r\n\r\n        var screen = blend(\r\n          ctx,\r\n          gradient,\r\n          width,\r\n          height,\r\n          function (bottomPixel: any, topPixel: any) {\r\n            return 255 - ((255 - topPixel) * (255 - bottomPixel)) / 255;\r\n          }\r\n        );\r\n\r\n        // replace `ctx.drawImage(gradient.canvas, 0, 0)` with this:\r\n        ctx.putImageData(screen, 0, 0);\r\n      });\r\n      canvasRef.current.style.width = `${widthx}px`;\r\n      canvasRef.current.style.height = `${heightx}px`;\r\n    };\r\n\r\n    ////////////////////\r\n    ////\r\n  };\r\n\r\n  const Floyd = () => {\r\n    const previewFileReadimage = new Image();\r\n    previewFileReadimage.src = itemUploadRef.current[index].src;\r\n    previewFileReadimage.onload = function () {\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n\r\n      var widthx = window.innerWidth / 2.5;\r\n      var scalex = widthx / previewFileReadimage.naturalWidth;\r\n      var heightx = previewFileReadimage.naturalHeight * scalex;\r\n\r\n      var width = window.innerWidth / 0.5;\r\n      var scale = width / previewFileReadimage.naturalWidth;\r\n      var height = previewFileReadimage.naturalHeight * scale;\r\n\r\n      canvasRef.current.height = height;\r\n      canvasRef.current.width = width;\r\n\r\n      ////////////////////\r\n\r\n      requestAnimationFrame(() => {\r\n        ctx.filter = \"contrast(1.23) brightness(1.06)\";\r\n\r\n        ctx.drawImage(\r\n          previewFileReadimage,\r\n          0,\r\n          0,\r\n          canvasRef.current.width,\r\n          canvasRef.current.height\r\n        );\r\n\r\n        ////////////vignette\r\n        var w = canvasRef.current.width;\r\n        var h = canvasRef.current.height;\r\n\r\n        var gradient = ctx.createRadialGradient(\r\n          w / 2,\r\n          h / 3,\r\n          0,\r\n          w / 2,\r\n          h / 3,\r\n          w * 1\r\n        );\r\n\r\n        gradient.addColorStop(0, \"rgba(255, 255, 255,0.3)\");\r\n        gradient.addColorStop(1, \"rgba(000,000,000,0.45)\");\r\n\r\n        ctx.fillStyle = gradient;\r\n        ctx.fillRect(0, 0, width, height);\r\n        ////////////vignette\r\n\r\n        ////////////composition\r\n\r\n        ctx.globalCompositeOperation = \"overlay\";\r\n        ctx.fillStyle = \"rgba(97, 79, 77,1)\";\r\n        ctx.fillRect(0, 0, width, height);\r\n        ////////////composition\r\n      });\r\n\r\n      canvasRef.current.style.width = `${widthx}px`;\r\n      canvasRef.current.style.height = `${heightx}px`;\r\n    };\r\n\r\n    ////////////////////\r\n    ////\r\n  };\r\n\r\n  function toasterGradientMint(width: any, height: any) {\r\n    ////////////gradientcolor\r\n    var ctx = canvasRefdummy.current.getContext(\"2d\");\r\n\r\n    canvasRefdummy.current.height = height;\r\n    canvasRefdummy.current.width = width;\r\n\r\n    // Fill a Radial Gradient\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createRadialGradient\r\n    var gradient = ctx.createLinearGradient(\r\n      width / 2,\r\n      height / 2,\r\n      0,\r\n      width / 2,\r\n      height / 2,\r\n      width * 0.6\r\n    );\r\n    gradient.addColorStop(0, \"#002b22\");\r\n    gradient.addColorStop(1, \"#002b22\");\r\n\r\n    /// ctx.fillStyle = gradient;\r\n    ctx.fillRect(0, 0, width, height);\r\n\r\n    ////////////gradientcolor\r\n    return ctx;\r\n  }\r\n\r\n  const mint = () => {\r\n    const previewFileReadimage = new Image();\r\n    previewFileReadimage.src = itemUploadRef.current[index].src;\r\n    previewFileReadimage.onload = function () {\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n\r\n      var widthx = window.innerWidth / 2.5;\r\n      var scalex = widthx / previewFileReadimage.naturalWidth;\r\n      var heightx = previewFileReadimage.naturalHeight * scalex;\r\n\r\n      var width = window.innerWidth / 0.5;\r\n      var scale = width / previewFileReadimage.naturalWidth;\r\n      var height = previewFileReadimage.naturalHeight * scale;\r\n\r\n      canvasRef.current.height = height;\r\n      canvasRef.current.width = width;\r\n\r\n      ////////////////////\r\n\r\n      requestAnimationFrame(() => {\r\n        ctx.filter = \"contrast(1.5) brightness(0.8)  \";\r\n\r\n        ctx.drawImage(\r\n          previewFileReadimage,\r\n          0,\r\n          0,\r\n          canvasRef.current.width,\r\n          canvasRef.current.height\r\n        );\r\n\r\n        ////////////composition\r\n        ctx.globalCompositeOperation = \"overlay\";\r\n        ctx.fillStyle = \"rgba(10, 10, 10,0.1)\";\r\n        ctx.fillRect(0, 0, width, height);\r\n        ////////////composition\r\n\r\n        var gradient = toasterGradientMint(width, height);\r\n\r\n        var screen = blend(\r\n          ctx,\r\n          gradient,\r\n          width,\r\n          height,\r\n          function (bottomPixel: any, topPixel: any) {\r\n            return 255 - ((245 - topPixel) * (255 - bottomPixel)) / 255;\r\n          }\r\n        );\r\n\r\n        // replace `ctx.drawImage(gradient.canvas, 0, 0)` with this:\r\n        ctx.putImageData(screen, 0, 0);\r\n\r\n        const scannedImage = ctx.getImageData(\r\n          0,\r\n          0,\r\n          canvasRef.current.width,\r\n          canvasRef.current.height\r\n        );\r\n\r\n        const scannedData: any = scannedImage.data;\r\n\r\n        ///\r\n\r\n        for (let i = 0; i < scannedData.length; i += 4) {\r\n          scannedData[i] = scannedData[i] / 2 + scannedData[i] / 3.6;\r\n          scannedData[i + 1] = scannedData[i + 1];\r\n          scannedData[i + 2] = scannedData[i + 2];\r\n        }\r\n        ///\r\n        ctx.putImageData(scannedImage, 0, 0);\r\n      });\r\n      canvasRef.current.style.width = `${widthx}px`;\r\n      canvasRef.current.style.height = `${heightx}px`;\r\n    };\r\n  };\r\n\r\n  const nebula = () => {\r\n    const previewFileReadimage = new Image();\r\n    previewFileReadimage.src = itemUploadRef.current[index].src;\r\n    previewFileReadimage.onload = function () {\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n\r\n      var widthx = window.innerWidth / 2.5;\r\n      var scalex = widthx / previewFileReadimage.naturalWidth;\r\n      var heightx = previewFileReadimage.naturalHeight * scalex;\r\n\r\n      var width = window.innerWidth / 0.5;\r\n      var scale = width / previewFileReadimage.naturalWidth;\r\n      var height = previewFileReadimage.naturalHeight * scale;\r\n\r\n      canvasRef.current.height = height;\r\n      canvasRef.current.width = width;\r\n\r\n      ////////////////////\r\n\r\n      requestAnimationFrame(() => {\r\n        ctx.filter = \"contrast(1.2) brightness(0.85) saturate(0.81)\";\r\n\r\n        ctx.drawImage(\r\n          previewFileReadimage,\r\n          0,\r\n          0,\r\n          canvasRef.current.width,\r\n          canvasRef.current.height\r\n        );\r\n\r\n        ////////////composition\r\n        ctx.globalCompositeOperation = \"xor\";\r\n        ctx.fillStyle = \"#07070a17\";\r\n        ctx.fillRect(0, 0, width, height);\r\n        ////////////composition\r\n\r\n        ///var gradient = toasterGradientNebula(width, height);\r\n\r\n        var screen = blend(\r\n          ctx,\r\n          gradient,\r\n          width,\r\n          height,\r\n          function (bottomPixel: any, topPixel: any) {\r\n            return 255 - ((252 - topPixel) * (250 - bottomPixel)) / 255;\r\n          }\r\n        );\r\n\r\n        // replace `ctx.drawImage(gradient.canvas, 0, 0)` with this:\r\n        ctx.putImageData(screen, 0, 0);\r\n\r\n        const scannedImage = ctx.getImageData(\r\n          0,\r\n          0,\r\n          canvasRef.current.width,\r\n          canvasRef.current.height\r\n        );\r\n\r\n        const scannedData: any = scannedImage.data;\r\n\r\n        ///\r\n\r\n        for (let i = 0; i < scannedData.length; i += 4) {\r\n          scannedData[i] = scannedData[i] / 2 + scannedData[i] / 3.6;\r\n          scannedData[i + 1] = scannedData[i + 1];\r\n          scannedData[i + 2] = scannedData[i + 2];\r\n        }\r\n        ///\r\n        ctx.putImageData(scannedImage, 0, 0);\r\n      });\r\n\r\n      canvasRef.current.style.width = `${widthx}px`;\r\n      canvasRef.current.style.height = `${heightx}px`;\r\n    };\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {itemUploadRef.current[index] ? (\r\n        <>\r\n          {\" \"}\r\n          <button onClick={lit}> lit </button>\r\n          <button onClick={Floyd}> floyd </button>\r\n          <button onClick={jentle}> jentle </button>\r\n          <button onClick={mint}> mint </button>\r\n          <button onClick={nebula}> nebula </button>\r\n          <img\r\n            id={itemUploadRef.current[index]}\r\n            ref={filterbaseimageRef}\r\n            onClick={closegate}\r\n            src={\r\n              itemUploadRef.current ? itemUploadRef.current[index].src : null\r\n            }\r\n            style={{\r\n              width: \"30%\",\r\n              height: \"auto\",\r\n              position: \"relative\",\r\n              margin: \"auto\",\r\n              marginRight: index === 0 ? \"20px\" : \"0px\",\r\n            }}\r\n          />\r\n          <canvas\r\n            ref={canvasRef}\r\n            style={{\r\n              padding: \"0px\",\r\n            }}\r\n          />\r\n          <canvas\r\n            ref={canvasRefdummy}\r\n            style={{\r\n              padding: \"0px\",\r\n              display: \"none\",\r\n            }}\r\n          />\r\n        </>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport const ImageTobeFiltered = React.memo(ImageTobeFilteredx);\r\n"]},"metadata":{},"sourceType":"module"}