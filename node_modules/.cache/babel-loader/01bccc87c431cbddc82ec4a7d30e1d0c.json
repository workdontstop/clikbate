{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oghen\\\\OneDrive\\\\Documents\\\\ClikBate\\\\super\\\\src\\\\log\\\\Option.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback } from \"react\";\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\nimport { OptionInnerModal } from \"./OptionInnerModal\";\nimport { Grid } from \"@material-ui/core\";\nimport { matchPc, matchTablet } from \"../DetectDevice\";\nimport { useSelector } from \"react-redux\";\nimport \"./logCss.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Optionx() {\n  _s();\n\n  const [showModal, setShowModal] = useState(false);\n  var superFont = \"\";\n  var optionsContainer = \"\";\n  var HorizIconfontData;\n  const fontDataPc = {\n    fontSize: \"2.2vw\"\n  };\n  const fontDataTablet = {\n    fontSize: \"3.7vh\"\n  };\n  const fontDataMobile = {\n    fontSize: \"4.2vh\"\n  }; ///\n  ///\n  ///\n  ///CONDITIONAL STATEMENT FOR DEVICE TYPE\n\n  if (matchPc) {\n    superFont = \"super-starz-text-Pc\";\n    optionsContainer = \"optionsContainer-Pc-Tab\";\n    HorizIconfontData = fontDataPc; ///\n  } else if (matchTablet) {\n    superFont = \"super-starz-text-Tablet\";\n    optionsContainer = \"optionsContainer-Pc-Tab\";\n    HorizIconfontData = fontDataTablet; ///\n  } else {\n    superFont = \"super-starz-text-Mobile\";\n    optionsContainer = \"optionsContainer-Mobile\";\n    HorizIconfontData = fontDataMobile;\n  } ///\n  ///\n  ///\n  /// CLOSE MODAL (STARTS AN ONPOPSTATE EVENT)\n\n\n  const closemodal = useCallback(backbutton => {\n    //pop states fires when back and forward buttons used\n    if (backbutton === 1) {\n      window.onpopstate = () => {\n        window.history.pushState(null, \"\", window.location.href);\n        window.onpopstate = null;\n        setShowModal(false);\n      };\n    } else {\n      window.history.pushState(null, \"\", \".\");\n      window.onpopstate = null;\n      setShowModal(false);\n    }\n  }, []); ///\n  ///\n  ///\n  ///OPEN MODAL THEN CALL CLOSEMODAL FUNCTION WHICH WAITS FOR A POP EVENT(for closing modal)\n\n  const Openmodal = useCallback(() => {\n    setShowModal(!showModal); //pushstate add enteries to your history\n\n    window.history.pushState(null, \"\", \"Options\");\n    closemodal(1);\n  }, [showModal, closemodal]); ///\n  ///\n  ///\n  /// GET DARKMODE FROM REDUX STORE\n\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    style: {},\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        className: optionsContainer,\n        style: {\n          visibility: showModal ? \"hidden\" : \"visible\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 6,\n          style: {\n            textAlign: \"left\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: superFont,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: darkmodeReducer ? \"text-superstarz-dark   text-superstarz-dark-colorA  \" : \"text-superstarz-light  text-superstarz-light-colorA  \",\n              children: \"Clik\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                opacity: darkmodeReducer ? \"0.7\" : \"0.8\"\n              },\n              className: darkmodeReducer ? \"text-superstarz-dark     text-superstarz-dark-colorB  \" : \"text-superstarz-light   text-superstarz-light-colorB   \",\n              children: \"Bate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 6,\n          className: \"text-align-right\",\n          children: /*#__PURE__*/_jsxDEV(MoreHorizIcon, {\n            onClick: Openmodal,\n            className: darkmodeReducer ? \"make-small-icons-clickable-dark dontallowhighlighting  \" : \"make-small-icons-clickable-light  dontallowhighlighting  \",\n            fontSize: \"large\",\n            style: HorizIconfontData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OptionInnerModal, {\n      showModal: showModal,\n      closemodal: closemodal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Optionx, \"IHa2wv4NsluKUW0iGltTj+qLaik=\", false, function () {\n  return [useSelector];\n});\n\n_c = Optionx;\nexport const Option = /*#__PURE__*/React.memo(Optionx);\n_c2 = Option;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Optionx\");\n$RefreshReg$(_c2, \"Option\");","map":{"version":3,"sources":["C:/Users/oghen/OneDrive/Documents/ClikBate/super/src/log/Option.tsx"],"names":["React","useState","useCallback","MoreHorizIcon","OptionInnerModal","Grid","matchPc","matchTablet","useSelector","Optionx","showModal","setShowModal","superFont","optionsContainer","HorizIconfontData","fontDataPc","fontSize","fontDataTablet","fontDataMobile","closemodal","backbutton","window","onpopstate","history","pushState","location","href","Openmodal","darkmode","state","GlobalReducer","darkmodeReducer","visibility","textAlign","opacity","Option","memo"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\r\n\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { OptionInnerModal } from \"./OptionInnerModal\";\r\n\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport \"./logCss.css\";\r\nimport * as CSS from \"csstype\";\r\n\r\nfunction Optionx(): JSX.Element {\r\n  const [showModal, setShowModal] = useState<boolean>(false);\r\n\r\n  var superFont = \"\";\r\n  var optionsContainer = \"\";\r\n  var HorizIconfontData: CSS.Properties;\r\n\r\n  const fontDataPc: CSS.Properties = { fontSize: \"2.2vw\" };\r\n  const fontDataTablet: CSS.Properties = { fontSize: \"3.7vh\" };\r\n  const fontDataMobile: CSS.Properties = { fontSize: \"4.2vh\" };\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  ///CONDITIONAL STATEMENT FOR DEVICE TYPE\r\n  if (matchPc) {\r\n    superFont = \"super-starz-text-Pc\";\r\n    optionsContainer = \"optionsContainer-Pc-Tab\";\r\n    HorizIconfontData = fontDataPc;\r\n    ///\r\n  } else if (matchTablet) {\r\n    superFont = \"super-starz-text-Tablet\";\r\n    optionsContainer = \"optionsContainer-Pc-Tab\";\r\n    HorizIconfontData = fontDataTablet;\r\n    ///\r\n  } else {\r\n    superFont = \"super-starz-text-Mobile\";\r\n    optionsContainer = \"optionsContainer-Mobile\";\r\n    HorizIconfontData = fontDataMobile;\r\n  }\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// CLOSE MODAL (STARTS AN ONPOPSTATE EVENT)\r\n  const closemodal = useCallback((backbutton: number) => {\r\n    //pop states fires when back and forward buttons used\r\n    if (backbutton === 1) {\r\n      window.onpopstate = () => {\r\n        window.history.pushState(null, \"\", window.location.href);\r\n        window.onpopstate = null;\r\n        setShowModal(false);\r\n      };\r\n    } else {\r\n      window.history.pushState(null, \"\", \".\");\r\n      window.onpopstate = null;\r\n      setShowModal(false);\r\n    }\r\n  }, []);\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  ///OPEN MODAL THEN CALL CLOSEMODAL FUNCTION WHICH WAITS FOR A POP EVENT(for closing modal)\r\n  const Openmodal = useCallback(() => {\r\n    setShowModal(!showModal);\r\n    //pushstate add enteries to your history\r\n    window.history.pushState(null, \"\", \"Options\");\r\n    closemodal(1);\r\n  }, [showModal, closemodal]);\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// GET DARKMODE FROM REDUX STORE\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n\r\n  const darkmodeReducer = darkmode;\r\n\r\n  return (\r\n    <Grid container style={{}}>\r\n      <Grid item xs={12}>\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          className={optionsContainer}\r\n          style={{ visibility: showModal ? \"hidden\" : \"visible\" }}\r\n        >\r\n          <Grid item xs={6} style={{ textAlign: \"left\" }}>\r\n            <span className={superFont}>\r\n              <span\r\n                className={\r\n                  darkmodeReducer\r\n                    ? \"text-superstarz-dark   text-superstarz-dark-colorA  \"\r\n                    : \"text-superstarz-light  text-superstarz-light-colorA  \"\r\n                }\r\n              >\r\n                Clik\r\n              </span>\r\n\r\n              <span\r\n                style={{ opacity: darkmodeReducer ? \"0.7\" : \"0.8\" }}\r\n                className={\r\n                  darkmodeReducer\r\n                    ? \"text-superstarz-dark     text-superstarz-dark-colorB  \"\r\n                    : \"text-superstarz-light   text-superstarz-light-colorB   \"\r\n                }\r\n              >\r\n                Bate\r\n              </span>\r\n            </span>\r\n          </Grid>\r\n\r\n          <Grid item xs={6} className=\"text-align-right\">\r\n            <MoreHorizIcon\r\n              onClick={Openmodal}\r\n              className={\r\n                darkmodeReducer\r\n                  ? \"make-small-icons-clickable-dark dontallowhighlighting  \"\r\n                  : \"make-small-icons-clickable-light  dontallowhighlighting  \"\r\n              }\r\n              fontSize=\"large\"\r\n              style={HorizIconfontData}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <OptionInnerModal showModal={showModal} closemodal={closemodal} />\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport const Option = React.memo(Optionx);\r\n"]},"metadata":{},"sourceType":"module"}