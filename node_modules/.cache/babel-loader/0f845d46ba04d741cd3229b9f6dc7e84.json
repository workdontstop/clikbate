{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\log\\\\PasswordCheck.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback } from \"react\";\nimport { TextField } from \"@material-ui/core\";\nimport { matchPc, matchTablet } from \"../DetectDevice\";\nimport { Grid } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction PasswordCheckx({\n  withHolder,\n  borderGrid,\n  checkSignupPassword,\n  setcheckSignupPassword\n}) {\n  _s();\n\n  ///\n  ///\n  ///\n  /// GET DARKMODE FROM REDUX STORE\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode; /////\n\n  var sizex = undefined;\n  var font1 = \" \";\n  var font2 = \" \";\n  var transform = \"\";\n  var widthcheckPassword = \"\";\n  var heighttt = \" \"; ///////\n\n  if (matchPc) {\n    var heighttt = \"100vh\";\n    sizex = \"medium\";\n    font1 = \"2.7vh\";\n    font2 = \"1.9vh\";\n    transform = \"scale(1)\";\n    widthcheckPassword = withHolder;\n  } else if (matchTablet) {\n    var heighttt = \"95.2vh\";\n    sizex = \"small\";\n    font1 = \"2.6vh\";\n    font2 = \"2vh\";\n    transform = \"scale(1)\";\n    widthcheckPassword = \"62%\";\n  } else {\n    var heighttt = \"95.2vh\";\n    sizex = \"small\";\n    font1 = \"\";\n    font2 = \"\";\n    transform = \"scale(0.93)\";\n    widthcheckPassword = \"100%\";\n    positionn = \"fixed\";\n  } ///\n  ///\n  ///\n  /// SANITISE LOG IN FORM INPUT CLIENT SIDE\n\n\n  const updatecheckSignupPasswordvalues = useCallback(e => {\n    const {\n      value\n    } = e.target;\n    setcheckSignupPassword(value);\n  }, [checkSignupPassword]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      xs: 12,\n      container: true,\n      className: darkmodeReducer ? \"mobileTextfield-backplateColorDark formholder\" : \"mobileTextfield-backplateColorLight formholder\",\n      style: {\n        opacity: 0.98,\n        height: heighttt,\n        borderTopRightRadius: borderGrid,\n        borderBottomRightRadius: borderGrid,\n        zIndex: 12,\n        position: positionn,\n        bottom: bottomm\n      },\n      children: [\" \", \"style=\", {\n        borderTopRightRadius: borderGrid,\n        borderBottomRightRadius: borderGrid,\n        zIndex: 12\n      }, /*#__PURE__*/_jsxDEV(TextField, {\n        size: sizex,\n        inputProps: {\n          style: {\n            fontSize: font1\n          }\n        },\n        InputLabelProps: {\n          style: {\n            fontSize: font2\n          }\n        },\n        style: {\n          transform: transform,\n          width: widthcheckPassword\n        },\n        label: \"Confirm Password\",\n        type: \"text\",\n        onChange: updatecheckSignupPasswordvalues,\n        name: \"inputedUsername\",\n        value: checkSignupPassword,\n        variant: \"standard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(PasswordCheckx, \"MdkyX1tX9W0iX/UuV0CHhUfaeuw=\", false, function () {\n  return [useSelector];\n});\n\n_c = PasswordCheckx;\nexport const PasswordCheck = /*#__PURE__*/React.memo(PasswordCheckx);\n_c2 = PasswordCheck;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PasswordCheckx\");\n$RefreshReg$(_c2, \"PasswordCheck\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/log/PasswordCheck.tsx"],"names":["React","useCallback","TextField","matchPc","matchTablet","Grid","useSelector","PasswordCheckx","withHolder","borderGrid","checkSignupPassword","setcheckSignupPassword","darkmode","state","GlobalReducer","darkmodeReducer","sizex","undefined","font1","font2","transform","widthcheckPassword","heighttt","positionn","updatecheckSignupPasswordvalues","e","value","target","opacity","height","borderTopRightRadius","borderBottomRightRadius","zIndex","position","bottom","bottomm","style","fontSize","width","PasswordCheck","memo"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\r\n\r\nimport { IconButton, InputAdornment, TextField } from \"@material-ui/core\";\r\nimport VisibilityOffIcon from \"@material-ui/icons/VisibilityOff\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\nimport { ItextfIeldLogin } from \"./log-Interfaces\";\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction PasswordCheckx({\r\n  withHolder,\r\n  borderGrid,\r\n  checkSignupPassword,\r\n  setcheckSignupPassword,\r\n}: any): JSX.Element {\r\n  ///\r\n  ///\r\n  ///\r\n  /// GET DARKMODE FROM REDUX STORE\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n\r\n  const darkmodeReducer = darkmode;\r\n\r\n  /////\r\n  var sizex: \"small\" | \"medium\" | undefined = undefined;\r\n  var font1 = \" \";\r\n  var font2 = \" \";\r\n  var transform = \"\";\r\n  var widthcheckPassword = \"\";\r\n  var heighttt = \" \";\r\n\r\n  ///////\r\n\r\n  if (matchPc) {\r\n    var heighttt = \"100vh\";\r\n    sizex = \"medium\";\r\n    font1 = \"2.7vh\";\r\n    font2 = \"1.9vh\";\r\n    transform = \"scale(1)\";\r\n    widthcheckPassword = withHolder;\r\n  } else if (matchTablet) {\r\n    var heighttt = \"95.2vh\";\r\n    sizex = \"small\";\r\n    font1 = \"2.6vh\";\r\n    font2 = \"2vh\";\r\n    transform = \"scale(1)\";\r\n    widthcheckPassword = \"62%\";\r\n  } else {\r\n    var heighttt = \"95.2vh\";\r\n    sizex = \"small\";\r\n    font1 = \"\";\r\n    font2 = \"\";\r\n    transform = \"scale(0.93)\";\r\n    widthcheckPassword = \"100%\";\r\n    positionn = \"fixed\";\r\n  }\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// SANITISE LOG IN FORM INPUT CLIENT SIDE\r\n  const updatecheckSignupPasswordvalues = useCallback(\r\n    (e: any) => {\r\n      const { value } = e.target;\r\n      setcheckSignupPassword(value);\r\n    },\r\n\r\n    [checkSignupPassword]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        xs={12}\r\n        container\r\n        className={\r\n          darkmodeReducer\r\n            ? \"mobileTextfield-backplateColorDark formholder\"\r\n            : \"mobileTextfield-backplateColorLight formholder\"\r\n        }\r\n        style={{\r\n          opacity: 0.98,\r\n          height: heighttt,\r\n          borderTopRightRadius: borderGrid,\r\n          borderBottomRightRadius: borderGrid,\r\n          zIndex: 12,\r\n          position: positionn,\r\n          bottom: bottomm,\r\n        }}\r\n      >\r\n        {\" \"}\r\n        style=\r\n        {{\r\n          borderTopRightRadius: borderGrid,\r\n          borderBottomRightRadius: borderGrid,\r\n          zIndex: 12,\r\n        }}\r\n        <TextField\r\n          size={sizex}\r\n          inputProps={{ style: { fontSize: font1 } }}\r\n          InputLabelProps={{ style: { fontSize: font2 } }}\r\n          style={{\r\n            transform: transform,\r\n            width: widthcheckPassword,\r\n          }}\r\n          label=\"Confirm Password\"\r\n          type=\"text\"\r\n          onChange={updatecheckSignupPasswordvalues}\r\n          name=\"inputedUsername\"\r\n          value={checkSignupPassword}\r\n          variant=\"standard\"\r\n        />\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport const PasswordCheck = React.memo(PasswordCheckx);\r\n"]},"metadata":{},"sourceType":"module"}