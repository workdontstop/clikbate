{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\upload\\\\SuperCrop.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { matchPc } from \"../DetectDevice\";\nimport { Grid } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport Masonry from \"@mui/lab/Masonry\";\nimport { PreviewCanvas } from \"./PreviewCanvas\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction SuperCropx({\n  cropimage,\n  selectedImage\n}) {\n  _s();\n\n  const cropCanvasRef = useRef(null); ////\n  ////\n  ////\n\n  const [cropArea, setcropArea] = useState(null);\n  const [crop, setcrop] = useState({\n    x: 0,\n    y: 0\n  });\n  const [zoom, setzoom] = useState(1);\n  const [cropwidth, setcropwidth] = useState(0);\n  const [cropheight, setcropheight] = useState(0); ///\n  ///\n  ///DARKMODE FROM REDUX\n\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const getpreviewFixedWidthRef = useRef(null);\n  const getCropHeightRef = useRef(null);\n  const getFixedCropWidthRef = useRef(null);\n  const [getCropHeight, setgetCropHeight] = useState(0);\n  const [getCropHeightFullscreen, setgetCropHeightFullscreen] = useState(0);\n  const [getFixedCropWidth, setgetFixedCropWidth] = useState(0);\n  const [getpreviewFixedWidth, setgetpreviewFixedWidth] = useState(0);\n  const [CropImageHolder, setCropImageHolder] = useState(null);\n  const [OriginalImageWidth, setOriginalImageWidth] = useState(0);\n  const [OriginalImageHeight, setOriginalImageHeight] = useState(0); ///\n  ///\n  ///\n  ///GET OPTIONS SLIDER IMAGE WIDTH FROM MATERIAL UI GRID\n\n  useEffect(() => {\n    if (getpreviewFixedWidthRef.current && getpreviewFixedWidthRef.current.clientWidth) {\n      setgetpreviewFixedWidth(getpreviewFixedWidthRef.current.clientWidth);\n    }\n\n    if (getCropHeightRef.current && getCropHeightRef.current.clientWidth) {\n      setgetCropHeight(getCropHeightRef.current.clientHeight);\n    }\n\n    if (getFixedCropWidthRef.current && getFixedCropWidthRef.current.clientWidth) {\n      setgetFixedCropWidth(getFixedCropWidthRef.current.clientWidth);\n    }\n  }, []); ///\n\n  useEffect(() => {\n    const Newcropimage = new Image();\n    Newcropimage.src = cropimage;\n\n    Newcropimage.onload = function () {\n      setCropImageHolder(Newcropimage);\n      var data1 = Newcropimage.naturalWidth * 2;\n      var data2 = Newcropimage.naturalHeight * 2;\n      setOriginalImageWidth(data1);\n      setOriginalImageHeight(data2);\n      setcropwidth(data1);\n      setcropheight(data2);\n    };\n  }, [cropimage]);\n  useEffect(() => {\n    if (CropImageHolder && cropCanvasRef.current) {\n      const ctx = cropCanvasRef.current.getContext(\"2d\");\n      var RatiofromOriginalandfixedHeight = OriginalImageHeight / getCropHeight;\n      var NewBoxRatioWidth_WIDEIMAGE = OriginalImageWidth / RatiofromOriginalandfixedHeight;\n      var RatiofromOriginalandfixedHeight = OriginalImageHeight / getCropHeightFullscreen;\n      var NewBoxRatioWidth_LONGIMAGE = OriginalImageWidth / RatiofromOriginalandfixedHeight;\n      cropCanvasRef.current.width = getpreviewFixedWidth * zoom;\n      cropCanvasRef.current.height = getCropHeight * zoom;\n\n      if (OriginalImageWidth > OriginalImageHeight) {\n        ctx.drawImage(CropImageHolder, crop.x, crop.y, NewBoxRatioWidth_WIDEIMAGE * zoom, getCropHeight * zoom);\n      } else {\n        ctx.drawImage(CropImageHolder, crop.x, crop.y, NewBoxRatioWidth_LONGIMAGE * zoom, getCropHeightFullscreen * zoom);\n      }\n\n      cropCanvasRef.current.style.width = `${getpreviewFixedWidth}px`;\n      cropCanvasRef.current.style.height = `${getCropHeight}px`;\n    }\n  }, [CropImageHolder, cropCanvasRef, OriginalImageWidth, OriginalImageHeight]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      ref: getCropHeightRef,\n      style: {\n        position: \"relative\",\n        width: \"100%\",\n        height: \"70%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          ref: getFixedCropWidthRef,\n          xs: 4\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\",\n        ref: cropCanvasRef,\n        style: {\n          padding: \"0px\",\n          backgroundColor: \"#00ccff\",\n          margin: \"auto\"\n        }\n      }, cropimage, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      style: {\n        padding: \"0px\",\n        backgroundColor: \"#00ccff\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        ref: getpreviewFixedWidthRef,\n        xs: 4,\n        style: {\n          padding: \"0px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Masonry, {\n      columns: matchPc ? 3 : 1,\n      spacing: 0,\n      style: {\n        overflowX: \"hidden\"\n      },\n      children: [selectedImage ? selectedImage.map((photo, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(PreviewCanvas, {\n            cropheight: cropheight,\n            cropwidth: cropwidth,\n            CropImageHolder: CropImageHolder,\n            cropCanvasRef: cropCanvasRef,\n            crop: crop,\n            zoom: zoom,\n            index: index,\n            image: photo,\n            getpreviewFixedWidth: getpreviewFixedWidth\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 19\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 17\n        }, this);\n      }) : null, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(SuperCropx, \"qzPkXUFl/3czgz1nfcwyUVsqCnQ=\", false, function () {\n  return [useSelector];\n});\n\n_c = SuperCropx;\nexport const SuperCrop = /*#__PURE__*/React.memo(SuperCropx);\n_c2 = SuperCrop;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SuperCropx\");\n$RefreshReg$(_c2, \"SuperCrop\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/upload/SuperCrop.tsx"],"names":["React","useRef","useState","useEffect","matchPc","Grid","useSelector","Masonry","PreviewCanvas","SuperCropx","cropimage","selectedImage","cropCanvasRef","cropArea","setcropArea","crop","setcrop","x","y","zoom","setzoom","cropwidth","setcropwidth","cropheight","setcropheight","darkmode","state","GlobalReducer","darkmodeReducer","getpreviewFixedWidthRef","getCropHeightRef","getFixedCropWidthRef","getCropHeight","setgetCropHeight","getCropHeightFullscreen","setgetCropHeightFullscreen","getFixedCropWidth","setgetFixedCropWidth","getpreviewFixedWidth","setgetpreviewFixedWidth","CropImageHolder","setCropImageHolder","OriginalImageWidth","setOriginalImageWidth","OriginalImageHeight","setOriginalImageHeight","current","clientWidth","clientHeight","Newcropimage","Image","src","onload","data1","naturalWidth","data2","naturalHeight","ctx","getContext","RatiofromOriginalandfixedHeight","NewBoxRatioWidth_WIDEIMAGE","NewBoxRatioWidth_LONGIMAGE","width","height","drawImage","style","position","padding","backgroundColor","margin","overflowX","map","photo","index","SuperCrop","memo"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport Cropper from \"react-easy-crop\";\r\nimport MusicNoteIcon from \"@mui/icons-material/MusicNote\";\r\nimport PhotoIcon from \"@mui/icons-material/Photo\";\r\nimport GifIcon from \"@mui/icons-material/Gif\";\r\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\r\nimport Slider from \"@mui/material/Slider\";\r\nimport { AnySoaRecord } from \"dns\";\r\nimport { PreviewCanvas } from \"./PreviewCanvas\";\r\n\r\nfunction SuperCropx({ cropimage, selectedImage }: any): JSX.Element {\r\n  const cropCanvasRef: any = useRef(null);\r\n\r\n  ////\r\n  ////\r\n  ////\r\n  const [cropArea, setcropArea] = useState<any>(null);\r\n  const [crop, setcrop] = useState<any>({ x: 0, y: 0 });\r\n  const [zoom, setzoom] = useState(1);\r\n\r\n  const [cropwidth, setcropwidth] = useState(0);\r\n  const [cropheight, setcropheight] = useState(0);\r\n\r\n  ///\r\n  ///\r\n  ///DARKMODE FROM REDUX\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n\r\n  const darkmodeReducer = darkmode;\r\n\r\n  const getpreviewFixedWidthRef = useRef<HTMLDivElement>(null);\r\n\r\n  const getCropHeightRef: any = useRef<HTMLDivElement>(null);\r\n\r\n  const getFixedCropWidthRef: any = useRef<HTMLDivElement>(null);\r\n\r\n  const [getCropHeight, setgetCropHeight] = useState(0);\r\n\r\n  const [getCropHeightFullscreen, setgetCropHeightFullscreen] = useState(0);\r\n\r\n  const [getFixedCropWidth, setgetFixedCropWidth] = useState(0);\r\n\r\n  const [getpreviewFixedWidth, setgetpreviewFixedWidth] = useState(0);\r\n\r\n  const [CropImageHolder, setCropImageHolder] = useState<any>(null);\r\n\r\n  const [OriginalImageWidth, setOriginalImageWidth] = useState<number>(0);\r\n  const [OriginalImageHeight, setOriginalImageHeight] = useState<number>(0);\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  ///GET OPTIONS SLIDER IMAGE WIDTH FROM MATERIAL UI GRID\r\n  useEffect(() => {\r\n    if (\r\n      getpreviewFixedWidthRef.current &&\r\n      getpreviewFixedWidthRef.current.clientWidth\r\n    ) {\r\n      setgetpreviewFixedWidth(getpreviewFixedWidthRef.current.clientWidth);\r\n    }\r\n\r\n    if (getCropHeightRef.current && getCropHeightRef.current.clientWidth) {\r\n      setgetCropHeight(getCropHeightRef.current.clientHeight);\r\n    }\r\n\r\n    if (\r\n      getFixedCropWidthRef.current &&\r\n      getFixedCropWidthRef.current.clientWidth\r\n    ) {\r\n      setgetFixedCropWidth(getFixedCropWidthRef.current.clientWidth);\r\n    }\r\n  }, []);\r\n  ///\r\n\r\n  useEffect(() => {\r\n    const Newcropimage = new Image();\r\n    Newcropimage.src = cropimage;\r\n    Newcropimage.onload = function () {\r\n      setCropImageHolder(Newcropimage);\r\n\r\n      var data1 = Newcropimage.naturalWidth * 2;\r\n      var data2 = Newcropimage.naturalHeight * 2;\r\n      setOriginalImageWidth(data1);\r\n      setOriginalImageHeight(data2);\r\n\r\n      setcropwidth(data1);\r\n      setcropheight(data2);\r\n    };\r\n  }, [cropimage]);\r\n\r\n  useEffect(() => {\r\n    if (CropImageHolder && cropCanvasRef.current) {\r\n      const ctx = cropCanvasRef.current.getContext(\"2d\");\r\n\r\n      var RatiofromOriginalandfixedHeight = OriginalImageHeight / getCropHeight;\r\n      var NewBoxRatioWidth_WIDEIMAGE =\r\n        OriginalImageWidth / RatiofromOriginalandfixedHeight;\r\n\r\n      var RatiofromOriginalandfixedHeight =\r\n        OriginalImageHeight / getCropHeightFullscreen;\r\n      var NewBoxRatioWidth_LONGIMAGE =\r\n        OriginalImageWidth / RatiofromOriginalandfixedHeight;\r\n\r\n      cropCanvasRef.current.width = getpreviewFixedWidth * zoom;\r\n      cropCanvasRef.current.height = getCropHeight * zoom;\r\n\r\n      if (OriginalImageWidth > OriginalImageHeight) {\r\n        ctx.drawImage(\r\n          CropImageHolder,\r\n          crop.x,\r\n          crop.y,\r\n          NewBoxRatioWidth_WIDEIMAGE * zoom,\r\n          getCropHeight * zoom\r\n        );\r\n      } else {\r\n        ctx.drawImage(\r\n          CropImageHolder,\r\n          crop.x,\r\n          crop.y,\r\n          NewBoxRatioWidth_LONGIMAGE * zoom,\r\n          getCropHeightFullscreen * zoom\r\n        );\r\n      }\r\n\r\n      cropCanvasRef.current.style.width = `${getpreviewFixedWidth}px`;\r\n      cropCanvasRef.current.style.height = `${getCropHeight}px`;\r\n    }\r\n  }, [CropImageHolder, cropCanvasRef, OriginalImageWidth, OriginalImageHeight]);\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        ref={getCropHeightRef}\r\n        style={{\r\n          position: \"relative\",\r\n          width: \"100%\",\r\n          height: \"70%\",\r\n        }}\r\n      >\r\n        <Grid item xs={12}>\r\n          <Grid item ref={getFixedCropWidthRef} xs={4}></Grid>\r\n        </Grid>\r\n\r\n        <canvas\r\n          className={\r\n            darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\"\r\n          }\r\n          ref={cropCanvasRef}\r\n          key={cropimage}\r\n          style={{\r\n            padding: \"0px\",\r\n            backgroundColor: \"#00ccff\",\r\n            margin: \"auto\",\r\n          }}\r\n        />\r\n      </Grid>\r\n\r\n      <Grid\r\n        item\r\n        xs={12}\r\n        style={{\r\n          padding: \"0px\",\r\n          backgroundColor: \"#00ccff\",\r\n        }}\r\n      >\r\n        <Grid\r\n          item\r\n          ref={getpreviewFixedWidthRef}\r\n          xs={4}\r\n          style={{\r\n            padding: \"0px\",\r\n          }}\r\n        ></Grid>\r\n      </Grid>\r\n      <Masonry\r\n        columns={matchPc ? 3 : 1}\r\n        spacing={0}\r\n        style={{ overflowX: \"hidden\" }}\r\n      >\r\n        {selectedImage\r\n          ? selectedImage.map((photo: any, index: any) => {\r\n              return (\r\n                <div key={index}>\r\n                  <PreviewCanvas\r\n                    cropheight={cropheight}\r\n                    cropwidth={cropwidth}\r\n                    CropImageHolder={CropImageHolder}\r\n                    cropCanvasRef={cropCanvasRef}\r\n                    crop={crop}\r\n                    zoom={zoom}\r\n                    index={index}\r\n                    image={photo}\r\n                    getpreviewFixedWidth={getpreviewFixedWidth}\r\n                  />\r\n                </div>\r\n              );\r\n            })\r\n          : null}{\" \"}\r\n      </Masonry>\r\n    </>\r\n  );\r\n}\r\n\r\nexport const SuperCrop = React.memo(SuperCropx);\r\n"]},"metadata":{},"sourceType":"module"}