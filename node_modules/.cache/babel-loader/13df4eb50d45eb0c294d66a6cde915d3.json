{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oghen\\\\OneDrive\\\\Documents\\\\ClikBate\\\\Clikbate\\\\src\\\\upload\\\\VideoFFmpeg.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { createFFmpeg } from '@ffmpeg/ffmpeg';\nimport { toBlobURL } from '@ffmpeg/util';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoFFmpegx = ({\n  VideoUrl\n}) => {\n  _s();\n  const [recordedVideoUrl, setRecordedVideoUrl] = useState(null);\n  const [srcVideoBlob, setsrcVideoBlob] = useState(null);\n  const ffmpegRef = useRef(null);\n  if (!ffmpegRef.current) {\n    ffmpegRef.current = createFFmpeg({\n      log: true\n    });\n  }\n  const loadFFmpeg = async () => {\n    const ffmpeg = ffmpegRef.current;\n    const baseURL = 'https://unpkg.com/@ffmpeg/core-mt@0.12.5/dist/umd/';\n    try {\n      if (ffmpeg) {\n        await ffmpeg.load({\n          coreURL: await toBlobURL(`${baseURL}/ffmpeg-core.js`, 'text/javascript'),\n          wasmURL: await toBlobURL(`${baseURL}/ffmpeg-core.wasm`, 'application/wasm'),\n          workerURL: await toBlobURL(`${baseURL}/ffmpeg-core.worker.js`, 'text/javascript')\n        });\n      }\n    } catch (error) {\n      // Handle or log the error\n      console.error('Error loading FFmpeg:', error);\n\n      // Specific handling for SharedArrayBuffer error\n      if (error.message.includes('SharedArrayBuffer')) {\n        console.error('SharedArrayBuf is nt defined. Check if your site is correctly set up for cross-origin isolation.');\n        // Implement fallback or additional error handling\n      }\n    }\n  };\n  const processVideo = async sourceVideoUrl => {\n    const ffmpeg = ffmpegRef.current;\n    try {\n      if (!ffmpeg.isLoaded()) {\n        await loadFFmpeg();\n        alert('FFmpeg loaded successfully.');\n      }\n    } catch (error) {\n      console.error('Error procesing video:', error);\n    }\n  };\n  async function convertVideoUrlToBlob(url) {\n    try {\n      // Fetch the video from the URL\n      const response = await fetch(url);\n\n      // Check if the fetch was successful\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      // Get the video data as a Blob\n      const videoBlob = await response.blob();\n      return videoBlob;\n    } catch (error) {\n      console.error('Error fetching and converting the video:', error);\n    }\n  }\n  convertVideoUrlToBlob(VideoUrl).then(blob => {\n    console.log('Video Blob:', blob);\n\n    // You can now use the blob as needed, for example, create a local URL to use in a <video> element\n    if (blob) {\n      setsrcVideoBlob(blob);\n      const videoObjectURL = URL.createObjectURL(blob);\n      console.log('Object URL:', videoObjectURL);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {},\n      children: \"Process Video\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), recordedVideoUrl && /*#__PURE__*/_jsxDEV(\"video\", {\n      src: recordedVideoUrl,\n      controls: true,\n      style: {\n        width: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 34\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n};\n_s(VideoFFmpegx, \"uwZPlRCSEFqiWE46CWlz59D5gEc=\");\n_c = VideoFFmpegx;\nexport const VideoFFmpeg = /*#__PURE__*/React.memo(VideoFFmpegx);\n_c2 = VideoFFmpeg;\nvar _c, _c2;\n$RefreshReg$(_c, \"VideoFFmpegx\");\n$RefreshReg$(_c2, \"VideoFFmpeg\");","map":{"version":3,"names":["React","useState","useRef","createFFmpeg","toBlobURL","jsxDEV","_jsxDEV","VideoFFmpegx","VideoUrl","_s","recordedVideoUrl","setRecordedVideoUrl","srcVideoBlob","setsrcVideoBlob","ffmpegRef","current","log","loadFFmpeg","ffmpeg","baseURL","load","coreURL","wasmURL","workerURL","error","console","message","includes","processVideo","sourceVideoUrl","isLoaded","alert","convertVideoUrlToBlob","url","response","fetch","ok","Error","status","videoBlob","blob","then","videoObjectURL","URL","createObjectURL","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","src","controls","style","width","_c","VideoFFmpeg","memo","_c2","$RefreshReg$"],"sources":["C:/Users/oghen/OneDrive/Documents/ClikBate/Clikbate/src/upload/VideoFFmpeg.tsx"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport { createFFmpeg } from '@ffmpeg/ffmpeg';\r\nimport { fetchFile, toBlobURL } from '@ffmpeg/util';\r\n\r\nconst VideoFFmpegx = ({ VideoUrl }: any) => {\r\n    const [recordedVideoUrl, setRecordedVideoUrl] = useState(null);\r\n    const [srcVideoBlob, setsrcVideoBlob] = useState<any>(null);\r\n    const ffmpegRef = useRef(null);\r\n\r\n    if (!ffmpegRef.current) {\r\n        ffmpegRef.current = createFFmpeg({ log: true });\r\n    }\r\n\r\n    const loadFFmpeg = async () => {\r\n        const ffmpeg: any = ffmpegRef.current;\r\n        const baseURL = 'https://unpkg.com/@ffmpeg/core-mt@0.12.5/dist/umd/';\r\n\r\n        try {\r\n            if (ffmpeg) {\r\n\r\n\r\n\r\n                await ffmpeg.load({\r\n                    coreURL: await toBlobURL(`${baseURL}/ffmpeg-core.js`, 'text/javascript'),\r\n                    wasmURL: await toBlobURL(`${baseURL}/ffmpeg-core.wasm`, 'application/wasm'),\r\n                    workerURL: await toBlobURL(`${baseURL}/ffmpeg-core.worker.js`, 'text/javascript')\r\n\r\n                });\r\n\r\n\r\n\r\n            }\r\n        } catch (error: any) {\r\n            // Handle or log the error\r\n            console.error('Error loading FFmpeg:', error);\r\n\r\n            // Specific handling for SharedArrayBuffer error\r\n            if (error.message.includes('SharedArrayBuffer')) {\r\n                console.error('SharedArrayBuf is nt defined. Check if your site is correctly set up for cross-origin isolation.');\r\n                // Implement fallback or additional error handling\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n\r\n    const processVideo = async (sourceVideoUrl: string) => {\r\n        const ffmpeg: any = ffmpegRef.current;\r\n\r\n        try {\r\n            if (!ffmpeg.isLoaded()) {\r\n                await loadFFmpeg();\r\n                alert('FFmpeg loaded successfully.');\r\n            }\r\n\r\n\r\n\r\n\r\n        } catch (error) {\r\n            console.error('Error procesing video:', error);\r\n        }\r\n    };\r\n\r\n\r\n    async function convertVideoUrlToBlob(url: any) {\r\n        try {\r\n            // Fetch the video from the URL\r\n            const response = await fetch(url);\r\n\r\n            // Check if the fetch was successful\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            // Get the video data as a Blob\r\n            const videoBlob = await response.blob();\r\n\r\n            return videoBlob;\r\n        } catch (error) {\r\n            console.error('Error fetching and converting the video:', error);\r\n        }\r\n    }\r\n\r\n    convertVideoUrlToBlob(VideoUrl).then(blob => {\r\n        console.log('Video Blob:', blob);\r\n\r\n\r\n        // You can now use the blob as needed, for example, create a local URL to use in a <video> element\r\n        if (blob) {\r\n            setsrcVideoBlob(blob);\r\n            const videoObjectURL = URL.createObjectURL(blob);\r\n            console.log('Object URL:', videoObjectURL);\r\n        }\r\n    });\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={() => { }}>Process Video</button>\r\n            {recordedVideoUrl && <video src={recordedVideoUrl} controls style={{ width: '100%' }}></video>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const VideoFFmpeg = React.memo(VideoFFmpegx);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}