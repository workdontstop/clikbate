{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oghen\\\\OneDrive\\\\Documents\\\\ClikBate\\\\super\\\\src\\\\profile\\\\Taskbar.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useLayoutEffect } from \"react\";\nimport { Grid, DialogContent } from \"@material-ui/core\";\nimport { matchTablet, matchMobile } from \"../DetectDevice\";\nimport { useSpring, animated } from \"react-spring\";\nimport { useSelector } from \"react-redux\";\nimport DoneIcon from '@mui/icons-material/Done';\nimport CropIcon from '@mui/icons-material/Crop';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Taskbarx({\n  showModalUploadTask,\n  uploadClose\n}) {\n  _s();\n\n  ///\n  ///\n  ///\n  /// INTERFACE/TYPES FOR SCREENHEIGHT AND DARKMODE\n  ///\n  ///\n  ///\n  /// GET DARKMODE FROM REDUX STORE\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const animation = useSpring({\n    config: {\n      duration: 600\n    },\n    opacity: showModalUploadTask ? 1 : 0,\n    transform: showModalUploadTask ? `translateX(0%)` : `translateX(-100%)`,\n    padding: \"0px\"\n  });\n  const cropCanvasRef = useRef(null);\n  const navRef = useRef(null);\n  const IconRef = useRef(null);\n  const IconRef2 = useRef(null);\n  const [allowCropAllCanvas, setallowCropAllCanvas] = useState(true);\n  const [CropImageHolder, setCropImageHolder] = useState(null);\n  const [imageHeight, setimageHeight] = useState(0);\n  const [imageWidth, setimageWidth] = useState(0);\n  const [Box, setBox] = useState(false);\n  const [cropInitial, setcropInitial] = useState({\n    x: 0,\n    y: 0\n  });\n  const [cropInitialx, setcropInitialx] = useState({\n    x: 0,\n    y: 0\n  });\n  const [cropOffset, setcropOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [Drag, setDrag] = useState(false);\n  const [crop, setcrop] = useState({\n    x: 0,\n    y: 0\n  });\n  const allowscrolltimer = useRef(null);\n  var extendxy = 1;\n  const [allowOverflow, setallowOverflow] = useState(false);\n  const [optionscropshow, setoptionscropshow] = useState(false);\n  const {\n    activatefilterImage,\n    activatecropImage,\n    selectedImage,\n    cropimage\n  } = useSelector(state => ({ ...state.GlobalNavuploadReducer\n  }));\n  const activatefilterImageReducer = activatefilterImage;\n  const activatecropImageReducer = activatecropImage;\n  const selectedImageReducer = selectedImage;\n  const cropimageReducer = cropimage;\n\n  function resizeCanvas() {\n    const imgAspectRatio = cropCanvasRef.current.width / cropCanvasRef.current.height;\n    var screenW = navRef.current.clientWidth;\n    var screenH = navRef.current.clientHeight;\n    let canvasW = screenW;\n    let canvasH = screenH;\n\n    if (imgAspectRatio <= 1.55) {\n      canvasH = screenH;\n      canvasW = canvasH * imgAspectRatio;\n    } else {\n      canvasW = screenW;\n      canvasH = canvasW / imgAspectRatio;\n    }\n\n    cropCanvasRef.current.style.height = `${canvasH}px`;\n    cropCanvasRef.current.style.width = `${canvasW}px`;\n    IconRef.current.style.top = `${canvasH / 1.18}px`;\n    IconRef2.current.style.top = `${canvasH / 1.18}px`;\n  }\n\n  function GiveImageSpecificDimensions(Newcropimage) {\n    const imgAspectRatio = Newcropimage.naturalWidth / Newcropimage.naturalHeight;\n    var canvasW;\n    var canvasH;\n\n    if (imgAspectRatio <= 1.55) {\n      var screenH = 1920;\n      canvasH = screenH;\n      canvasH = screenH;\n      canvasW = canvasH * imgAspectRatio;\n    } else {\n      var screenW = 2048;\n      canvasW = screenW;\n      canvasW = screenW;\n      canvasH = canvasW / imgAspectRatio;\n    }\n\n    setimageHeight(canvasH);\n    setimageWidth(canvasW);\n  }\n\n  useLayoutEffect(() => {\n    const Newcropimage = new Image();\n    Newcropimage.src = cropimageReducer;\n\n    Newcropimage.onload = function () {\n      if (CropImageHolder === Newcropimage) {} else {\n        setCropImageHolder(Newcropimage);\n        GiveImageSpecificDimensions(Newcropimage);\n      }\n    };\n  }, [cropimageReducer]);\n  useLayoutEffect(() => {\n    if (CropImageHolder && cropCanvasRef.current) {\n      const ctx = cropCanvasRef.current.getContext(\"2d\");\n      const imgAspectRatio = imageWidth / imageHeight;\n\n      if (Box) {\n        if (imgAspectRatio <= 1.3) {\n          cropCanvasRef.current.width = imageWidth;\n          cropCanvasRef.current.height = imageWidth;\n        } else {\n          cropCanvasRef.current.width = imageHeight;\n          cropCanvasRef.current.height = imageHeight;\n        }\n      } else {\n        cropCanvasRef.current.width = imageWidth;\n        cropCanvasRef.current.height = imageHeight;\n      }\n\n      resizeCanvas();\n      const w = imageWidth;\n      const h = imageHeight;\n      ctx.drawImage(CropImageHolder, crop.x, crop.y, w, h);\n    }\n  }, [CropImageHolder, imageWidth, imageHeight, Box, crop]);\n\n  const mouseover = type => {\n    if (matchTablet || matchMobile) {\n      if (type === 1) {\n        if (allowOverflow) {} else {\n          setallowOverflow(true);\n        }\n      } else {\n        if (allowOverflow) {\n          setallowOverflow(false);\n        } else {}\n      }\n    }\n  };\n\n  const handleTouchStart = (e, type) => {\n    if (Box) {\n      mouseover(0);\n      setoptionscropshow(false);\n\n      if (type === 0) {\n        setcropInitial({ ...cropInitial,\n          x: e.clientX * extendxy - cropOffset.x,\n          y: e.clientY * extendxy - cropOffset.y\n        });\n      } else {\n        setcropInitial({ ...cropInitial,\n          x: e.touches[0].clientX * extendxy - cropOffset.x,\n          y: e.touches[0].clientY * extendxy - cropOffset.y\n        });\n      }\n\n      if (e.target) {\n        setDrag(true);\n      }\n    } else {\n      setBox(true);\n    }\n  };\n\n  const handleTouchEnd = () => {\n    if (allowscrolltimer.current) {\n      clearTimeout(allowscrolltimer.current);\n    }\n\n    allowscrolltimer.current = setTimeout(function () {\n      mouseover(1);\n    }, 1200);\n    setoptionscropshow(true);\n    setcropInitial({ ...cropInitial,\n      x: crop.x,\n      y: crop.y\n    });\n    setDrag(false);\n  };\n\n  const handleTouchDrag = (e, type) => {\n    if (Drag) {\n      var xx;\n      var yy;\n\n      if (type === 0) {\n        xx = e.clientX * extendxy - cropInitial.x;\n        yy = e.clientY * extendxy - cropInitial.y;\n      } else {\n        xx = e.touches[0].clientX * extendxy - cropInitial.x;\n        yy = e.touches[0].clientY * extendxy - cropInitial.y;\n      }\n\n      const maxX = cropCanvasRef.current.clientWidth + xx;\n      const maxY = imageHeight - cropCanvasRef.current.clientHeight + yy;\n      const maxYx = cropCanvasRef.current.clientHeight + yy;\n      var fz = imageWidth - cropCanvasRef.current.width;\n      fz *= -1;\n\n      if (xx > 0) {\n        xx = 0;\n      } else if (xx < fz) {\n        xx = fz;\n      }\n\n      var ff = imageHeight - cropCanvasRef.current.height;\n      ff *= -1;\n\n      if (yy > 0) {\n        yy = 0;\n      } else if (yy < ff) {\n        yy = ff;\n      }\n\n      setcrop({ ...crop\n      });\n      setcropOffset({ ...cropOffset,\n        x: xx\n      });\n      setcrop({ ...crop,\n        x: xx,\n        y: yy\n      });\n      setcropOffset({ ...cropOffset,\n        y: yy\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(animated.div, {\n      ref: navRef,\n      className: darkmodeReducer ? 'modal-containerDark' : 'modal-containerLight',\n      style: { ...animation,\n        width: '94%',\n        height: \"100vh\",\n        position: \"fixed\",\n        top: '-0vh',\n        zIndex: 100,\n        cursor: \"default\",\n        overflow: \"hidden\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(DialogContent, {\n        style: {\n          padding: \"0px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          style: {\n            padding: \"0px\",\n            width: '100%'\n          },\n          children: [crop.x, ' ', cropCanvasRef.current ? cropCanvasRef.current.clientWidth : null, allowCropAllCanvas ? /*#__PURE__*/_jsxDEV(\"canvas\", {\n            onMouseOver: () => {\n              mouseover(0);\n            },\n            onMouseUp: e => {\n              handleTouchEnd();\n            },\n            onTouchEnd: e => {\n              handleTouchEnd();\n            },\n            onMouseDown: e => {\n              handleTouchStart(e, 0);\n            },\n            onTouchStart: e => {\n              handleTouchStart(e, 1);\n            },\n            onMouseMove: e => {\n              handleTouchDrag(e, 0);\n            },\n            onTouchMove: e => {\n              handleTouchDrag(e, 1);\n            },\n            ref: cropCanvasRef,\n            style: {\n              padding: \"0px\",\n              margin: \"auto\",\n              cursor: \"pointer\",\n              overflow: 'hidden'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 15\n          }, this) : null, /*#__PURE__*/_jsxDEV(DoneIcon, {\n            ref: IconRef,\n            className: darkmodeReducer ? \"make-small-icons-clickable-darkab dontallowhighlighting zuperkingIcon \" : \"make-small-icons-clickable-lightab  dontallowhighlighting zuperkingIcon  \",\n            style: {\n              color: \"#ffffff\",\n              fontSize: \"3.1vw\",\n              position: \"absolute\",\n              opacity: 0.94,\n              left: '43%',\n              right: \"\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 408,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CropIcon, {\n            onClick: () => {\n              if (Box) {\n                setBox(false);\n              } else {\n                setBox(true);\n              }\n            },\n            ref: IconRef2,\n            className: darkmodeReducer ? \"make-small-icons-clickable-darkab dontallowhighlighting zuperkingIcon \" : \"make-small-icons-clickable-lightab  dontallowhighlighting zuperkingIcon  \",\n            style: {\n              color: \"#ffffff\",\n              fontSize: \"2.9vw\",\n              position: \"absolute\",\n              bottom: '5vh',\n              opacity: 0.94,\n              right: '43%'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(Taskbarx, \"nIytNe3xzB7WkYKxIWVCvS49fX8=\", false, function () {\n  return [useSelector, useSpring, useSelector];\n});\n\n_c = Taskbarx;\nexport const Taskbar = /*#__PURE__*/React.memo(Taskbarx);\n_c2 = Taskbar;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Taskbarx\");\n$RefreshReg$(_c2, \"Taskbar\");","map":{"version":3,"sources":["C:/Users/oghen/OneDrive/Documents/ClikBate/super/src/profile/Taskbar.tsx"],"names":["React","useRef","useState","useLayoutEffect","Grid","DialogContent","matchTablet","matchMobile","useSpring","animated","useSelector","DoneIcon","CropIcon","Taskbarx","showModalUploadTask","uploadClose","darkmode","state","GlobalReducer","darkmodeReducer","animation","config","duration","opacity","transform","padding","cropCanvasRef","navRef","IconRef","IconRef2","allowCropAllCanvas","setallowCropAllCanvas","CropImageHolder","setCropImageHolder","imageHeight","setimageHeight","imageWidth","setimageWidth","Box","setBox","cropInitial","setcropInitial","x","y","cropInitialx","setcropInitialx","cropOffset","setcropOffset","Drag","setDrag","crop","setcrop","allowscrolltimer","extendxy","allowOverflow","setallowOverflow","optionscropshow","setoptionscropshow","activatefilterImage","activatecropImage","selectedImage","cropimage","GlobalNavuploadReducer","activatefilterImageReducer","activatecropImageReducer","selectedImageReducer","cropimageReducer","resizeCanvas","imgAspectRatio","current","width","height","screenW","clientWidth","screenH","clientHeight","canvasW","canvasH","style","top","GiveImageSpecificDimensions","Newcropimage","naturalWidth","naturalHeight","Image","src","onload","ctx","getContext","w","h","drawImage","mouseover","type","handleTouchStart","e","clientX","clientY","touches","target","handleTouchEnd","clearTimeout","setTimeout","handleTouchDrag","xx","yy","maxX","maxY","maxYx","fz","ff","position","zIndex","cursor","overflow","margin","color","fontSize","left","right","bottom","Taskbar","memo"],"mappings":"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","sourcesContent":["import React, {\r\n  useRef,\r\n  useEffect,\r\n  useCallback,\r\n  useState,\r\n  useLayoutEffect,\r\n} from \"react\";\r\nimport ControlPointDuplicateIcon from \"@mui/icons-material/ControlPointDuplicate\";\r\nimport { Grid, Switch, DialogContent } from \"@material-ui/core\";\r\nimport { matchPc, matchTablet, matchMobile } from \"../DetectDevice\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport { OptionsSlider } from \"../profile/OptionsSlider\";\r\nimport { RootStateOrAny, useSelector, useDispatch } from \"react-redux\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport Axios from \"axios\";\r\nimport CheckIcon from \"@mui/icons-material/Check\";\r\nimport date from \"date-and-time\";\r\nimport { UserInfoUpdatePROFILE } from \"../log/actions/UserdataAction\";\r\nimport { UserInfoUpdateBILLBOARD } from \"../log/actions/UserdataAction\";\r\nimport { usePalette } from \"react-palette\";\r\nimport { UpdateColorAction } from \"../GlobalActions\";\r\nimport EditTwoToneIcon from \"@mui/icons-material/EditTwoTone\";\r\nimport DoneOutlineIcon from '@mui/icons-material/DoneOutline';\r\nimport DoneIcon from '@mui/icons-material/Done';\r\nimport CropIcon from '@mui/icons-material/Crop';\r\n\r\nfunction Taskbarx({\r\n  showModalUploadTask,\r\n  uploadClose,\r\n\r\n}: any): JSX.Element {\r\n\r\n\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// INTERFACE/TYPES FOR SCREENHEIGHT AND DARKMODE\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n      screenHeight: number;\r\n    };\r\n  }\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// GET DARKMODE FROM REDUX STORE\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n  const darkmodeReducer = darkmode;\r\n\r\n\r\n  const animation = useSpring({\r\n    config: {\r\n      duration: 600,\r\n    },\r\n    opacity: showModalUploadTask ? 1 : 0,\r\n    transform: showModalUploadTask ? `translateX(0%)` : `translateX(-100%)`,\r\n    padding: \"0px\",\r\n\r\n  });\r\n\r\n\r\n\r\n\r\n  const cropCanvasRef: any = useRef(null);\r\n\r\n  const navRef: any = useRef(null);\r\n\r\n  const IconRef: any = useRef(null);\r\n\r\n  const IconRef2: any = useRef(null);\r\n\r\n  const [allowCropAllCanvas, setallowCropAllCanvas] = useState<boolean>(true);\r\n\r\n  const [CropImageHolder, setCropImageHolder] = useState<any>(null);\r\n\r\n  const [imageHeight, setimageHeight] = useState(0);\r\n  const [imageWidth, setimageWidth] = useState(0);\r\n\r\n  const [Box, setBox] = useState<boolean>(false);\r\n\r\n\r\n  const [cropInitial, setcropInitial] = useState<any>({ x: 0, y: 0 });\r\n\r\n  const [cropInitialx, setcropInitialx] = useState<any>({ x: 0, y: 0 });\r\n\r\n  const [cropOffset, setcropOffset] = useState<any>({ x: 0, y: 0 });\r\n\r\n  const [Drag, setDrag] = useState<boolean>(false);\r\n\r\n  const [crop, setcrop] = useState<any>({ x: 0, y: 0 });\r\n\r\n  const allowscrolltimer = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n\r\n  var extendxy = 1;\r\n\r\n  const [allowOverflow, setallowOverflow] = useState<boolean>(false);\r\n\r\n  const [optionscropshow, setoptionscropshow] = useState<boolean>(false);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const { activatefilterImage, activatecropImage, selectedImage, cropimage } = useSelector(\r\n    (state: RootStateOrAny) => ({\r\n      ...state.GlobalNavuploadReducer,\r\n    })\r\n  );\r\n  const activatefilterImageReducer = activatefilterImage;\r\n  const activatecropImageReducer = activatecropImage;\r\n  const selectedImageReducer = selectedImage;\r\n  const cropimageReducer = cropimage;\r\n\r\n\r\n\r\n\r\n\r\n  function resizeCanvas() {\r\n    const imgAspectRatio = cropCanvasRef.current.width / cropCanvasRef.current.height;\r\n    var screenW = navRef.current.clientWidth;\r\n    var screenH = navRef.current.clientHeight;\r\n    let canvasW = screenW\r\n    let canvasH = screenH\r\n    if (imgAspectRatio <= 1.55) {\r\n      canvasH = screenH;\r\n      canvasW = canvasH * imgAspectRatio;\r\n    } else {\r\n      canvasW = screenW;\r\n      canvasH = canvasW / imgAspectRatio;\r\n    }\r\n    cropCanvasRef.current.style.height = `${canvasH}px`;\r\n    cropCanvasRef.current.style.width = `${canvasW}px`;\r\n\r\n    IconRef.current.style.top = `${canvasH / 1.18}px`;\r\n    IconRef2.current.style.top = `${canvasH / 1.18}px`;\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  function GiveImageSpecificDimensions(Newcropimage: any) {\r\n    const imgAspectRatio = Newcropimage.naturalWidth / Newcropimage.naturalHeight;\r\n    var canvasW;\r\n    var canvasH;\r\n    if (imgAspectRatio <= 1.55) {\r\n      var screenH = 1920;\r\n      canvasH = screenH\r\n      canvasH = screenH;\r\n      canvasW = canvasH * imgAspectRatio;\r\n    } else {\r\n      var screenW = 2048;\r\n      canvasW = screenW\r\n      canvasW = screenW;\r\n      canvasH = canvasW / imgAspectRatio;\r\n    }\r\n    setimageHeight(canvasH);\r\n    setimageWidth(canvasW);\r\n  }\r\n\r\n\r\n  useLayoutEffect(() => {\r\n    const Newcropimage: any = new Image();\r\n    Newcropimage.src = cropimageReducer;\r\n    Newcropimage.onload = function () {\r\n      if (CropImageHolder === Newcropimage) {\r\n      } else {\r\n        setCropImageHolder(Newcropimage);\r\n        GiveImageSpecificDimensions(Newcropimage);\r\n      }\r\n    }\r\n  }, [cropimageReducer]);\r\n\r\n\r\n\r\n  useLayoutEffect(() => {\r\n    if (CropImageHolder && cropCanvasRef.current) {\r\n      const ctx = cropCanvasRef.current.getContext(\"2d\");\r\n      const imgAspectRatio = imageWidth / imageHeight;\r\n      if (Box) {\r\n        if (imgAspectRatio <= 1.3) {\r\n          cropCanvasRef.current.width = imageWidth;\r\n          cropCanvasRef.current.height = imageWidth;\r\n        } else {\r\n          cropCanvasRef.current.width = imageHeight;\r\n          cropCanvasRef.current.height = imageHeight;\r\n        }\r\n      } else {\r\n        cropCanvasRef.current.width = imageWidth;\r\n        cropCanvasRef.current.height = imageHeight;\r\n      }\r\n      resizeCanvas();\r\n      const w = imageWidth;\r\n      const h = imageHeight;\r\n      ctx.drawImage(CropImageHolder, crop.x, crop.y, w, h);\r\n    }\r\n  }, [CropImageHolder, imageWidth, imageHeight, Box, crop])\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const mouseover = (type: number) => {\r\n    if (matchTablet || matchMobile) {\r\n      if (type === 1) {\r\n        if (allowOverflow) {\r\n        } else {\r\n          setallowOverflow(true);\r\n        }\r\n      } else {\r\n        if (allowOverflow) {\r\n          setallowOverflow(false);\r\n        } else {\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  const handleTouchStart = (e: any, type: any) => {\r\n    if (Box) {\r\n      mouseover(0);\r\n\r\n      setoptionscropshow(false);\r\n      if (type === 0) {\r\n        setcropInitial({\r\n          ...cropInitial,\r\n          x: e.clientX * extendxy - cropOffset.x,\r\n          y: e.clientY * extendxy - cropOffset.y,\r\n        });\r\n      } else {\r\n        setcropInitial({\r\n          ...cropInitial,\r\n          x: e.touches[0].clientX * extendxy - cropOffset.x,\r\n          y: e.touches[0].clientY * extendxy - cropOffset.y,\r\n        });\r\n      }\r\n      if (e.target) {\r\n        setDrag(true);\r\n      }\r\n    } else {\r\n      setBox(true);\r\n    }\r\n  };\r\n\r\n\r\n  const handleTouchEnd = () => {\r\n    if (allowscrolltimer.current) {\r\n      clearTimeout(allowscrolltimer.current);\r\n    }\r\n    allowscrolltimer.current = setTimeout(function () {\r\n      mouseover(1);\r\n    }, 1200);\r\n\r\n    setoptionscropshow(true);\r\n    setcropInitial({\r\n      ...cropInitial,\r\n      x: crop.x,\r\n      y: crop.y,\r\n    });\r\n    setDrag(false);\r\n  };\r\n\r\n\r\n  const handleTouchDrag = (e: any, type: any) => {\r\n    if (Drag) {\r\n      var xx;\r\n      var yy;\r\n\r\n\r\n      if (type === 0) {\r\n        xx = e.clientX * extendxy - cropInitial.x;\r\n        yy = e.clientY * extendxy - cropInitial.y;\r\n      } else {\r\n        xx = e.touches[0].clientX * extendxy - cropInitial.x;\r\n        yy = e.touches[0].clientY * extendxy - cropInitial.y;\r\n\r\n      }\r\n\r\n\r\n      const maxX = cropCanvasRef.current.clientWidth + xx;\r\n      const maxY = imageHeight - cropCanvasRef.current.clientHeight + yy;\r\n      const maxYx = cropCanvasRef.current.clientHeight + yy;\r\n\r\n\r\n      var fz = imageWidth - cropCanvasRef.current.width;\r\n      fz *= -1;\r\n      if (xx > 0) {\r\n        xx = 0;\r\n      } else if (xx < fz) {\r\n        xx = fz\r\n      }\r\n\r\n\r\n\r\n      var ff = imageHeight - cropCanvasRef.current.height;\r\n      ff *= -1;\r\n      if (yy > 0) {\r\n        yy = 0;\r\n      } else if (yy < ff) {\r\n        yy = ff\r\n      }\r\n\r\n\r\n\r\n      setcrop({\r\n        ...crop,\r\n\r\n      });\r\n      setcropOffset({\r\n        ...cropOffset,\r\n        x: xx,\r\n      });\r\n\r\n\r\n      setcrop({\r\n        ...crop,\r\n        x: xx,\r\n        y: yy,\r\n      });\r\n      setcropOffset({\r\n        ...cropOffset,\r\n        y: yy,\r\n      });\r\n\r\n\r\n\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <animated.div ref={navRef} className={darkmodeReducer ? 'modal-containerDark' : 'modal-containerLight'}\r\n\r\n        style={{\r\n          ...animation, width: '94%',\r\n          height: \"100vh\",\r\n          position: \"fixed\",\r\n          top: '-0vh',\r\n          zIndex: 100,\r\n          cursor: \"default\",\r\n          overflow: \"hidden\",\r\n        }}>\r\n        <DialogContent\r\n          style={{\r\n            padding: \"0px\",\r\n          }}>\r\n\r\n\r\n\r\n          <Grid\r\n            container\r\n            style={{\r\n              padding: \"0px\", width: '100%'\r\n            }}>\r\n            {crop.x}\r\n            {' '}\r\n            {cropCanvasRef.current ? cropCanvasRef.current.clientWidth : null}\r\n            {allowCropAllCanvas ? (\r\n\r\n              <canvas\r\n                onMouseOver={() => {\r\n                  mouseover(0);\r\n                }}\r\n                onMouseUp={(e: any) => {\r\n                  handleTouchEnd();\r\n                }}\r\n                onTouchEnd={(e: any) => {\r\n                  handleTouchEnd();\r\n                }}\r\n                onMouseDown={(e: any) => {\r\n                  handleTouchStart(e, 0);\r\n                }}\r\n                onTouchStart={(e: any) => {\r\n                  handleTouchStart(e, 1);\r\n                }}\r\n                onMouseMove={(e: any) => {\r\n                  handleTouchDrag(e, 0);\r\n                }}\r\n                onTouchMove={(e: any) => {\r\n                  handleTouchDrag(e, 1);\r\n                }}\r\n                ref={cropCanvasRef}\r\n                style={{\r\n                  padding: \"0px\",\r\n                  margin: \"auto\",\r\n                  cursor: \"pointer\",\r\n                  overflow: 'hidden'\r\n                }} />\r\n            ) : null}\r\n\r\n\r\n\r\n            <DoneIcon\r\n              ref={IconRef}\r\n              className={\r\n                darkmodeReducer\r\n                  ? \"make-small-icons-clickable-darkab dontallowhighlighting zuperkingIcon \"\r\n                  : \"make-small-icons-clickable-lightab  dontallowhighlighting zuperkingIcon  \"\r\n              }\r\n              style={{\r\n                color: \"#ffffff\",\r\n                fontSize: \"3.1vw\",\r\n                position: \"absolute\",\r\n                opacity: 0.94,\r\n                left: '43%',\r\n                right: \"\",\r\n              }}\r\n            />\r\n\r\n\r\n\r\n            <CropIcon\r\n              onClick={() => {\r\n                if (Box) {\r\n                  setBox(false);\r\n                } else {\r\n                  setBox(true);\r\n                }\r\n              }}\r\n\r\n              ref={IconRef2}\r\n              className={\r\n                darkmodeReducer\r\n                  ? \"make-small-icons-clickable-darkab dontallowhighlighting zuperkingIcon \"\r\n                  : \"make-small-icons-clickable-lightab  dontallowhighlighting zuperkingIcon  \"\r\n              }\r\n              style={{\r\n                color: \"#ffffff\",\r\n                fontSize: \"2.9vw\",\r\n                position: \"absolute\",\r\n                bottom: '5vh',\r\n                opacity: 0.94,\r\n                right: '43%',\r\n\r\n              }}\r\n            />\r\n\r\n          </Grid>\r\n\r\n        </DialogContent> </animated.div>\r\n\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport const Taskbar = React.memo(Taskbarx);\r\n"]},"metadata":{},"sourceType":"module"}