{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\upload\\\\UploadMenu.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { useSpring, animated } from \"react-spring\";\nimport { UpdateNavCropReducer } from \"../GlobalActions\";\nimport { CropUploadMode } from \"./CropUploadMode\";\nimport { FilterMode } from \"./FilterMode\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useFullScreenHandle } from \"react-full-screen\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction UploadMenux({\n  optionsShow,\n  optinstopshowingReducer,\n  typeTop,\n  closeoptionsslide,\n  animationop,\n  optionsCollectImageRef,\n  handleTouchStartOptions,\n  handleTouchMoveOptions,\n  modalanimation,\n  nextSlidePc,\n  optionsImages,\n  ActiveSlide,\n  optionsNameData,\n  clickOptions,\n  optionsClickType,\n  getSliderWidthNew,\n  cropTOPLEVELScrollRef,\n  refWithimageData,\n  CropSaved,\n  setCropSaved,\n  setallowOverflow,\n  closeUploadModal\n}) {\n  _s();\n\n  ///\n  ///\n  const dispatch = useDispatch();\n  const handle = useFullScreenHandle();\n  const [filterImage, setfilterImage] = useState([]);\n  const itemUploadRef = useRef([]);\n  const [ActivatefilterImage, setActivatefilterImage] = useState(false); ///\n  ///\n  ///\n  /// GET GLOBAL INNER NAVIGATION VARIABLE\n\n  const {\n    activatefilterImage\n  } = useSelector(state => ({ ...state.GlobalNavuploadReducer\n  }));\n  const activatefilterImageReducer = activatefilterImage;\n  const [selectedImage, setselectedImage] = useState([]); //\n  //\n  //\n  //USE SLIDE DOWN ANIMATION FROM REACT SPRING\n\n  const animation = useSpring({\n    config: {\n      duration: 200\n    },\n    opacity: activatefilterImageReducer ? 1 : 0\n  });\n  useEffect(() => {\n    if (activatefilterImageReducer) {\n      setallowOverflow(false);\n    } else {\n      setallowOverflow(true);\n    }\n  }, [activatefilterImageReducer]); ///\n\n  useEffect(() => {\n    dispatch(UpdateNavCropReducer(false));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(animated.div, {\n      style: { ...animation,\n        position: activatefilterImageReducer ? \"relative\" : \"fixed\",\n        top: activatefilterImageReducer ? \"\" : \"-2000vh\",\n        zIndex: activatefilterImageReducer ? 10 : 1,\n        padding: \"0px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(FilterMode, {\n        itemUploadRef: itemUploadRef,\n        filterImage: filterImage,\n        selectedImage: selectedImage,\n        ActivatefilterImage: ActivatefilterImage,\n        setActivatefilterImage: setActivatefilterImage,\n        getSliderWidthNew: getSliderWidthNew\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: activatefilterImageReducer ? \"fixed\" : \"relative\",\n        top: activatefilterImageReducer ? \"-2000vh\" : \"\",\n        zIndex: activatefilterImageReducer ? 1 : 10,\n        padding: \"0px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(CropUploadMode, {\n        closeUploadModalx: closeUploadModal,\n        itemUploadRef: itemUploadRef,\n        CropSaved: CropSaved,\n        ActiveSlide: ActiveSlide,\n        handleTouchStartOptions: handleTouchStartOptions,\n        handleTouchMoveOptions: handleTouchMoveOptions,\n        optionsCollectImageRef: optionsCollectImageRef,\n        modalanimation: modalanimation,\n        getSliderWidthNew: getSliderWidthNew,\n        optionsClickType: optionsClickType,\n        clickOptions: clickOptions,\n        optionsImages: optionsImages,\n        optionsNameData: optionsNameData,\n        cropTOPLEVELScrollRef: cropTOPLEVELScrollRef,\n        refWithimageData: refWithimageData,\n        filterImage: filterImage,\n        setfilterImage: setfilterImage,\n        setActivatefilterImage: setActivatefilterImage,\n        selectedImage: selectedImage,\n        setselectedImage: setselectedImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(UploadMenux, \"YB6L2wzn1AuZQtD6/RXqyeZavf8=\", false, function () {\n  return [useDispatch, useFullScreenHandle, useSelector, useSpring];\n});\n\n_c = UploadMenux;\nexport const UploadMenu = /*#__PURE__*/React.memo(UploadMenux);\n_c2 = UploadMenu;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"UploadMenux\");\n$RefreshReg$(_c2, \"UploadMenu\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/upload/UploadMenu.tsx"],"names":["React","useRef","useState","useEffect","useSpring","animated","UpdateNavCropReducer","CropUploadMode","FilterMode","useSelector","useDispatch","useFullScreenHandle","UploadMenux","optionsShow","optinstopshowingReducer","typeTop","closeoptionsslide","animationop","optionsCollectImageRef","handleTouchStartOptions","handleTouchMoveOptions","modalanimation","nextSlidePc","optionsImages","ActiveSlide","optionsNameData","clickOptions","optionsClickType","getSliderWidthNew","cropTOPLEVELScrollRef","refWithimageData","CropSaved","setCropSaved","setallowOverflow","closeUploadModal","dispatch","handle","filterImage","setfilterImage","itemUploadRef","ActivatefilterImage","setActivatefilterImage","activatefilterImage","state","GlobalNavuploadReducer","activatefilterImageReducer","selectedImage","setselectedImage","animation","config","duration","opacity","position","top","zIndex","padding","UploadMenu","memo"],"mappings":";;;AAAA,OAAOA,KAAP,IACEC,MADF,EAEEC,QAFF,EAIEC,SAJF,QAMO,OANP;AAUA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,cAApC;AAaA,SAASC,oBAAT,QAAqC,kBAArC;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAAyBC,WAAzB,EAAsCC,WAAtC,QAAyD,aAAzD;AACA,SAAqBC,mBAArB,QAAgD,mBAAhD;;;;AAEA,SAASC,WAAT,CAAqB;AACnBC,EAAAA,WADmB;AAEnBC,EAAAA,uBAFmB;AAGnBC,EAAAA,OAHmB;AAInBC,EAAAA,iBAJmB;AAKnBC,EAAAA,WALmB;AAMnBC,EAAAA,sBANmB;AAOnBC,EAAAA,uBAPmB;AAQnBC,EAAAA,sBARmB;AASnBC,EAAAA,cATmB;AAUnBC,EAAAA,WAVmB;AAWnBC,EAAAA,aAXmB;AAYnBC,EAAAA,WAZmB;AAanBC,EAAAA,eAbmB;AAcnBC,EAAAA,YAdmB;AAenBC,EAAAA,gBAfmB;AAgBnBC,EAAAA,iBAhBmB;AAiBnBC,EAAAA,qBAjBmB;AAkBnBC,EAAAA,gBAlBmB;AAmBnBC,EAAAA,SAnBmB;AAoBnBC,EAAAA,YApBmB;AAqBnBC,EAAAA,gBArBmB;AAsBnBC,EAAAA;AAtBmB,CAArB,EAuBqB;AAAA;;AACnB;AACA;AACA,QAAMC,QAAQ,GAAGzB,WAAW,EAA5B;AACA,QAAM0B,MAAM,GAAGzB,mBAAmB,EAAlC;AAEA,QAAM,CAAC0B,WAAD,EAAcC,cAAd,IAAgCpC,QAAQ,CAAa,EAAb,CAA9C;AAEA,QAAMqC,aAAa,GAAGtC,MAAM,CAAM,EAAN,CAA5B;AAEA,QAAM,CAACuC,mBAAD,EAAsBC,sBAAtB,IACJvC,QAAQ,CAAU,KAAV,CADV,CAVmB,CAanB;AACA;AACA;AACA;;AACA,QAAM;AAAEwC,IAAAA;AAAF,MAA0BjC,WAAW,CAAEkC,KAAD,KAA4B,EACtE,GAAGA,KAAK,CAACC;AAD6D,GAA5B,CAAD,CAA3C;AAIA,QAAMC,0BAA0B,GAAGH,mBAAnC;AAEA,QAAM,CAACI,aAAD,EAAgBC,gBAAhB,IAAoC7C,QAAQ,CAAa,EAAb,CAAlD,CAvBmB,CAyBnB;AACA;AACA;AACA;;AACA,QAAM8C,SAAS,GAAG5C,SAAS,CAAC;AAC1B6C,IAAAA,MAAM,EAAE;AACNC,MAAAA,QAAQ,EAAE;AADJ,KADkB;AAI1BC,IAAAA,OAAO,EAAEN,0BAA0B,GAAG,CAAH,GAAO;AAJhB,GAAD,CAA3B;AAOA1C,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI0C,0BAAJ,EAAgC;AAC9BZ,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACD,KAFD,MAEO;AACLA,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD;AACF,GANQ,EAMN,CAACY,0BAAD,CANM,CAAT,CApCmB,CA2CnB;;AAEA1C,EAAAA,SAAS,CAAC,MAAM;AACdgC,IAAAA,QAAQ,CAAC7B,oBAAoB,CAAC,KAAD,CAArB,CAAR;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE;AAAA,4BACE,QAAC,QAAD,CAAU,GAAV;AACE,MAAA,KAAK,EAAE,EACL,GAAG0C,SADE;AAELI,QAAAA,QAAQ,EAAEP,0BAA0B,GAAG,UAAH,GAAgB,OAF/C;AAGLQ,QAAAA,GAAG,EAAER,0BAA0B,GAAG,EAAH,GAAQ,SAHlC;AAILS,QAAAA,MAAM,EAAET,0BAA0B,GAAG,EAAH,GAAQ,CAJrC;AAKLU,QAAAA,OAAO,EAAE;AALJ,OADT;AAAA,6BASE,QAAC,UAAD;AACE,QAAA,aAAa,EAAEhB,aADjB;AAEE,QAAA,WAAW,EAAEF,WAFf;AAGE,QAAA,aAAa,EAAES,aAHjB;AAIE,QAAA,mBAAmB,EAAEN,mBAJvB;AAKE,QAAA,sBAAsB,EAAEC,sBAL1B;AAME,QAAA,iBAAiB,EAAEb;AANrB;AAAA;AAAA;AAAA;AAAA;AATF;AAAA;AAAA;AAAA;AAAA,YADF,eAoBE;AACE,MAAA,KAAK,EAAE;AACLwB,QAAAA,QAAQ,EAAEP,0BAA0B,GAAG,OAAH,GAAa,UAD5C;AAELQ,QAAAA,GAAG,EAAER,0BAA0B,GAAG,SAAH,GAAe,EAFzC;AAGLS,QAAAA,MAAM,EAAET,0BAA0B,GAAG,CAAH,GAAO,EAHpC;AAILU,QAAAA,OAAO,EAAE;AAJJ,OADT;AAAA,6BAQE,QAAC,cAAD;AACE,QAAA,iBAAiB,EAAErB,gBADrB;AAEE,QAAA,aAAa,EAAEK,aAFjB;AAGE,QAAA,SAAS,EAAER,SAHb;AAIE,QAAA,WAAW,EAAEP,WAJf;AAKE,QAAA,uBAAuB,EAAEL,uBAL3B;AAME,QAAA,sBAAsB,EAAEC,sBAN1B;AAOE,QAAA,sBAAsB,EAAEF,sBAP1B;AAQE,QAAA,cAAc,EAAEG,cARlB;AASE,QAAA,iBAAiB,EAAEO,iBATrB;AAUE,QAAA,gBAAgB,EAAED,gBAVpB;AAWE,QAAA,YAAY,EAAED,YAXhB;AAYE,QAAA,aAAa,EAAEH,aAZjB;AAaE,QAAA,eAAe,EAAEE,eAbnB;AAcE,QAAA,qBAAqB,EAAEI,qBAdzB;AAeE,QAAA,gBAAgB,EAAEC,gBAfpB;AAgBE,QAAA,WAAW,EAAEO,WAhBf;AAiBE,QAAA,cAAc,EAAEC,cAjBlB;AAkBE,QAAA,sBAAsB,EAAEG,sBAlB1B;AAmBE,QAAA,aAAa,EAAEK,aAnBjB;AAoBE,QAAA,gBAAgB,EAAEC;AApBpB;AAAA;AAAA;AAAA;AAAA;AARF;AAAA;AAAA;AAAA;AAAA,YApBF;AAAA,kBADF;AAsDD;;GA9HQnC,W;UA0BUF,W,EACFC,mB,EAaiBF,W,EAYdL,S;;;KApDXQ,W;AAgIT,OAAO,MAAM4C,UAAU,gBAAGxD,KAAK,CAACyD,IAAN,CAAW7C,WAAX,CAAnB;MAAM4C,U","sourcesContent":["import React, {\r\n  useRef,\r\n  useState,\r\n  useCallback,\r\n  useEffect,\r\n  useLayoutEffect,\r\n} from \"react\";\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport { SuperCrop } from \"./SuperCrop\";\r\nimport MusicNoteIcon from \"@mui/icons-material/MusicNote\";\r\nimport PhotoIcon from \"@mui/icons-material/Photo\";\r\nimport GifIcon from \"@mui/icons-material/Gif\";\r\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\r\nimport Axios from \"axios\";\r\nimport CropIcon from \"@mui/icons-material/Crop\";\r\nimport CheckIcon from \"@mui/icons-material/Check\";\r\nimport { PreviewCanvasCropAll } from \"./PreviewCanvasCropAll\";\r\nimport { PreviewCanvas } from \"./PreviewCanvas\";\r\nimport { UpdateNavCropReducer } from \"../GlobalActions\";\r\nimport { CropUploadMode } from \"./CropUploadMode\";\r\nimport { FilterMode } from \"./FilterMode\";\r\nimport { RootStateOrAny, useSelector, useDispatch } from \"react-redux\";\r\nimport { FullScreen, useFullScreenHandle } from \"react-full-screen\";\r\n\r\nfunction UploadMenux({\r\n  optionsShow,\r\n  optinstopshowingReducer,\r\n  typeTop,\r\n  closeoptionsslide,\r\n  animationop,\r\n  optionsCollectImageRef,\r\n  handleTouchStartOptions,\r\n  handleTouchMoveOptions,\r\n  modalanimation,\r\n  nextSlidePc,\r\n  optionsImages,\r\n  ActiveSlide,\r\n  optionsNameData,\r\n  clickOptions,\r\n  optionsClickType,\r\n  getSliderWidthNew,\r\n  cropTOPLEVELScrollRef,\r\n  refWithimageData,\r\n  CropSaved,\r\n  setCropSaved,\r\n  setallowOverflow,\r\n  closeUploadModal,\r\n}: any): JSX.Element {\r\n  ///\r\n  ///\r\n  const dispatch = useDispatch();\r\n  const handle = useFullScreenHandle();\r\n\r\n  const [filterImage, setfilterImage] = useState<Array<any>>([]);\r\n\r\n  const itemUploadRef = useRef<any>([]);\r\n\r\n  const [ActivatefilterImage, setActivatefilterImage] =\r\n    useState<boolean>(false);\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// GET GLOBAL INNER NAVIGATION VARIABLE\r\n  const { activatefilterImage } = useSelector((state: RootStateOrAny) => ({\r\n    ...state.GlobalNavuploadReducer,\r\n  }));\r\n\r\n  const activatefilterImageReducer = activatefilterImage;\r\n\r\n  const [selectedImage, setselectedImage] = useState<Array<any>>([]);\r\n\r\n  //\r\n  //\r\n  //\r\n  //USE SLIDE DOWN ANIMATION FROM REACT SPRING\r\n  const animation = useSpring({\r\n    config: {\r\n      duration: 200,\r\n    },\r\n    opacity: activatefilterImageReducer ? 1 : 0,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (activatefilterImageReducer) {\r\n      setallowOverflow(false);\r\n    } else {\r\n      setallowOverflow(true);\r\n    }\r\n  }, [activatefilterImageReducer]);\r\n  ///\r\n\r\n  useEffect(() => {\r\n    dispatch(UpdateNavCropReducer(false));\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <animated.div\r\n        style={{\r\n          ...animation,\r\n          position: activatefilterImageReducer ? \"relative\" : \"fixed\",\r\n          top: activatefilterImageReducer ? \"\" : \"-2000vh\",\r\n          zIndex: activatefilterImageReducer ? 10 : 1,\r\n          padding: \"0px\",\r\n        }}\r\n      >\r\n        <FilterMode\r\n          itemUploadRef={itemUploadRef}\r\n          filterImage={filterImage}\r\n          selectedImage={selectedImage}\r\n          ActivatefilterImage={ActivatefilterImage}\r\n          setActivatefilterImage={setActivatefilterImage}\r\n          getSliderWidthNew={getSliderWidthNew}\r\n        />\r\n      </animated.div>\r\n\r\n      <div\r\n        style={{\r\n          position: activatefilterImageReducer ? \"fixed\" : \"relative\",\r\n          top: activatefilterImageReducer ? \"-2000vh\" : \"\",\r\n          zIndex: activatefilterImageReducer ? 1 : 10,\r\n          padding: \"0px\",\r\n        }}\r\n      >\r\n        <CropUploadMode\r\n          closeUploadModalx={closeUploadModal}\r\n          itemUploadRef={itemUploadRef}\r\n          CropSaved={CropSaved}\r\n          ActiveSlide={ActiveSlide}\r\n          handleTouchStartOptions={handleTouchStartOptions}\r\n          handleTouchMoveOptions={handleTouchMoveOptions}\r\n          optionsCollectImageRef={optionsCollectImageRef}\r\n          modalanimation={modalanimation}\r\n          getSliderWidthNew={getSliderWidthNew}\r\n          optionsClickType={optionsClickType}\r\n          clickOptions={clickOptions}\r\n          optionsImages={optionsImages}\r\n          optionsNameData={optionsNameData}\r\n          cropTOPLEVELScrollRef={cropTOPLEVELScrollRef}\r\n          refWithimageData={refWithimageData}\r\n          filterImage={filterImage}\r\n          setfilterImage={setfilterImage}\r\n          setActivatefilterImage={setActivatefilterImage}\r\n          selectedImage={selectedImage}\r\n          setselectedImage={setselectedImage}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport const UploadMenu = React.memo(UploadMenux);\r\n"]},"metadata":{},"sourceType":"module"}