{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\upload\\\\ImageTobeFiltered.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ImageTobeFilteredx({\n  filterImage,\n  index,\n  itemUploadRef,\n  setActivatefilterImage\n}) {\n  _s();\n\n  ///\n  ///\n  ///\n  const filterbaseimageRef = useRef(null);\n  const canvasRef = useRef(null);\n  const canvasRefdummy = useRef(null);\n\n  const closegate = () => {\n    if (index === 0) {////\n      ///addfilter();\n    } else {\n      setActivatefilterImage(false);\n    }\n  };\n\n  function blend(background, foreground, width, height, transform) {\n    // Side note: grabbing this data is the most expensive piece. For better\n    // performance, you could consider caching this data\n    var bottom = background.getImageData(0, 0, width, height);\n    var top = foreground.getImageData(0, 0, width, height);\n\n    for (var i = 0, size = top.data.length; i < size; i += 4) {\n      // red\n      top.data[i + 0] = transform(bottom.data[i + 0], bottom.data[i + 0]); // green\n\n      top.data[i + 1] = transform(bottom.data[i + 1], top.data[i + 1]); // blue\n\n      top.data[i + 2] = transform(bottom.data[i + 2], top.data[i + 2]); // the fourth slot is alpha. We don't need that (so skip by 4)\n    }\n\n    return top;\n  }\n\n  function FilterGradient(width, height) {\n    ////////////gradientcolor\n    var ctx = canvasRefdummy.current.getContext(\"2d\");\n    canvasRefdummy.current.height = height;\n    canvasRefdummy.current.width = width; // Fill a Radial Gradient\n    // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createRadialGradient\n\n    var gradient = ctx.createRadialGradient(width / 2, height / 2, 0, width / 2, height / 2, width * 0.4);\n    gradient.addColorStop(0, \"rgba(145,70,101,1)\");\n    gradient.addColorStop(1, \"rgba(67, 43, 92,1)\");\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, width, height); ////////////gradientcolor\n\n    return ctx;\n  }\n\n  const ApplyImageFilter = type => {\n    //////////////////INITIALIZE  CANVAS\n    const previewFileReadimage = new Image();\n    previewFileReadimage.src = itemUploadRef.current[index].src;\n\n    previewFileReadimage.onload = function () {\n      const ctx = canvasRef.current.getContext(\"2d\");\n      var widthx = window.innerWidth / 2.5;\n      var scalex = widthx / previewFileReadimage.naturalWidth;\n      var heightx = previewFileReadimage.naturalHeight * scalex;\n      var width = window.innerWidth / 0.5;\n      var scale = width / previewFileReadimage.naturalWidth;\n      var height = previewFileReadimage.naturalHeight * scale;\n      canvasRef.current.height = height;\n      canvasRef.current.width = width; //////////////////INITIALIZE  CANVAS\n\n      requestAnimationFrame(() => {\n        //////////////////CSS EDIT IMAGE WITH CTX.FILTER\n        if (type === \"lift\") {\n          ctx.filter = \"contrast(1.3) brightness(1) blur(0px)\";\n        } else if (type === \"floyd\") {\n          ctx.filter = \"contrast(1.23) brightness(1.06)\";\n        } else {} //////////////////CSS EDIT IMAGE WITH CTX.FILTER\n\n\n        ctx.drawImage(previewFileReadimage, 0, 0, canvasRef.current.width, canvasRef.current.height); ////////////VIGNETTE\n\n        if (type === \"lift\") {\n          var w = canvasRef.current.width;\n          var h = canvasRef.current.height;\n          var gradient = ctx.createRadialGradient(w / 2, h / 3, 0, w / 2, h / 3, w * 1);\n          gradient.addColorStop(0, \"rgba(255, 255, 255,0.3)\");\n          gradient.addColorStop(1, \"rgba(000,000,000,0.45)\");\n          ctx.fillStyle = gradient;\n          ctx.fillRect(0, 0, width, height);\n        } ////////////VIGNETTE\n        ////////////////// /////// GLOBALCOMPOSITEOPERATION\n\n\n        if (type === \"lift\") {\n          ////////////composition\n          ctx.globalCompositeOperation = \"screen\";\n          ctx.fillStyle = \"rgba(100, 100, 100,0.07)\";\n          ctx.fillRect(0, 0, width, height); ////////////composition\n        } else if (type === \"floyd\") {\n          ////////////composition\n          ctx.globalCompositeOperation = \"overlay\";\n          ctx.fillStyle = \"rgba(97, 79, 77,1)\";\n          ctx.fillRect(0, 0, width, height); ////////////composition\n        } else {} ////////////////// /////// GLOBALCOMPOSITEOPERATION\n\n      });\n      canvasRef.current.style.width = `${widthx}px`;\n      canvasRef.current.style.height = `${heightx}px`;\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: itemUploadRef.current[index] ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          ApplyImageFilter(\"lift\");\n        },\n        children: \"lit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          ApplyImageFilter(\"floyd\");\n        },\n        children: [\" \", \"floyd\", \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \" jentle \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \" mint \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \" nebula \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        id: itemUploadRef.current[index],\n        ref: filterbaseimageRef,\n        onClick: closegate,\n        src: itemUploadRef.current ? itemUploadRef.current[index].src : null,\n        style: {\n          width: \"30%\",\n          height: \"auto\",\n          position: \"relative\",\n          margin: \"auto\",\n          marginRight: index === 0 ? \"20px\" : \"0px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        style: {\n          padding: \"0px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRefdummy,\n        style: {\n          padding: \"0px\",\n          display: \"none\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : null\n  }, void 0, false);\n}\n\n_s(ImageTobeFilteredx, \"ZWhJm1DdZVPEYmfxvg5uQgXY6wQ=\");\n\n_c = ImageTobeFilteredx;\nexport const ImageTobeFiltered = /*#__PURE__*/React.memo(ImageTobeFilteredx);\n_c2 = ImageTobeFiltered;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ImageTobeFilteredx\");\n$RefreshReg$(_c2, \"ImageTobeFiltered\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/upload/ImageTobeFiltered.tsx"],"names":["React","useRef","ImageTobeFilteredx","filterImage","index","itemUploadRef","setActivatefilterImage","filterbaseimageRef","canvasRef","canvasRefdummy","closegate","blend","background","foreground","width","height","transform","bottom","getImageData","top","i","size","data","length","FilterGradient","ctx","current","getContext","gradient","createRadialGradient","addColorStop","fillStyle","fillRect","ApplyImageFilter","type","previewFileReadimage","Image","src","onload","widthx","window","innerWidth","scalex","naturalWidth","heightx","naturalHeight","scale","requestAnimationFrame","filter","drawImage","w","h","globalCompositeOperation","style","position","margin","marginRight","padding","display","ImageTobeFiltered","memo"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from \"react\";\r\n\r\nfunction ImageTobeFilteredx({\r\n  filterImage,\r\n  index,\r\n  itemUploadRef,\r\n  setActivatefilterImage,\r\n}: any): JSX.Element {\r\n  ///\r\n  ///\r\n  ///\r\n  const filterbaseimageRef: any = useRef(null);\r\n\r\n  const canvasRef: any = useRef(null);\r\n\r\n  const canvasRefdummy: any = useRef(null);\r\n\r\n  const closegate = () => {\r\n    if (index === 0) {\r\n      ////\r\n      ///addfilter();\r\n    } else {\r\n      setActivatefilterImage(false);\r\n    }\r\n  };\r\n\r\n  function blend(\r\n    background: any,\r\n    foreground: any,\r\n    width: any,\r\n    height: any,\r\n    transform: any\r\n  ) {\r\n    // Side note: grabbing this data is the most expensive piece. For better\r\n    // performance, you could consider caching this data\r\n    var bottom = background.getImageData(0, 0, width, height);\r\n    var top = foreground.getImageData(0, 0, width, height);\r\n\r\n    for (var i = 0, size = top.data.length; i < size; i += 4) {\r\n      // red\r\n      top.data[i + 0] = transform(bottom.data[i + 0], bottom.data[i + 0]);\r\n      // green\r\n      top.data[i + 1] = transform(bottom.data[i + 1], top.data[i + 1]);\r\n      // blue\r\n      top.data[i + 2] = transform(bottom.data[i + 2], top.data[i + 2]);\r\n      // the fourth slot is alpha. We don't need that (so skip by 4)\r\n    }\r\n\r\n    return top;\r\n  }\r\n\r\n  function FilterGradient(width: any, height: any) {\r\n    ////////////gradientcolor\r\n    var ctx = canvasRefdummy.current.getContext(\"2d\");\r\n\r\n    canvasRefdummy.current.height = height;\r\n    canvasRefdummy.current.width = width;\r\n\r\n    // Fill a Radial Gradient\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createRadialGradient\r\n\r\n    var gradient = ctx.createRadialGradient(\r\n      width / 2,\r\n      height / 2,\r\n      0,\r\n      width / 2,\r\n      height / 2,\r\n      width * 0.4\r\n    );\r\n\r\n    gradient.addColorStop(0, \"rgba(145,70,101,1)\");\r\n    gradient.addColorStop(1, \"rgba(67, 43, 92,1)\");\r\n\r\n    ctx.fillStyle = gradient;\r\n    ctx.fillRect(0, 0, width, height);\r\n\r\n    ////////////gradientcolor\r\n    return ctx;\r\n  }\r\n\r\n  const ApplyImageFilter = (type: string) => {\r\n    //////////////////INITIALIZE  CANVAS\r\n    const previewFileReadimage = new Image();\r\n    previewFileReadimage.src = itemUploadRef.current[index].src;\r\n    previewFileReadimage.onload = function () {\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n      var widthx = window.innerWidth / 2.5;\r\n      var scalex = widthx / previewFileReadimage.naturalWidth;\r\n      var heightx = previewFileReadimage.naturalHeight * scalex;\r\n      var width = window.innerWidth / 0.5;\r\n      var scale = width / previewFileReadimage.naturalWidth;\r\n      var height = previewFileReadimage.naturalHeight * scale;\r\n      canvasRef.current.height = height;\r\n      canvasRef.current.width = width;\r\n      //////////////////INITIALIZE  CANVAS\r\n\r\n      requestAnimationFrame(() => {\r\n        //////////////////CSS EDIT IMAGE WITH CTX.FILTER\r\n        if (type === \"lift\") {\r\n          ctx.filter = \"contrast(1.3) brightness(1) blur(0px)\";\r\n        } else if (type === \"floyd\") {\r\n          ctx.filter = \"contrast(1.23) brightness(1.06)\";\r\n        } else {\r\n        }\r\n        //////////////////CSS EDIT IMAGE WITH CTX.FILTER\r\n        ctx.drawImage(\r\n          previewFileReadimage,\r\n          0,\r\n          0,\r\n          canvasRef.current.width,\r\n          canvasRef.current.height\r\n        );\r\n\r\n        ////////////VIGNETTE\r\n        if (type === \"lift\") {\r\n          var w = canvasRef.current.width;\r\n          var h = canvasRef.current.height;\r\n\r\n          var gradient = ctx.createRadialGradient(\r\n            w / 2,\r\n            h / 3,\r\n            0,\r\n            w / 2,\r\n            h / 3,\r\n            w * 1\r\n          );\r\n\r\n          gradient.addColorStop(0, \"rgba(255, 255, 255,0.3)\");\r\n          gradient.addColorStop(1, \"rgba(000,000,000,0.45)\");\r\n\r\n          ctx.fillStyle = gradient;\r\n          ctx.fillRect(0, 0, width, height);\r\n        }\r\n        ////////////VIGNETTE\r\n\r\n        ////////////////// /////// GLOBALCOMPOSITEOPERATION\r\n        if (type === \"lift\") {\r\n          ////////////composition\r\n          ctx.globalCompositeOperation = \"screen\";\r\n          ctx.fillStyle = \"rgba(100, 100, 100,0.07)\";\r\n          ctx.fillRect(0, 0, width, height);\r\n          ////////////composition\r\n        } else if (type === \"floyd\") {\r\n          ////////////composition\r\n          ctx.globalCompositeOperation = \"overlay\";\r\n          ctx.fillStyle = \"rgba(97, 79, 77,1)\";\r\n          ctx.fillRect(0, 0, width, height);\r\n          ////////////composition\r\n        } else {\r\n        }\r\n        ////////////////// /////// GLOBALCOMPOSITEOPERATION\r\n      });\r\n\r\n      canvasRef.current.style.width = `${widthx}px`;\r\n      canvasRef.current.style.height = `${heightx}px`;\r\n    };\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {itemUploadRef.current[index] ? (\r\n        <>\r\n          {\" \"}\r\n          <button\r\n            onClick={() => {\r\n              ApplyImageFilter(\"lift\");\r\n            }}\r\n          >\r\n            lit\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              ApplyImageFilter(\"floyd\");\r\n            }}\r\n          >\r\n            {\" \"}\r\n            floyd{\" \"}\r\n          </button>\r\n          <button> jentle </button>\r\n          <button> mint </button>\r\n          <button> nebula </button>\r\n          <img\r\n            id={itemUploadRef.current[index]}\r\n            ref={filterbaseimageRef}\r\n            onClick={closegate}\r\n            src={\r\n              itemUploadRef.current ? itemUploadRef.current[index].src : null\r\n            }\r\n            style={{\r\n              width: \"30%\",\r\n              height: \"auto\",\r\n              position: \"relative\",\r\n              margin: \"auto\",\r\n              marginRight: index === 0 ? \"20px\" : \"0px\",\r\n            }}\r\n          />\r\n          <canvas\r\n            ref={canvasRef}\r\n            style={{\r\n              padding: \"0px\",\r\n            }}\r\n          />\r\n          <canvas\r\n            ref={canvasRefdummy}\r\n            style={{\r\n              padding: \"0px\",\r\n              display: \"none\",\r\n            }}\r\n          />\r\n        </>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport const ImageTobeFiltered = React.memo(ImageTobeFilteredx);\r\n"]},"metadata":{},"sourceType":"module"}