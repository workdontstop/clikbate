{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\upload\\\\PreviewCanvas.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction PreviewCanvasx({\n  cropCanvasRef,\n  image,\n  getpreviewFixedWidth,\n  index,\n  CropImageHolder,\n  zoom,\n  cropheight,\n  cropwidth\n}) {\n  _s();\n\n  ///\n  ///\n  ///DARKMODE FROM REDUX\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const canvasRef = useRef(null);\n  const [previewFilehold, setpreviewFilehold] = useState(null);\n  const [previewCSSHeight, setpreviewCSSHeight] = useState(null);\n  const [cropCanvasWidth, setcropCanvasWidth] = useState(null);\n  const [cropCanvasHeight, setcropCanvasHeight] = useState(null);\n  const [imageWidthWithAspectRatio, setimageWidthWithAspectRatio] = useState(null);\n  const [imageWidthWithAspectRatioxx, setimageWidthWithAspectRatioxx] = useState(null);\n  useEffect(() => {\n    const previewFileReadimage = new Image();\n    previewFileReadimage.src = image;\n\n    previewFileReadimage.onload = function () {\n      setpreviewFilehold(previewFileReadimage);\n\n      if (CropImageHolder) {\n        setcropCanvasWidth(cropCanvasRef.current.width * 1.5);\n        setcropCanvasHeight(cropCanvasRef.current.height * 1.5);\n      } else {\n        setcropCanvasWidth(previewFileReadimage.naturalWidth * 1.5);\n        setcropCanvasHeight(previewFileReadimage.naturalHeight * 1.5);\n      }\n\n      let CropAspectRatio = cropwidth / cropheight;\n      let newheight = getpreviewFixedWidth / CropAspectRatio;\n      setpreviewCSSHeight(newheight);\n      let AspectRatioPrevHeightandWidth = previewFileReadimage.naturalHeight / previewFileReadimage.naturalWidth;\n      let newWidth = cropCanvasHeight / AspectRatioPrevHeightandWidth;\n      setimageWidthWithAspectRatio(newWidth);\n      let AspectRatioPrevHeightandWidthx = cropCanvasWidth / cropCanvasHeight;\n      let newWidthx = getpreviewFixedWidth / AspectRatioPrevHeightandWidthx;\n      setimageWidthWithAspectRatioxx(newWidthx);\n    };\n  }, [image, previewCSSHeight, getpreviewFixedWidth, cropCanvasRef, CropImageHolder, cropwidth, cropheight]);\n  useEffect(() => {\n    if (previewFilehold && canvasRef.current) {\n      const ctx = canvasRef.current.getContext(\"2d\");\n      let AspectRatioPrevHeightandWidthxr = cropCanvasHeight / cropCanvasWidth;\n      let newWidthxr = previewFilehold.naturalHeight / AspectRatioPrevHeightandWidthxr;\n      canvasRef.current.height = cropCanvasHeight * zoom;\n      canvasRef.current.width = cropCanvasWidth * zoom;\n      var xtraZoom = cropCanvasWidth / imageWidthWithAspectRatio;\n      var centerpreview = canvasRef.current.width / 2 - imageWidthWithAspectRatio * zoom / 2;\n      var centerpreview2 = canvasRef.current.height / 3 - cropCanvasHeight * zoom * xtraZoom / 3;\n      let AspectRatioPrevHeightandWidthx = cropCanvasWidth / cropCanvasHeight;\n      let newWidthx = getpreviewFixedWidth / AspectRatioPrevHeightandWidthx;\n      setimageWidthWithAspectRatioxx(newWidthx);\n      ctx.drawImage(previewFilehold, 0, 0, cropCanvasWidth * zoom, previewFilehold.naturalHeight);\n    }\n  }, [previewFilehold, canvasRef, CropImageHolder, imageWidthWithAspectRatio]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      className: darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\",\n      ref: canvasRef,\n      style: {\n        padding: \"0px\",\n        marginTop: index === 0 || index === 1 || index === 2 ? \"0px\" : \"-5px\"\n      }\n    }, image, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(PreviewCanvasx, \"vqIYrmO8XcrG42JgmRxD6mXj/N8=\", false, function () {\n  return [useSelector];\n});\n\n_c = PreviewCanvasx;\nexport const PreviewCanvas = /*#__PURE__*/React.memo(PreviewCanvasx);\n_c2 = PreviewCanvas;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PreviewCanvasx\");\n$RefreshReg$(_c2, \"PreviewCanvas\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/upload/PreviewCanvas.tsx"],"names":["React","useRef","useState","useEffect","useSelector","PreviewCanvasx","cropCanvasRef","image","getpreviewFixedWidth","index","CropImageHolder","zoom","cropheight","cropwidth","darkmode","state","GlobalReducer","darkmodeReducer","canvasRef","previewFilehold","setpreviewFilehold","previewCSSHeight","setpreviewCSSHeight","cropCanvasWidth","setcropCanvasWidth","cropCanvasHeight","setcropCanvasHeight","imageWidthWithAspectRatio","setimageWidthWithAspectRatio","imageWidthWithAspectRatioxx","setimageWidthWithAspectRatioxx","previewFileReadimage","Image","src","onload","current","width","height","naturalWidth","naturalHeight","CropAspectRatio","newheight","AspectRatioPrevHeightandWidth","newWidth","AspectRatioPrevHeightandWidthx","newWidthx","ctx","getContext","AspectRatioPrevHeightandWidthxr","newWidthxr","xtraZoom","centerpreview","centerpreview2","drawImage","padding","marginTop","PreviewCanvas","memo"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport Cropper from \"react-easy-crop\";\r\nimport MusicNoteIcon from \"@mui/icons-material/MusicNote\";\r\nimport PhotoIcon from \"@mui/icons-material/Photo\";\r\nimport GifIcon from \"@mui/icons-material/Gif\";\r\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\r\nimport Slider from \"@mui/material/Slider\";\r\nimport { AnySoaRecord } from \"dns\";\r\n\r\nfunction PreviewCanvasx({\r\n  cropCanvasRef,\r\n  image,\r\n  getpreviewFixedWidth,\r\n  index,\r\n  CropImageHolder,\r\n  zoom,\r\n  cropheight,\r\n  cropwidth,\r\n}: any): JSX.Element {\r\n  ///\r\n  ///\r\n  ///DARKMODE FROM REDUX\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n\r\n  const darkmodeReducer = darkmode;\r\n\r\n  const canvasRef: any = useRef(null);\r\n\r\n  const [previewFilehold, setpreviewFilehold] = useState<any>(null);\r\n\r\n  const [previewCSSHeight, setpreviewCSSHeight] = useState<any>(null);\r\n\r\n  const [cropCanvasWidth, setcropCanvasWidth] = useState<any>(null);\r\n\r\n  const [cropCanvasHeight, setcropCanvasHeight] = useState<any>(null);\r\n\r\n  const [imageWidthWithAspectRatio, setimageWidthWithAspectRatio] =\r\n    useState<any>(null);\r\n\r\n  const [imageWidthWithAspectRatioxx, setimageWidthWithAspectRatioxx] =\r\n    useState<any>(null);\r\n\r\n  useEffect(() => {\r\n    const previewFileReadimage = new Image();\r\n    previewFileReadimage.src = image;\r\n    previewFileReadimage.onload = function () {\r\n      setpreviewFilehold(previewFileReadimage);\r\n\r\n      if (CropImageHolder) {\r\n        setcropCanvasWidth(cropCanvasRef.current.width * 1.5);\r\n        setcropCanvasHeight(cropCanvasRef.current.height * 1.5);\r\n      } else {\r\n        setcropCanvasWidth(previewFileReadimage.naturalWidth * 1.5);\r\n        setcropCanvasHeight(previewFileReadimage.naturalHeight * 1.5);\r\n      }\r\n\r\n      let CropAspectRatio = cropwidth / cropheight;\r\n      let newheight = getpreviewFixedWidth / CropAspectRatio;\r\n      setpreviewCSSHeight(newheight);\r\n\r\n      let AspectRatioPrevHeightandWidth =\r\n        previewFileReadimage.naturalHeight / previewFileReadimage.naturalWidth;\r\n      let newWidth = cropCanvasHeight / AspectRatioPrevHeightandWidth;\r\n      setimageWidthWithAspectRatio(newWidth);\r\n\r\n      let AspectRatioPrevHeightandWidthx = cropCanvasWidth / cropCanvasHeight;\r\n      let newWidthx = getpreviewFixedWidth / AspectRatioPrevHeightandWidthx;\r\n      setimageWidthWithAspectRatioxx(newWidthx);\r\n    };\r\n  }, [\r\n    image,\r\n    previewCSSHeight,\r\n    getpreviewFixedWidth,\r\n    cropCanvasRef,\r\n    CropImageHolder,\r\n    cropwidth,\r\n    cropheight,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (previewFilehold && canvasRef.current) {\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n\r\n      let AspectRatioPrevHeightandWidthxr = cropCanvasHeight / cropCanvasWidth;\r\n      let newWidthxr =\r\n        previewFilehold.naturalHeight / AspectRatioPrevHeightandWidthxr;\r\n\r\n      canvasRef.current.height = cropCanvasHeight * zoom;\r\n      canvasRef.current.width = cropCanvasWidth * zoom;\r\n\r\n      var xtraZoom = cropCanvasWidth / imageWidthWithAspectRatio;\r\n\r\n      var centerpreview =\r\n        canvasRef.current.width / 2 - (imageWidthWithAspectRatio * zoom) / 2;\r\n\r\n      var centerpreview2 =\r\n        canvasRef.current.height / 3 - (cropCanvasHeight * zoom * xtraZoom) / 3;\r\n\r\n      let AspectRatioPrevHeightandWidthx = cropCanvasWidth / cropCanvasHeight;\r\n      let newWidthx = getpreviewFixedWidth / AspectRatioPrevHeightandWidthx;\r\n      setimageWidthWithAspectRatioxx(newWidthx);\r\n\r\n      ctx.drawImage(\r\n        previewFilehold,\r\n        0,\r\n        0,\r\n        cropCanvasWidth * zoom,\r\n        previewFilehold.naturalHeight\r\n      );\r\n    }\r\n  }, [previewFilehold, canvasRef, CropImageHolder, imageWidthWithAspectRatio]);\r\n\r\n  return (\r\n    <>\r\n      <canvas\r\n        className={darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\"}\r\n        ref={canvasRef}\r\n        key={image}\r\n        style={{\r\n          padding: \"0px\",\r\n          marginTop: index === 0 || index === 1 || index === 2 ? \"0px\" : \"-5px\",\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport const PreviewCanvas = React.memo(PreviewCanvasx);\r\n"]},"metadata":{},"sourceType":"module"}