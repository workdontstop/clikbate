{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\upload\\\\FilterMode.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from \"react\";\nimport { ImageTobeFiltered } from \"./ImageTobeFiltered\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction FilterModex({\n  filterImage,\n  selectedImage\n}) {\n  _s();\n\n  const postFilterItemsRef = useRef([]); ///\n  ///\n  ///\n  ///CREATE REFS FROM POSTS AND ADD THEM TO ARRAY\n\n  const addfilterbaseimageRef = itemsRef => {\n    if (itemsRef && !postFilterItemsRef.current.includes(itemsRef)) {\n      postFilterItemsRef.current.push(itemsRef);\n    } ////console.log(postItemsRef.current[1]);\n\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: selectedImage.map(index => {\n      return /*#__PURE__*/_jsxDEV(ImageTobeFiltered, {\n        filterImage: filterImage[index],\n        index: index\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false);\n}\n\n_s(FilterModex, \"98Elj32lubN6wmvbzXtvP4bR4kA=\");\n\n_c = FilterModex;\nexport const FilterMode = /*#__PURE__*/React.memo(FilterModex);\n_c2 = FilterMode;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FilterModex\");\n$RefreshReg$(_c2, \"FilterMode\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/upload/FilterMode.tsx"],"names":["React","useRef","ImageTobeFiltered","FilterModex","filterImage","selectedImage","postFilterItemsRef","addfilterbaseimageRef","itemsRef","current","includes","push","map","index","FilterMode","memo"],"mappings":";;;AAAA,OAAOA,KAAP,IACEC,MADF,QAMO,OANP;AAuBA,SAASC,iBAAT,QAAkC,qBAAlC;;;;AAEA,SAASC,WAAT,CAAqB;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAArB,EAAuE;AAAA;;AACrE,QAAMC,kBAAkB,GAAGL,MAAM,CAAM,EAAN,CAAjC,CADqE,CAErE;AACA;AACA;AACA;;AACA,QAAMM,qBAAqB,GAAIC,QAAD,IAAmB;AAC/C,QAAIA,QAAQ,IAAI,CAACF,kBAAkB,CAACG,OAAnB,CAA2BC,QAA3B,CAAoCF,QAApC,CAAjB,EAAgE;AAC9DF,MAAAA,kBAAkB,CAACG,OAAnB,CAA2BE,IAA3B,CAAgCH,QAAhC;AACD,KAH8C,CAI/C;;AACD,GALD;;AAOA,sBACE;AAAA,cACGH,aAAa,CAACO,GAAd,CAAmBC,KAAD,IAAgB;AACjC,0BACE,QAAC,iBAAD;AAEE,QAAA,WAAW,EAAET,WAAW,CAACS,KAAD,CAF1B;AAGE,QAAA,KAAK,EAAEA;AAHT,SACOA,KADP;AAAA;AAAA;AAAA;AAAA,cADF;AAOD,KARA;AADH,mBADF;AAaD;;GA1BQV,W;;KAAAA,W;AA4BT,OAAO,MAAMW,UAAU,gBAAGd,KAAK,CAACe,IAAN,CAAWZ,WAAX,CAAnB;MAAMW,U","sourcesContent":["import React, {\r\n  useRef,\r\n  useState,\r\n  useCallback,\r\n  useEffect,\r\n  useLayoutEffect,\r\n} from \"react\";\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport { SuperCrop } from \"./SuperCrop\";\r\nimport MusicNoteIcon from \"@mui/icons-material/MusicNote\";\r\nimport PhotoIcon from \"@mui/icons-material/Photo\";\r\nimport GifIcon from \"@mui/icons-material/Gif\";\r\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\r\nimport Axios from \"axios\";\r\nimport CropIcon from \"@mui/icons-material/Crop\";\r\nimport CheckIcon from \"@mui/icons-material/Check\";\r\nimport { PreviewCanvasCropAll } from \"./PreviewCanvasCropAll\";\r\nimport { ImageTobeFiltered } from \"./ImageTobeFiltered\";\r\n\r\nfunction FilterModex({ filterImage, selectedImage }: any): JSX.Element {\r\n  const postFilterItemsRef = useRef<any>([]);\r\n  ///\r\n  ///\r\n  ///\r\n  ///CREATE REFS FROM POSTS AND ADD THEM TO ARRAY\r\n  const addfilterbaseimageRef = (itemsRef: any) => {\r\n    if (itemsRef && !postFilterItemsRef.current.includes(itemsRef)) {\r\n      postFilterItemsRef.current.push(itemsRef);\r\n    }\r\n    ////console.log(postItemsRef.current[1]);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedImage.map((index: any) => {\r\n        return (\r\n          <ImageTobeFiltered\r\n            key={index}\r\n            filterImage={filterImage[index]}\r\n            index={index}\r\n          />\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n}\r\n\r\nexport const FilterMode = React.memo(FilterModex);\r\n"]},"metadata":{},"sourceType":"module"}