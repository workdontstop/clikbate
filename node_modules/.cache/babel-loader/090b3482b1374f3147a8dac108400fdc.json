{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oghen\\\\OneDrive\\\\Documents\\\\ClikBate\\\\super\\\\src\\\\log\\\\ServerError.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { animated, useSpring } from \"react-spring\";\nimport { Grid, DialogContent } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport \"./logCss.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ServerErrorx({\n  device,\n  serverEmojiplain,\n  setServerErrorData,\n  serverErrorDisplay,\n  serverErrorData\n}) {\n  _s();\n\n  ///\n  ///\n  ///\n  /// GET DARKMODE FROM REDUX STORE\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode; ///\n  ///\n  ///\n  ///USE SLIDE DOWN ANIMATION FROM REACT SPRING SERVER ERROR\n\n  const serverErrorAnimation = useSpring({\n    config: {\n      duration: 500\n    },\n    opacity: serverErrorDisplay,\n    transform: serverErrorData ? `translateY(0%)` : `translateY(-100%)`\n  });\n  var ErrorColor = \"\";\n  var Backtype = \"\";\n  var textback = \"\";\n  var severerrorData = \"\";\n  var severerrorEmoji = \"\";\n  var severerrorEmojiLeft = \"\";\n\n  if (device === \"pc\") {\n    severerrorData = \"1.25vw\";\n    severerrorEmoji = \"1.6vw\";\n    severerrorEmojiLeft = \"\";\n  } else if (device === \"mobile\") {\n    severerrorData = \"2.2vh\";\n    severerrorEmoji = \"2.7vh\";\n    severerrorEmojiLeft = \"4vw\";\n  } else {}\n\n  if (darkmodeReducer) {\n    ErrorColor = \"rgb(34, 34, 34, 0.05)\";\n    textback = \"caption-dark\";\n  } else {\n    ErrorColor = \"rgb(238, 238, 238 0.09)\";\n    textback = \"caption-light\";\n  }\n\n  darkmodeReducer ? Backtype = \"error-background-dark\" : Backtype = \"error-background-light\";\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(DialogContent, {\n      onClick: () => setServerErrorData(null),\n      style: {\n        height: \"8%\",\n        position: \"fixed\"\n      },\n      className: serverErrorData ? ` dontallowhighlighting ${Backtype} server-error` : `display-off`,\n      children: /*#__PURE__*/_jsxDEV(animated.div, {\n        style: serverErrorAnimation,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          className: \"server-error-container\",\n          style: {\n            backgroundColor: ErrorColor\n          },\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            className: \"server-error-inner\",\n            style: {},\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              className: \"sever-error-data\",\n              style: {\n                fontSize: severerrorData,\n                paddingLeft: \"1px\"\n              },\n              xs: 11,\n              sm: 10,\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  color: darkmodeReducer ? \"#ffffff\" : \"#0b1728\"\n                },\n                className: textback,\n                children: serverErrorData\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              className: serverEmojiplain ? \"display-on server-error-emoji\" : \"display-off\",\n              xs: 1,\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"server-error-emoji-span\",\n                style: {\n                  fontSize: severerrorEmoji,\n                  marginLeft: severerrorEmojiLeft\n                },\n                children: \"\\uD83D\\uDE05\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              className: serverEmojiplain ? \"display-off\" : \"display-on server-error-emoji\",\n              xs: 1,\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"server-error-emoji-span\",\n                style: {\n                  fontSize: severerrorEmoji,\n                  marginLeft: severerrorEmojiLeft\n                },\n                children: \"\\uD83D\\uDE1F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(ServerErrorx, \"y9+rB48P+BdEeUT+HPHKnYcIZNo=\", false, function () {\n  return [useSelector, useSpring];\n});\n\n_c = ServerErrorx;\nexport const ServerError = /*#__PURE__*/React.memo(ServerErrorx);\n_c2 = ServerError;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ServerErrorx\");\n$RefreshReg$(_c2, \"ServerError\");","map":{"version":3,"sources":["C:/Users/oghen/OneDrive/Documents/ClikBate/super/src/log/ServerError.tsx"],"names":["React","animated","useSpring","Grid","DialogContent","useSelector","ServerErrorx","device","serverEmojiplain","setServerErrorData","serverErrorDisplay","serverErrorData","darkmode","state","GlobalReducer","darkmodeReducer","serverErrorAnimation","config","duration","opacity","transform","ErrorColor","Backtype","textback","severerrorData","severerrorEmoji","severerrorEmojiLeft","height","position","backgroundColor","fontSize","paddingLeft","color","marginLeft","ServerError","memo"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { animated, useSpring } from \"react-spring\";\r\nimport { Grid, DialogContent } from \"@material-ui/core\";\r\nimport { IServerError } from \"./log-Interfaces\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"./logCss.css\";\r\nfunction ServerErrorx({\r\n  device,\r\n  serverEmojiplain,\r\n  setServerErrorData,\r\n  serverErrorDisplay,\r\n  serverErrorData,\r\n}: IServerError) {\r\n  ///\r\n  ///\r\n  ///\r\n  /// GET DARKMODE FROM REDUX STORE\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n\r\n  const darkmodeReducer = darkmode;\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  ///USE SLIDE DOWN ANIMATION FROM REACT SPRING SERVER ERROR\r\n  const serverErrorAnimation = useSpring({\r\n    config: {\r\n      duration: 500,\r\n    },\r\n    opacity: serverErrorDisplay,\r\n    transform: serverErrorData ? `translateY(0%)` : `translateY(-100%)`,\r\n  });\r\n\r\n  var ErrorColor = \"\";\r\n\r\n  var Backtype = \"\";\r\n  var textback = \"\";\r\n\r\n  var severerrorData = \"\";\r\n  var severerrorEmoji = \"\";\r\n  var severerrorEmojiLeft = \"\";\r\n\r\n  if (device === \"pc\") {\r\n    severerrorData = \"1.25vw\";\r\n    severerrorEmoji = \"1.6vw\";\r\n    severerrorEmojiLeft = \"\";\r\n  } else if (device === \"mobile\") {\r\n    severerrorData = \"2.2vh\";\r\n    severerrorEmoji = \"2.7vh\";\r\n    severerrorEmojiLeft = \"4vw\";\r\n  } else {\r\n  }\r\n\r\n  if (darkmodeReducer) {\r\n    ErrorColor = \"rgb(34, 34, 34, 0.05)\";\r\n    textback = \"caption-dark\";\r\n  } else {\r\n    ErrorColor = \"rgb(238, 238, 238 0.09)\";\r\n    textback = \"caption-light\";\r\n  }\r\n\r\n  darkmodeReducer\r\n    ? (Backtype = \"error-background-dark\")\r\n    : (Backtype = \"error-background-light\");\r\n\r\n  return (\r\n    <>\r\n      <DialogContent\r\n        onClick={() => setServerErrorData(null)}\r\n        style={{ height: \"8%\", position: \"fixed\" }}\r\n        className={\r\n          serverErrorData\r\n            ? ` dontallowhighlighting ${Backtype} server-error`\r\n            : `display-off`\r\n        }\r\n      >\r\n        <animated.div style={serverErrorAnimation}>\r\n          <Grid\r\n            container\r\n            className=\"server-error-container\"\r\n            style={{\r\n              backgroundColor: ErrorColor,\r\n            }}\r\n          >\r\n            <Grid item xs={12} className=\"server-error-inner\" style={{}}>\r\n              <Grid\r\n                item\r\n                className=\"sever-error-data\"\r\n                style={{\r\n                  fontSize: severerrorData,\r\n                  paddingLeft: \"1px\",\r\n                }}\r\n                xs={11}\r\n                sm={10}\r\n              >\r\n                <span\r\n                  style={{\r\n                    color: darkmodeReducer ? \"#ffffff\" : \"#0b1728\",\r\n                  }}\r\n                  className={textback}\r\n                >\r\n                  {serverErrorData}\r\n                </span>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                className={\r\n                  serverEmojiplain\r\n                    ? \"display-on server-error-emoji\"\r\n                    : \"display-off\"\r\n                }\r\n                xs={1}\r\n              >\r\n                <span\r\n                  className=\"server-error-emoji-span\"\r\n                  style={{\r\n                    fontSize: severerrorEmoji,\r\n                    marginLeft: severerrorEmojiLeft,\r\n                  }}\r\n                >\r\n                  &#128517;\r\n                </span>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                className={\r\n                  serverEmojiplain\r\n                    ? \"display-off\"\r\n                    : \"display-on server-error-emoji\"\r\n                }\r\n                xs={1}\r\n              >\r\n                <span\r\n                  className=\"server-error-emoji-span\"\r\n                  style={{\r\n                    fontSize: severerrorEmoji,\r\n                    marginLeft: severerrorEmojiLeft,\r\n                  }}\r\n                >\r\n                  &#128543;\r\n                </span>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </animated.div>\r\n      </DialogContent>\r\n    </>\r\n  );\r\n}\r\n\r\nexport const ServerError = React.memo(ServerErrorx);\r\n"]},"metadata":{},"sourceType":"module"}