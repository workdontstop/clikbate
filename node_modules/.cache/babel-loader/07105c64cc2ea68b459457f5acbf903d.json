{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oghen\\\\OneDrive\\\\Documents\\\\ClikBate\\\\super\\\\src\\\\profile\\\\Taskbar.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useLayoutEffect } from \"react\";\nimport { Grid, DialogContent } from \"@material-ui/core\";\nimport { useSpring, animated } from \"react-spring\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Taskbarx({\n  showModalUploadTask,\n  uploadClose\n}) {\n  _s();\n\n  const animation = useSpring({\n    config: {\n      duration: 600\n    },\n    opacity: showModalUploadTask ? 1 : 0,\n    transform: showModalUploadTask ? `translateX(0%)` : `translateX(-100%)`,\n    padding: \"0px\"\n  });\n  const cropCanvasRef = useRef(null);\n  const [allowCropAllCanvas, setallowCropAllCanvas] = useState(true);\n  const [CropImageHolder, setCropImageHolder] = useState(null);\n  const {\n    activatefilterImage,\n    activatecropImage,\n    selectedImage,\n    cropimage\n  } = useSelector(state => ({ ...state.GlobalNavuploadReducer\n  }));\n  const activatefilterImageReducer = activatefilterImage;\n  const activatecropImageReducer = activatecropImage;\n  const selectedImageReducer = selectedImage;\n  const cropimageReducer = cropimage;\n  useLayoutEffect(() => {\n    const Newcropimage = new Image();\n    Newcropimage.src = cropimageReducer;\n\n    Newcropimage.onload = function () {\n      if (CropImageHolder === Newcropimage) {} else {\n        setCropImageHolder(Newcropimage);\n      }\n    };\n  }, [cropimageReducer]);\n\n  function resizeCanvas() {\n    if (cropCanvasRef.current.width > cropCanvasRef.current.height) {\n      cropCanvasRef.current.style.width = `${window.innerWidth / 1.2}px`;\n      cropCanvasRef.current.style.height = `auto`;\n    } else {\n      cropCanvasRef.current.style.width = `auto`;\n      cropCanvasRef.current.style.height = `${window.innerHeight / 1}px`;\n    }\n\n    cropCanvasRef.current.style.objectFit = 'contain';\n  }\n\n  useLayoutEffect(() => {\n    if (CropImageHolder && cropCanvasRef.current) {\n      const ctx = cropCanvasRef.current.getContext(\"2d\");\n      cropCanvasRef.current.width = CropImageHolder.naturalWidth;\n      cropCanvasRef.current.height = CropImageHolder.naturalHeight;\n      resizeCanvas();\n      const w = CropImageHolder.naturalWidth;\n      const h = CropImageHolder.naturalHeight;\n      ctx.drawImage(CropImageHolder, 0, 0, w, h);\n    }\n  }, [CropImageHolder]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(animated.div, {\n      style: { ...animation,\n        width: '94%',\n        height: \"100vh\",\n        position: \"fixed\",\n        top: '-0vh',\n        zIndex: 100,\n        cursor: \"default\",\n        overflow: \"hidden\",\n        backgroundColor: '#00ccff'\n      },\n      children: [/*#__PURE__*/_jsxDEV(DialogContent, {\n        style: {\n          padding: \"0px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          style: {\n            padding: \"0px\",\n            width: '100%'\n          },\n          children: allowCropAllCanvas ? /*#__PURE__*/_jsxDEV(\"canvas\", {\n            ref: cropCanvasRef,\n            style: {\n              padding: \"0px\",\n              margin: \"auto\",\n              backgroundColor: '#000000',\n              cursor: \"pointer\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 15\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(Taskbarx, \"wauq5DYggTkBqvUQawrsbdGtHAw=\", false, function () {\n  return [useSpring, useSelector];\n});\n\n_c = Taskbarx;\nexport const Taskbar = /*#__PURE__*/React.memo(Taskbarx);\n_c2 = Taskbar;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Taskbarx\");\n$RefreshReg$(_c2, \"Taskbar\");","map":{"version":3,"sources":["C:/Users/oghen/OneDrive/Documents/ClikBate/super/src/profile/Taskbar.tsx"],"names":["React","useRef","useState","useLayoutEffect","Grid","DialogContent","useSpring","animated","useSelector","Taskbarx","showModalUploadTask","uploadClose","animation","config","duration","opacity","transform","padding","cropCanvasRef","allowCropAllCanvas","setallowCropAllCanvas","CropImageHolder","setCropImageHolder","activatefilterImage","activatecropImage","selectedImage","cropimage","state","GlobalNavuploadReducer","activatefilterImageReducer","activatecropImageReducer","selectedImageReducer","cropimageReducer","Newcropimage","Image","src","onload","resizeCanvas","current","width","height","style","window","innerWidth","innerHeight","objectFit","ctx","getContext","naturalWidth","naturalHeight","w","h","drawImage","position","top","zIndex","cursor","overflow","backgroundColor","margin","Taskbar","memo"],"mappings":"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","sourcesContent":["import React, {\r\n  useRef,\r\n  useEffect,\r\n  useCallback,\r\n  useState,\r\n  useLayoutEffect,\r\n} from \"react\";\r\nimport ControlPointDuplicateIcon from \"@mui/icons-material/ControlPointDuplicate\";\r\nimport { Grid, Switch, DialogContent } from \"@material-ui/core\";\r\nimport { matchPc, matchTablet, matchMobile } from \"../DetectDevice\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport { OptionsSlider } from \"../profile/OptionsSlider\";\r\nimport { RootStateOrAny, useSelector, useDispatch } from \"react-redux\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport Axios from \"axios\";\r\nimport CheckIcon from \"@mui/icons-material/Check\";\r\nimport date from \"date-and-time\";\r\nimport { UserInfoUpdatePROFILE } from \"../log/actions/UserdataAction\";\r\nimport { UserInfoUpdateBILLBOARD } from \"../log/actions/UserdataAction\";\r\nimport { usePalette } from \"react-palette\";\r\nimport { UpdateColorAction } from \"../GlobalActions\";\r\n\r\nfunction Taskbarx({\r\n  showModalUploadTask,\r\n  uploadClose,\r\n\r\n}: any): JSX.Element {\r\n\r\n\r\n  const animation = useSpring({\r\n    config: {\r\n      duration: 600,\r\n    },\r\n    opacity: showModalUploadTask ? 1 : 0,\r\n    transform: showModalUploadTask ? `translateX(0%)` : `translateX(-100%)`,\r\n    padding: \"0px\",\r\n\r\n  });\r\n\r\n\r\n\r\n\r\n  const cropCanvasRef: any = useRef(null);\r\n\r\n  const [allowCropAllCanvas, setallowCropAllCanvas] = useState<boolean>(true);\r\n\r\n  const [CropImageHolder, setCropImageHolder] = useState<any>(null);\r\n\r\n\r\n\r\n  const { activatefilterImage, activatecropImage, selectedImage, cropimage } = useSelector(\r\n    (state: RootStateOrAny) => ({\r\n      ...state.GlobalNavuploadReducer,\r\n    })\r\n  );\r\n  const activatefilterImageReducer = activatefilterImage;\r\n  const activatecropImageReducer = activatecropImage;\r\n  const selectedImageReducer = selectedImage;\r\n  const cropimageReducer = cropimage;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  useLayoutEffect(() => {\r\n    const Newcropimage: any = new Image();\r\n\r\n    Newcropimage.src = cropimageReducer;\r\n    Newcropimage.onload = function () {\r\n      if (CropImageHolder === Newcropimage) {\r\n      } else {\r\n        setCropImageHolder(Newcropimage);\r\n      }\r\n    }\r\n  }, [cropimageReducer]);\r\n\r\n\r\n\r\n  function resizeCanvas() {\r\n    if (cropCanvasRef.current.width > cropCanvasRef.current.height) {\r\n      cropCanvasRef.current.style.width = `${window.innerWidth / 1.2}px`;\r\n      cropCanvasRef.current.style.height = `auto`;\r\n    } else {\r\n      cropCanvasRef.current.style.width = `auto`;\r\n      cropCanvasRef.current.style.height = `${window.innerHeight / 1}px`;\r\n    }\r\n\r\n    cropCanvasRef.current.style.objectFit = 'contain';\r\n  }\r\n\r\n\r\n  useLayoutEffect(() => {\r\n    if (CropImageHolder && cropCanvasRef.current) {\r\n      const ctx = cropCanvasRef.current.getContext(\"2d\");\r\n\r\n      cropCanvasRef.current.width = CropImageHolder.naturalWidth;\r\n      cropCanvasRef.current.height = CropImageHolder.naturalHeight;\r\n      resizeCanvas();\r\n\r\n      const w = CropImageHolder.naturalWidth;\r\n      const h = CropImageHolder.naturalHeight;\r\n\r\n\r\n      ctx.drawImage(CropImageHolder, 0, 0, w, h);\r\n    }\r\n  }, [CropImageHolder])\r\n\r\n\r\n  return (\r\n    <>\r\n      <animated.div style={{\r\n        ...animation, width: '94%',\r\n        height: \"100vh\",\r\n        position: \"fixed\",\r\n        top: '-0vh',\r\n        zIndex: 100,\r\n        cursor: \"default\",\r\n        overflow: \"hidden\",\r\n        backgroundColor: '#00ccff'\r\n      }}>\r\n        <DialogContent\r\n          style={{\r\n            padding: \"0px\",\r\n          }}>\r\n\r\n\r\n\r\n          <Grid\r\n            container\r\n            style={{\r\n              padding: \"0px\", width: '100%'\r\n            }}>\r\n\r\n            {allowCropAllCanvas ? (\r\n              <canvas\r\n                ref={cropCanvasRef}\r\n                style={{\r\n                  padding: \"0px\",\r\n                  margin: \"auto\",\r\n                  backgroundColor: '#000000',\r\n                  cursor: \"pointer\",\r\n                }} />\r\n            ) : null}\r\n\r\n          </Grid>\r\n\r\n        </DialogContent> </animated.div>\r\n\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport const Taskbar = React.memo(Taskbarx);\r\n"]},"metadata":{},"sourceType":"module"}