{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\log\\\\PasswordCheck.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback } from \"react\";\nimport { TextField, DialogContent } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { matchPc, matchTablet } from \"../DetectDevice\";\nimport { Grid } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction PasswordCheckx({\n  widthHolder,\n  checkSignupPassword,\n  setcheckSignupPassword,\n  checkSignupPasswordACTIVATE,\n  setcheckSignupPasswordACTIVATE,\n  signup\n}) {\n  _s();\n\n  ///\n  ///\n  ///\n  /// GET DARKMODE FROM REDUX STORE\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const [showSpinner, setshowSpinner] = useState(true); /////\n\n  var sizex = undefined;\n  var font1 = \" \";\n  var font2 = \" \";\n  var transform = \"\";\n  var widthcheckPassword = \"\";\n  var heighttt = \" \";\n  var positionn = \"\";\n  var bottomm = \"\";\n  var displayy = \"\"; ///////\n\n  if (matchPc) {\n    var heighttt = \"100vh\";\n    sizex = \"medium\";\n    font1 = \"2.7vh\";\n    font2 = \"1.9vh\";\n    transform = \"scale(1)\";\n    widthcheckPassword = widthHolder;\n    positionn = \"\";\n    bottomm = \"\";\n    displayy = \"none\";\n  } else if (matchTablet) {\n    var heighttt = \"95.2vh\";\n    sizex = \"small\";\n    font1 = \"2.6vh\";\n    font2 = \"2vh\";\n    transform = \"scale(1)\";\n    widthcheckPassword = \"62%\";\n    positionn = \"fixed\";\n    bottomm = \"0em\";\n    displayy = \"block\";\n  } else {\n    var heighttt = \"95.2vh\";\n    sizex = \"small\";\n    font1 = \"\";\n    font2 = \"\";\n    transform = \"scale(0.94)\";\n    widthcheckPassword = \"100%\";\n    positionn = \"fixed\";\n    bottomm = \"0em\";\n    displayy = \"block\";\n  }\n\n  const EmailCheckingTimer = useRef(null);\n  EmailCheckingTimer.current = setTimeout(() => {\n    setErrorFormChecking({ ...errorFormChecking,\n      [name]: false\n    });\n    setErrorsSignupValues({ ...errorsSignupValues,\n      [name]: 2\n    });\n    checkEmailClean && setErrorsSignupValues({ ...errorsSignupValues,\n      [name]: 3\n    });\n  }, 2000);\n\n  if (EmailCheckingTimer.current) {\n    clearTimeout(EmailCheckingTimer.current);\n    setErrorFormChecking({ ...errorFormChecking,\n      [name]: false\n    });\n  } ///\n  ///\n  ///\n  /// SANITISE LOG IN FORM INPUT CLIENT SIDE\n\n\n  const updatecheckSignupPasswordvalues = useCallback(e => {\n    const {\n      value\n    } = e.target;\n    setcheckSignupPassword(value);\n    signup();\n  }, [checkSignupPassword]);\n  var spinColor = \"\";\n  var topp = \"\";\n  var toptext = \"\";\n  var spinsize = 60;\n  var left = \"\";\n  darkmodeReducer ? spinColor = \"#333333\" : spinColor = \"#aaaaaa\";\n\n  if (matchPc) {\n    topp = \"11em\";\n    toptext = \"-17vh\";\n    spinsize = 55;\n    left = \"42%\";\n  } else if (matchTablet) {\n    topp = \"35em\";\n    toptext = \"-22vh\";\n    spinsize = 76;\n    left = \"45%\";\n  } else {\n    topp = \"10em\";\n    toptext = \"-31vh\";\n    spinsize = 60;\n    left = \"42%\";\n  } ///\n  ///\n  ///\n  ///MATERIAL UI SPINNER STYLES (INSPIRED BY FACEBOOK SPINNERS)\n\n\n  const useStylesmodalformsignup = makeStyles(theme => ({\n    root: {\n      position: \"relative\",\n      textAlign: \"center\",\n      left: 0\n    },\n    bottom: {\n      color: theme.palette.grey[theme.palette.type === \"light\" ? 300 : 700]\n    },\n    top: {\n      color: spinColor,\n      animationDuration: \"550ms\",\n      position: \"absolute\",\n      left: 0\n    },\n    circle: {\n      strokeLinecap: \"round\"\n    }\n  }));\n  const classes = useStylesmodalformsignup();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: checkSignupPasswordACTIVATE ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(DialogContent, {\n        className: darkmodeReducer ? \" dontallowhighlighting  mobileTextfield-backplateColorDark\" : \" dontallowhighlighting  mobileTextfield-backplateColorLight\",\n        style: {\n          zIndex: 12,\n          display: displayy,\n          bottom: \"0em\",\n          height: \"95.5vh\",\n          overflow: \"hidden\",\n          width: \"100%\",\n          position: \"fixed\",\n          marginTop: \"-3px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        style: {\n          position: \"fixed\",\n          top: topp,\n          left: left,\n          zIndex: 14\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.root,\n          style: {\n            opacity: \"0.3\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n            variant: \"determinate\",\n            className: classes.bottom,\n            size: spinsize,\n            thickness: 4,\n            value: 100\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CircularProgress, {\n            variant: \"indeterminate\",\n            disableShrink: true,\n            className: classes.top,\n            classes: {\n              circle: classes.circle\n            },\n            size: spinsize,\n            thickness: 4\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        size: sizex,\n        inputProps: {\n          style: {\n            fontSize: font1\n          }\n        },\n        InputLabelProps: {\n          style: {\n            fontSize: font2\n          }\n        },\n        style: {\n          transform: transform,\n          width: widthcheckPassword,\n          position: \"relative\",\n          top: toptext,\n          zIndex: 14\n        },\n        label: \"Confirm Password\",\n        type: \"text\",\n        onChange: updatecheckSignupPasswordvalues,\n        name: \"inputedUsername\",\n        value: checkSignupPassword,\n        variant: \"standard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : null\n  }, void 0, false);\n}\n\n_s(PasswordCheckx, \"IhpB1XxqvNYKpNHZE63HJaDRJpw=\", false, function () {\n  return [useSelector, useStylesmodalformsignup];\n});\n\n_c = PasswordCheckx;\nexport const PasswordCheck = /*#__PURE__*/React.memo(PasswordCheckx);\n_c2 = PasswordCheck;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PasswordCheckx\");\n$RefreshReg$(_c2, \"PasswordCheck\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/log/PasswordCheck.tsx"],"names":["React","useState","useCallback","TextField","DialogContent","makeStyles","matchPc","matchTablet","Grid","useSelector","CircularProgress","PasswordCheckx","widthHolder","checkSignupPassword","setcheckSignupPassword","checkSignupPasswordACTIVATE","setcheckSignupPasswordACTIVATE","signup","darkmode","state","GlobalReducer","darkmodeReducer","showSpinner","setshowSpinner","sizex","undefined","font1","font2","transform","widthcheckPassword","heighttt","positionn","bottomm","displayy","EmailCheckingTimer","useRef","current","setTimeout","setErrorFormChecking","errorFormChecking","name","setErrorsSignupValues","errorsSignupValues","checkEmailClean","clearTimeout","updatecheckSignupPasswordvalues","e","value","target","spinColor","topp","toptext","spinsize","left","useStylesmodalformsignup","theme","root","position","textAlign","bottom","color","palette","grey","type","top","animationDuration","circle","strokeLinecap","classes","zIndex","display","height","overflow","width","marginTop","opacity","style","fontSize","PasswordCheck","memo"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\r\n\r\nimport {\r\n  IconButton,\r\n  InputAdornment,\r\n  TextField,\r\n  DialogContent,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport VisibilityOffIcon from \"@material-ui/icons/VisibilityOff\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\nimport { ItextfIeldLogin } from \"./log-Interfaces\";\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { useSelector } from \"react-redux\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nfunction PasswordCheckx({\r\n  widthHolder,\r\n  checkSignupPassword,\r\n  setcheckSignupPassword,\r\n  checkSignupPasswordACTIVATE,\r\n  setcheckSignupPasswordACTIVATE,\r\n  signup,\r\n}: any): JSX.Element {\r\n  ///\r\n  ///\r\n  ///\r\n  /// GET DARKMODE FROM REDUX STORE\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n\r\n  const darkmodeReducer = darkmode;\r\n\r\n  const [showSpinner, setshowSpinner] = useState<boolean>(true);\r\n\r\n  /////\r\n  var sizex: \"small\" | \"medium\" | undefined = undefined;\r\n  var font1 = \" \";\r\n  var font2 = \" \";\r\n  var transform = \"\";\r\n  var widthcheckPassword = \"\";\r\n  var heighttt = \" \";\r\n  var positionn: any = \"\";\r\n  var bottomm = \"\";\r\n  var displayy = \"\";\r\n\r\n  ///////\r\n\r\n  if (matchPc) {\r\n    var heighttt = \"100vh\";\r\n    sizex = \"medium\";\r\n    font1 = \"2.7vh\";\r\n    font2 = \"1.9vh\";\r\n    transform = \"scale(1)\";\r\n    widthcheckPassword = widthHolder;\r\n    positionn = \"\";\r\n    bottomm = \"\";\r\n    displayy = \"none\";\r\n  } else if (matchTablet) {\r\n    var heighttt = \"95.2vh\";\r\n    sizex = \"small\";\r\n    font1 = \"2.6vh\";\r\n    font2 = \"2vh\";\r\n    transform = \"scale(1)\";\r\n    widthcheckPassword = \"62%\";\r\n    positionn = \"fixed\";\r\n    bottomm = \"0em\";\r\n    displayy = \"block\";\r\n  } else {\r\n    var heighttt = \"95.2vh\";\r\n    sizex = \"small\";\r\n    font1 = \"\";\r\n    font2 = \"\";\r\n    transform = \"scale(0.94)\";\r\n    widthcheckPassword = \"100%\";\r\n    positionn = \"fixed\";\r\n    bottomm = \"0em\";\r\n    displayy = \"block\";\r\n  }\r\n\r\n  const EmailCheckingTimer = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n\r\n  EmailCheckingTimer.current = setTimeout(() => {\r\n    setErrorFormChecking({ ...errorFormChecking, [name]: false });\r\n    setErrorsSignupValues({ ...errorsSignupValues, [name]: 2 });\r\n    checkEmailClean &&\r\n      setErrorsSignupValues({ ...errorsSignupValues, [name]: 3 });\r\n  }, 2000);\r\n\r\n  if (EmailCheckingTimer.current) {\r\n    clearTimeout(EmailCheckingTimer.current);\r\n    setErrorFormChecking({ ...errorFormChecking, [name]: false });\r\n  }\r\n  ///\r\n  ///\r\n  ///\r\n  /// SANITISE LOG IN FORM INPUT CLIENT SIDE\r\n  const updatecheckSignupPasswordvalues = useCallback(\r\n    (e: any) => {\r\n      const { value } = e.target;\r\n      setcheckSignupPassword(value);\r\n      signup();\r\n    },\r\n\r\n    [checkSignupPassword]\r\n  );\r\n\r\n  var spinColor = \"\";\r\n  var topp = \"\";\r\n  var toptext = \"\";\r\n  var spinsize: number = 60;\r\n  var left = \"\";\r\n  darkmodeReducer ? (spinColor = \"#333333\") : (spinColor = \"#aaaaaa\");\r\n  if (matchPc) {\r\n    topp = \"11em\";\r\n    toptext = \"-17vh\";\r\n    spinsize = 55;\r\n    left = \"42%\";\r\n  } else if (matchTablet) {\r\n    topp = \"35em\";\r\n    toptext = \"-22vh\";\r\n    spinsize = 76;\r\n    left = \"45%\";\r\n  } else {\r\n    topp = \"10em\";\r\n    toptext = \"-31vh\";\r\n    spinsize = 60;\r\n    left = \"42%\";\r\n  }\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  ///MATERIAL UI SPINNER STYLES (INSPIRED BY FACEBOOK SPINNERS)\r\n  const useStylesmodalformsignup = makeStyles((theme) => ({\r\n    root: {\r\n      position: \"relative\",\r\n      textAlign: \"center\",\r\n      left: 0,\r\n    },\r\n    bottom: {\r\n      color: theme.palette.grey[theme.palette.type === \"light\" ? 300 : 700],\r\n    },\r\n    top: {\r\n      color: spinColor,\r\n      animationDuration: \"550ms\",\r\n      position: \"absolute\",\r\n      left: 0,\r\n    },\r\n    circle: {\r\n      strokeLinecap: \"round\",\r\n    },\r\n  }));\r\n\r\n  const classes = useStylesmodalformsignup();\r\n\r\n  return (\r\n    <>\r\n      {checkSignupPasswordACTIVATE ? (\r\n        <>\r\n          <DialogContent\r\n            className={\r\n              darkmodeReducer\r\n                ? \" dontallowhighlighting  mobileTextfield-backplateColorDark\"\r\n                : \" dontallowhighlighting  mobileTextfield-backplateColorLight\"\r\n            }\r\n            style={{\r\n              zIndex: 12,\r\n              display: displayy,\r\n              bottom: \"0em\",\r\n              height: \"95.5vh\",\r\n              overflow: \"hidden\",\r\n              width: \"100%\",\r\n              position: \"fixed\",\r\n              marginTop: \"-3px\",\r\n            }}\r\n          ></DialogContent>\r\n          <Grid\r\n            item\r\n            xs={12}\r\n            style={{\r\n              position: \"fixed\",\r\n              top: topp,\r\n              left: left,\r\n              zIndex: 14,\r\n            }}\r\n          >\r\n            <div\r\n              className={classes.root}\r\n              style={{\r\n                opacity: \"0.3\",\r\n              }}\r\n            >\r\n              <CircularProgress\r\n                variant=\"determinate\"\r\n                className={classes.bottom}\r\n                size={spinsize}\r\n                thickness={4}\r\n                value={100}\r\n              />\r\n              <CircularProgress\r\n                variant=\"indeterminate\"\r\n                disableShrink\r\n                className={classes.top}\r\n                classes={{\r\n                  circle: classes.circle,\r\n                }}\r\n                size={spinsize}\r\n                thickness={4}\r\n              />\r\n            </div>{\" \"}\r\n          </Grid>\r\n          <TextField\r\n            size={sizex}\r\n            inputProps={{ style: { fontSize: font1 } }}\r\n            InputLabelProps={{ style: { fontSize: font2 } }}\r\n            style={{\r\n              transform: transform,\r\n              width: widthcheckPassword,\r\n              position: \"relative\",\r\n              top: toptext,\r\n              zIndex: 14,\r\n            }}\r\n            label=\"Confirm Password\"\r\n            type=\"text\"\r\n            onChange={updatecheckSignupPasswordvalues}\r\n            name=\"inputedUsername\"\r\n            value={checkSignupPassword}\r\n            variant=\"standard\"\r\n          />\r\n        </>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport const PasswordCheck = React.memo(PasswordCheckx);\r\n"]},"metadata":{},"sourceType":"module"}