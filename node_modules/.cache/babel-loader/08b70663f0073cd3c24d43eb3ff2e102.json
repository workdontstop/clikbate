{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\upload\\\\UploadMenu.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useCallback, useEffect, useLayoutEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Axios from \"axios\";\nimport { CropUploadMode } from \"./CropUploadMode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction UploadMenux({\n  optionsShow,\n  optinstopshowingReducer,\n  typeTop,\n  closeoptionsslide,\n  animationop,\n  optionsCollectImageRef,\n  handleTouchStartOptions,\n  handleTouchMoveOptions,\n  modalanimation,\n  nextSlidePc,\n  optionsImages,\n  ActiveSlide,\n  optionsNameData,\n  clickOptions,\n  optionsClickType,\n  getSliderWidthNew,\n  cropTOPLEVELScrollRef,\n  refWithimageData,\n  CropSaved,\n  setCropSaved\n}) {\n  _s();\n\n  const [selectedImage, setselectedImage] = useState([]);\n  const [filterImage, setfilterImage] = useState([]);\n  const [superCropLoadFade, setsuperCropLoadFade] = useState(false);\n  var k1 = CropSaved ? 3 : 2;\n  var k2 = CropSaved ? 4 : 3; ///\n  ///\n  ///\n  ///DARKMODE FROM REDUX\n\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const {\n    REACT_APP_SUPERSTARZ_URL\n  } = process.env; ///\n  ///\n  /// GET COLOR FROM REDUX STORE\n\n  const {\n    color,\n    colordark,\n    colortype\n  } = useSelector(state => ({ ...state.GlobalReducerColor\n  }));\n  const colorReducer = color;\n  const colorReducerdark = colordark;\n  const colortypeReducer = colortype;\n  const [cropimage, setcropimage] = useState(\"\");\n  const [showCrop, setshowCrop] = useState(false);\n  const [selectedImageUpload, setselectedImageUpload] = useState(null);\n  const updateColor = useCallback(formData => {\n    Axios.post(`http://${REACT_APP_SUPERSTARZ_URL}/upload`, formData).then(response => {\n      if (response.data.message === \"ok\") {}\n    }).catch(function (error) {\n      alert(\"about color error\");\n    });\n  }, [REACT_APP_SUPERSTARZ_URL]);\n  const itemUploadRef = useRef([]); ///\n  ///\n  ///\n  ///CREATE REFS FROM POSTS AND ADD THEM TO ARRAY\n\n  const addUploadItemsRef = UploadRef => {\n    if (UploadRef && !itemUploadRef.current.includes(UploadRef)) {\n      itemUploadRef.current.push(UploadRef);\n    } ////console.log(postItemsRef.current[1]);\n\n  };\n\n  const imageHandleChange = e => {\n    if (e.target.files && e.target.files.length > 0) {\n      const FileArray = Array.from(e.target.files).map(file => URL.createObjectURL(file));\n      setselectedImage(prevImages => prevImages.concat(FileArray));\n      setcropimage(FileArray[0]);\n      const formData = new FormData();\n\n      for (let i = 0; i < e.target.files.length; i++) {\n        formData.append(\"superImages\", e.target.files[i]);\n      }\n\n      setshowCrop(true);\n    }\n  }; ///////////////////////////////////////////////////////SUPER CROP ///////////////////////////////////\n\n\n  const cropCanvasRef = useRef(null); ////\n  ////\n  ////\n\n  const [cropArea, setcropArea] = useState(null); //\n\n  const [crop, setcrop] = useState({\n    x: 0,\n    y: 0\n  });\n  const [cropToo, setcropToo] = useState({\n    x: 0,\n    y: 0\n  });\n  const [cropInitial, setcropInitial] = useState({\n    x: 0,\n    y: 0\n  });\n  const [cropOffset, setcropOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [Drag, setDrag] = useState(false);\n  const [SourceWidthForCropX, setSourceWidthForCropX] = useState(0);\n  const [SourceWidthForCropY, setSourceWidthForCropY] = useState(0);\n  const [cropwidth, setcropwidth] = useState(0);\n  const [cropheight, setcropheight] = useState(0);\n  const [canvasToimage, setcanvasToimage] = useState(false);\n  const getpreviewFixedWidthRef = useRef(null);\n  const getCropHeightRef = useRef(null);\n  const getFixedCropWidthRef = useRef(null);\n  const [getCropHeight, setgetCropHeight] = useState(0);\n  const [getCropHeightRealImageRatio, setgetCropHeightRealImageRatio] = useState(0);\n  const [getFixedCropWidth, setgetFixedCropWidth] = useState(0);\n  const [getpreviewFixedWidth, setgetpreviewFixedWidth] = useState(0);\n  const [CropImageHolder, setCropImageHolder] = useState(null);\n  const [OriginalImageWidth, setOriginalImageWidth] = useState(0);\n  const [OriginalImageHeight, setOriginalImageHeight] = useState(0);\n  const [WideImageCheck, setWideImageCheck] = useState(false);\n  const hdcanvasvalue = 2;\n  const [BoxCropActivated, setBoxCropActivated] = useState(true);\n  const cropScrollRef = useRef(null); ///\n  ///\n  ///\n  ///GET OPTIONS SLIDER IMAGE WIDTH FROM MATERIAL UI GRID\n\n  useEffect(() => {\n    if (getpreviewFixedWidthRef.current && getpreviewFixedWidthRef.current.clientWidth) {\n      setgetpreviewFixedWidth(getpreviewFixedWidthRef.current.clientWidth);\n    }\n\n    if (getCropHeightRef.current && getCropHeightRef.current.clientWidth) {\n      setgetCropHeight(getCropHeightRef.current.clientHeight * hdcanvasvalue);\n      setgetCropHeightRealImageRatio(getCropHeightRef.current.clientHeight);\n    }\n\n    if (getFixedCropWidthRef.current && getFixedCropWidthRef.current.clientWidth) {\n      setgetFixedCropWidth(getFixedCropWidthRef.current.clientWidth);\n    }\n  }, []); ///\n  ///\n  ///\n  ///\n  /// HANDLE TOUCH START EVENT\n\n  const handleTouchStart = (e, type) => {\n    if (BoxCropActivated) {\n      if (type === 0) {\n        setcropInitial({ ...cropInitial,\n          x: e.clientX * 2.8 - cropOffset.x,\n          y: e.clientY * 3.3 - cropOffset.y\n        });\n      } else {\n        setcropInitial({ ...cropInitial,\n          x: e.touches[0].clientX * 2.8 - cropOffset.x,\n          y: e.touches[0].clientY * 3.3 - cropOffset.y\n        });\n      }\n\n      if (e.target) {\n        setDrag(true);\n      }\n    } else {\n      setBoxCropActivated(true);\n    }\n  };\n\n  const handleTouchEnd = () => {\n    setcropInitial({ ...cropInitial,\n      x: crop.x,\n      y: crop.y\n    });\n    setDrag(false);\n  };\n\n  const handleTouchDrag = (e, type) => {\n    if (Drag) {\n      if (type === 0) {\n        setcrop({ ...crop,\n          x: e.clientX * 2.8 - cropInitial.x,\n          y: e.clientY * 3.3 - cropInitial.y\n        });\n      } else {\n        setcrop({ ...crop,\n          x: e.touches[0].clientX * 2.8 - cropInitial.x,\n          y: e.touches[0].clientY * 3.3 - cropInitial.y\n        });\n      }\n\n      setcropOffset({ ...cropOffset,\n        x: crop.x,\n        y: crop.y\n      });\n    }\n  };\n\n  const draw = useCallback((ctx, dimensions, type, axis) => {\n    if (type === 1) {\n      ctx.drawImage(CropImageHolder, axis, 0, dimensions, getCropHeight);\n    } else if (type === 2) {\n      ctx.drawImage(CropImageHolder, 0, axis, getCropHeight, dimensions);\n    } else {\n      ctx.drawImage(CropImageHolder, 0, 0, OriginalImageWidth, OriginalImageHeight);\n    }\n  }, [OriginalImageWidth, OriginalImageHeight, CropImageHolder, getCropHeight]);\n  useLayoutEffect(() => {\n    const Newcropimage = new Image();\n    Newcropimage.src = cropimage;\n\n    Newcropimage.onload = function () {\n      setCropImageHolder(Newcropimage);\n      var data1 = Newcropimage.naturalWidth;\n      var data2 = Newcropimage.naturalHeight;\n      setOriginalImageWidth(data1);\n      setOriginalImageHeight(data2);\n\n      if (Newcropimage.naturalWidth > Newcropimage.naturalHeight) {\n        setWideImageCheck(true);\n      } else {\n        setWideImageCheck(false);\n      }\n\n      setcropwidth(data1);\n      setcropheight(data2);\n    };\n  }, [cropimage, BoxCropActivated, showCrop]);\n  useLayoutEffect(() => {\n    if (CropImageHolder && cropCanvasRef.current) {\n      const ctx = cropCanvasRef.current.getContext(\"2d\");\n      var RatiofromOriginalandfixedHeight = OriginalImageHeight / getCropHeight;\n      var NewBoxRatioWidth_WIDEIMAGE = OriginalImageWidth / RatiofromOriginalandfixedHeight;\n      setSourceWidthForCropX(NewBoxRatioWidth_WIDEIMAGE);\n      var RatiofromOriginalandfixedHeightx = OriginalImageWidth / getCropHeight;\n      var NewBoxRatioWidth_LONGIMAGE = OriginalImageHeight / RatiofromOriginalandfixedHeightx;\n      setSourceWidthForCropY(NewBoxRatioWidth_LONGIMAGE);\n      var ratioh = OriginalImageWidth * 3 / OriginalImageWidth;\n      var ratiow = OriginalImageHeight * 3 / OriginalImageHeight;\n\n      if (BoxCropActivated) {\n        cropCanvasRef.current.width = getCropHeight;\n        cropCanvasRef.current.height = getCropHeight;\n      } else {\n        cropCanvasRef.current.width = OriginalImageWidth;\n        cropCanvasRef.current.height = OriginalImageHeight;\n      }\n\n      var centerpreview = cropCanvasRef.current.width / 1.5 - NewBoxRatioWidth_LONGIMAGE / 1.5;\n      var xtraZoom = getCropHeight / NewBoxRatioWidth_WIDEIMAGE;\n      var centerCropCanvas = cropCanvasRef.current.width / 2 - NewBoxRatioWidth_WIDEIMAGE / 2;\n      var RatiofromOriginalandfixedHeight = OriginalImageHeight / getCropHeightRealImageRatio;\n      var newcropCSSWidth = OriginalImageWidth / RatiofromOriginalandfixedHeight;\n\n      if (BoxCropActivated) {\n        var dragDistanceY = NewBoxRatioWidth_LONGIMAGE - getCropHeight;\n        var dragDistanceX = NewBoxRatioWidth_WIDEIMAGE - getCropHeight;\n\n        if (OriginalImageWidth > OriginalImageHeight) {\n          if (crop.x < -dragDistanceX) {\n            setcrop({ ...crop,\n              x: -dragDistanceX\n            });\n          } else if (crop.x > 0) {\n            setcrop({ ...crop,\n              x: 0\n            });\n          } else {}\n\n          requestAnimationFrame(() => {\n            draw(ctx, NewBoxRatioWidth_WIDEIMAGE, 1, crop.x);\n          });\n        } else {\n          if (crop.y < -dragDistanceY) {\n            setcrop({ ...crop,\n              y: -dragDistanceY\n            });\n          } else if (crop.y > 0) {\n            setcrop({ ...crop,\n              y: 0\n            });\n          } else {}\n\n          requestAnimationFrame(() => {\n            draw(ctx, NewBoxRatioWidth_LONGIMAGE, 2, crop.y);\n          });\n        }\n\n        cropCanvasRef.current.style.width = `${getCropHeight / hdcanvasvalue}px`;\n        cropCanvasRef.current.style.height = `${getCropHeight / hdcanvasvalue}px`;\n      } else {\n        requestAnimationFrame(() => {\n          draw(ctx, 0, 3, 0);\n        });\n        cropCanvasRef.current.style.width = `${newcropCSSWidth}px`;\n        cropCanvasRef.current.style.height = `${getCropHeightRealImageRatio}px`;\n      }\n    }\n  }, [CropImageHolder, cropCanvasRef, BoxCropActivated, OriginalImageWidth, OriginalImageHeight, crop]);\n\n  const gg = () => {};\n\n  const cropaspectchange = () => {\n    setBoxCropActivated(BoxCropActivated => !BoxCropActivated);\n  };\n\n  const complete = () => {\n    setcropToo({ ...cropToo,\n      x: crop.x,\n      y: crop.y\n    });\n    setsuperCropLoadFade(true);\n    setTimeout(function () {\n      setshowCrop(false);\n      setcanvasToimage(true);\n    }, 500);\n  };\n\n  const blank = () => {}; //////////////////////////////////////////////////////////////////////SUPER CROP ///////////////////////////\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(CropUploadMode, {\n      superCropLoadFade: superCropLoadFade,\n      showCrop: showCrop,\n      handleTouchStart: handleTouchStart,\n      handleTouchDrag: handleTouchDrag,\n      handleTouchEnd: handleTouchEnd,\n      cropCanvasRef: cropCanvasRef,\n      cropaspectchange: cropaspectchange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(UploadMenux, \"/ROFOLiDckfrjH/JzqIFkVfRPGE=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = UploadMenux;\nexport const UploadMenu = /*#__PURE__*/React.memo(UploadMenux);\n_c2 = UploadMenu;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"UploadMenux\");\n$RefreshReg$(_c2, \"UploadMenu\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/upload/UploadMenu.tsx"],"names":["React","useRef","useState","useCallback","useEffect","useLayoutEffect","useSelector","Axios","CropUploadMode","UploadMenux","optionsShow","optinstopshowingReducer","typeTop","closeoptionsslide","animationop","optionsCollectImageRef","handleTouchStartOptions","handleTouchMoveOptions","modalanimation","nextSlidePc","optionsImages","ActiveSlide","optionsNameData","clickOptions","optionsClickType","getSliderWidthNew","cropTOPLEVELScrollRef","refWithimageData","CropSaved","setCropSaved","selectedImage","setselectedImage","filterImage","setfilterImage","superCropLoadFade","setsuperCropLoadFade","k1","k2","darkmode","state","GlobalReducer","darkmodeReducer","REACT_APP_SUPERSTARZ_URL","process","env","color","colordark","colortype","GlobalReducerColor","colorReducer","colorReducerdark","colortypeReducer","cropimage","setcropimage","showCrop","setshowCrop","selectedImageUpload","setselectedImageUpload","updateColor","formData","post","then","response","data","message","catch","error","alert","itemUploadRef","addUploadItemsRef","UploadRef","current","includes","push","imageHandleChange","e","target","files","length","FileArray","Array","from","map","file","URL","createObjectURL","prevImages","concat","FormData","i","append","cropCanvasRef","cropArea","setcropArea","crop","setcrop","x","y","cropToo","setcropToo","cropInitial","setcropInitial","cropOffset","setcropOffset","Drag","setDrag","SourceWidthForCropX","setSourceWidthForCropX","SourceWidthForCropY","setSourceWidthForCropY","cropwidth","setcropwidth","cropheight","setcropheight","canvasToimage","setcanvasToimage","getpreviewFixedWidthRef","getCropHeightRef","getFixedCropWidthRef","getCropHeight","setgetCropHeight","getCropHeightRealImageRatio","setgetCropHeightRealImageRatio","getFixedCropWidth","setgetFixedCropWidth","getpreviewFixedWidth","setgetpreviewFixedWidth","CropImageHolder","setCropImageHolder","OriginalImageWidth","setOriginalImageWidth","OriginalImageHeight","setOriginalImageHeight","WideImageCheck","setWideImageCheck","hdcanvasvalue","BoxCropActivated","setBoxCropActivated","cropScrollRef","clientWidth","clientHeight","handleTouchStart","type","clientX","clientY","touches","handleTouchEnd","handleTouchDrag","draw","ctx","dimensions","axis","drawImage","Newcropimage","Image","src","onload","data1","naturalWidth","data2","naturalHeight","getContext","RatiofromOriginalandfixedHeight","NewBoxRatioWidth_WIDEIMAGE","RatiofromOriginalandfixedHeightx","NewBoxRatioWidth_LONGIMAGE","ratioh","ratiow","width","height","centerpreview","xtraZoom","centerCropCanvas","newcropCSSWidth","dragDistanceY","dragDistanceX","requestAnimationFrame","style","gg","cropaspectchange","complete","setTimeout","blank","UploadMenu","memo"],"mappings":"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","sourcesContent":["import React, {\r\n  useRef,\r\n  useState,\r\n  useCallback,\r\n  useEffect,\r\n  useLayoutEffect,\r\n} from \"react\";\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport { SuperCrop } from \"./SuperCrop\";\r\nimport MusicNoteIcon from \"@mui/icons-material/MusicNote\";\r\nimport PhotoIcon from \"@mui/icons-material/Photo\";\r\nimport GifIcon from \"@mui/icons-material/Gif\";\r\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\r\nimport Axios from \"axios\";\r\nimport CropIcon from \"@mui/icons-material/Crop\";\r\nimport CheckIcon from \"@mui/icons-material/Check\";\r\nimport { PreviewCanvasCropAll } from \"./PreviewCanvasCropAll\";\r\nimport { PreviewCanvas } from \"./PreviewCanvas\";\r\nimport { CropUploadMode } from \"./CropUploadMode\";\r\n\r\nfunction UploadMenux({\r\n  optionsShow,\r\n  optinstopshowingReducer,\r\n  typeTop,\r\n  closeoptionsslide,\r\n  animationop,\r\n  optionsCollectImageRef,\r\n  handleTouchStartOptions,\r\n  handleTouchMoveOptions,\r\n  modalanimation,\r\n  nextSlidePc,\r\n  optionsImages,\r\n  ActiveSlide,\r\n  optionsNameData,\r\n  clickOptions,\r\n  optionsClickType,\r\n  getSliderWidthNew,\r\n  cropTOPLEVELScrollRef,\r\n  refWithimageData,\r\n  CropSaved,\r\n  setCropSaved,\r\n}: any): JSX.Element {\r\n  const [selectedImage, setselectedImage] = useState<Array<any>>([]);\r\n\r\n  const [filterImage, setfilterImage] = useState<Array<any>>([]);\r\n\r\n  const [superCropLoadFade, setsuperCropLoadFade] = useState<boolean>(false);\r\n\r\n  var k1 = CropSaved ? 3 : 2;\r\n  var k2 = CropSaved ? 4 : 3;\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  ///DARKMODE FROM REDUX\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n\r\n  const darkmodeReducer = darkmode;\r\n\r\n  const { REACT_APP_SUPERSTARZ_URL } = process.env;\r\n\r\n  ///\r\n  ///\r\n  /// GET COLOR FROM REDUX STORE\r\n  interface RootStateReducerColor {\r\n    GlobalReducerColor: {\r\n      color: string;\r\n      colordark: string;\r\n      colortype: number;\r\n    };\r\n  }\r\n  const { color, colordark, colortype } = useSelector(\r\n    (state: RootStateReducerColor) => ({\r\n      ...state.GlobalReducerColor,\r\n    })\r\n  );\r\n  const colorReducer = color;\r\n  const colorReducerdark = colordark;\r\n  const colortypeReducer = colortype;\r\n\r\n  const [cropimage, setcropimage] = useState<string | undefined>(\"\");\r\n  const [showCrop, setshowCrop] = useState<boolean>(false);\r\n\r\n  const [selectedImageUpload, setselectedImageUpload] = useState<any>(null);\r\n\r\n  const updateColor = useCallback(\r\n    (formData: any) => {\r\n      Axios.post(`http://${REACT_APP_SUPERSTARZ_URL}/upload`, formData)\r\n        .then((response) => {\r\n          if (response.data.message === \"ok\") {\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          alert(\"about color error\");\r\n        });\r\n    },\r\n    [REACT_APP_SUPERSTARZ_URL]\r\n  );\r\n\r\n  const itemUploadRef = useRef<any>([]);\r\n  ///\r\n  ///\r\n  ///\r\n  ///CREATE REFS FROM POSTS AND ADD THEM TO ARRAY\r\n  const addUploadItemsRef = (UploadRef: any) => {\r\n    if (UploadRef && !itemUploadRef.current.includes(UploadRef)) {\r\n      itemUploadRef.current.push(UploadRef);\r\n    }\r\n    ////console.log(postItemsRef.current[1]);\r\n  };\r\n\r\n  const imageHandleChange = (e: any) => {\r\n    if (e.target.files && e.target.files.length > 0) {\r\n      const FileArray = Array.from(e.target.files).map((file: any) =>\r\n        URL.createObjectURL(file)\r\n      );\r\n\r\n      setselectedImage((prevImages: any) => prevImages.concat(FileArray));\r\n\r\n      setcropimage(FileArray[0]);\r\n\r\n      const formData = new FormData();\r\n\r\n      for (let i = 0; i < e.target.files.length; i++) {\r\n        formData.append(\"superImages\", e.target.files[i]);\r\n      }\r\n\r\n      setshowCrop(true);\r\n    }\r\n  };\r\n\r\n  ///////////////////////////////////////////////////////SUPER CROP ///////////////////////////////////\r\n\r\n  const cropCanvasRef: any = useRef(null);\r\n\r\n  ////\r\n  ////\r\n  ////\r\n  const [cropArea, setcropArea] = useState<any>(null);\r\n\r\n  //\r\n  const [crop, setcrop] = useState<any>({ x: 0, y: 0 });\r\n\r\n  const [cropToo, setcropToo] = useState<any>({ x: 0, y: 0 });\r\n\r\n  const [cropInitial, setcropInitial] = useState<any>({ x: 0, y: 0 });\r\n\r\n  const [cropOffset, setcropOffset] = useState<any>({ x: 0, y: 0 });\r\n\r\n  const [Drag, setDrag] = useState<boolean>(false);\r\n\r\n  const [SourceWidthForCropX, setSourceWidthForCropX] = useState(0);\r\n\r\n  const [SourceWidthForCropY, setSourceWidthForCropY] = useState(0);\r\n\r\n  const [cropwidth, setcropwidth] = useState(0);\r\n  const [cropheight, setcropheight] = useState(0);\r\n\r\n  const [canvasToimage, setcanvasToimage] = useState<boolean>(false);\r\n\r\n  const getpreviewFixedWidthRef = useRef<HTMLDivElement>(null);\r\n\r\n  const getCropHeightRef: any = useRef<HTMLDivElement>(null);\r\n\r\n  const getFixedCropWidthRef: any = useRef<HTMLDivElement>(null);\r\n\r\n  const [getCropHeight, setgetCropHeight] = useState(0);\r\n\r\n  const [getCropHeightRealImageRatio, setgetCropHeightRealImageRatio] =\r\n    useState(0);\r\n\r\n  const [getFixedCropWidth, setgetFixedCropWidth] = useState(0);\r\n\r\n  const [getpreviewFixedWidth, setgetpreviewFixedWidth] = useState(0);\r\n\r\n  const [CropImageHolder, setCropImageHolder] = useState<any>(null);\r\n\r\n  const [OriginalImageWidth, setOriginalImageWidth] = useState<number>(0);\r\n  const [OriginalImageHeight, setOriginalImageHeight] = useState<number>(0);\r\n\r\n  const [WideImageCheck, setWideImageCheck] = useState<boolean>(false);\r\n\r\n  const hdcanvasvalue = 2;\r\n\r\n  const [BoxCropActivated, setBoxCropActivated] = useState<boolean>(true);\r\n\r\n  const cropScrollRef: any = useRef(null);\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  ///GET OPTIONS SLIDER IMAGE WIDTH FROM MATERIAL UI GRID\r\n  useEffect(() => {\r\n    if (\r\n      getpreviewFixedWidthRef.current &&\r\n      getpreviewFixedWidthRef.current.clientWidth\r\n    ) {\r\n      setgetpreviewFixedWidth(getpreviewFixedWidthRef.current.clientWidth);\r\n    }\r\n\r\n    if (getCropHeightRef.current && getCropHeightRef.current.clientWidth) {\r\n      setgetCropHeight(getCropHeightRef.current.clientHeight * hdcanvasvalue);\r\n      setgetCropHeightRealImageRatio(getCropHeightRef.current.clientHeight);\r\n    }\r\n\r\n    if (\r\n      getFixedCropWidthRef.current &&\r\n      getFixedCropWidthRef.current.clientWidth\r\n    ) {\r\n      setgetFixedCropWidth(getFixedCropWidthRef.current.clientWidth);\r\n    }\r\n  }, []);\r\n  ///\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// HANDLE TOUCH START EVENT\r\n  const handleTouchStart = (e: any, type: any) => {\r\n    if (BoxCropActivated) {\r\n      if (type === 0) {\r\n        setcropInitial({\r\n          ...cropInitial,\r\n          x: e.clientX * 2.8 - cropOffset.x,\r\n          y: e.clientY * 3.3 - cropOffset.y,\r\n        });\r\n      } else {\r\n        setcropInitial({\r\n          ...cropInitial,\r\n          x: e.touches[0].clientX * 2.8 - cropOffset.x,\r\n          y: e.touches[0].clientY * 3.3 - cropOffset.y,\r\n        });\r\n      }\r\n      if (e.target) {\r\n        setDrag(true);\r\n      }\r\n    } else {\r\n      setBoxCropActivated(true);\r\n    }\r\n  };\r\n\r\n  const handleTouchEnd = () => {\r\n    setcropInitial({\r\n      ...cropInitial,\r\n      x: crop.x,\r\n      y: crop.y,\r\n    });\r\n    setDrag(false);\r\n  };\r\n\r\n  const handleTouchDrag = (e: any, type: any) => {\r\n    if (Drag) {\r\n      if (type === 0) {\r\n        setcrop({\r\n          ...crop,\r\n          x: e.clientX * 2.8 - cropInitial.x,\r\n          y: e.clientY * 3.3 - cropInitial.y,\r\n        });\r\n      } else {\r\n        setcrop({\r\n          ...crop,\r\n          x: e.touches[0].clientX * 2.8 - cropInitial.x,\r\n          y: e.touches[0].clientY * 3.3 - cropInitial.y,\r\n        });\r\n      }\r\n\r\n      setcropOffset({\r\n        ...cropOffset,\r\n        x: crop.x,\r\n        y: crop.y,\r\n      });\r\n    }\r\n  };\r\n\r\n  const draw = useCallback(\r\n    (ctx: any, dimensions: any, type: number, axis: number) => {\r\n      if (type === 1) {\r\n        ctx.drawImage(CropImageHolder, axis, 0, dimensions, getCropHeight);\r\n      } else if (type === 2) {\r\n        ctx.drawImage(CropImageHolder, 0, axis, getCropHeight, dimensions);\r\n      } else {\r\n        ctx.drawImage(\r\n          CropImageHolder,\r\n          0,\r\n          0,\r\n          OriginalImageWidth,\r\n          OriginalImageHeight\r\n        );\r\n      }\r\n    },\r\n    [OriginalImageWidth, OriginalImageHeight, CropImageHolder, getCropHeight]\r\n  );\r\n\r\n  useLayoutEffect(() => {\r\n    const Newcropimage: any = new Image();\r\n    Newcropimage.src = cropimage;\r\n    Newcropimage.onload = function () {\r\n      setCropImageHolder(Newcropimage);\r\n\r\n      var data1 = Newcropimage.naturalWidth;\r\n      var data2 = Newcropimage.naturalHeight;\r\n      setOriginalImageWidth(data1);\r\n      setOriginalImageHeight(data2);\r\n\r\n      if (Newcropimage.naturalWidth > Newcropimage.naturalHeight) {\r\n        setWideImageCheck(true);\r\n      } else {\r\n        setWideImageCheck(false);\r\n      }\r\n\r\n      setcropwidth(data1);\r\n      setcropheight(data2);\r\n    };\r\n  }, [cropimage, BoxCropActivated, showCrop]);\r\n\r\n  useLayoutEffect(() => {\r\n    if (CropImageHolder && cropCanvasRef.current) {\r\n      const ctx = cropCanvasRef.current.getContext(\"2d\");\r\n\r\n      var RatiofromOriginalandfixedHeight = OriginalImageHeight / getCropHeight;\r\n      var NewBoxRatioWidth_WIDEIMAGE =\r\n        OriginalImageWidth / RatiofromOriginalandfixedHeight;\r\n\r\n      setSourceWidthForCropX(NewBoxRatioWidth_WIDEIMAGE);\r\n\r\n      var RatiofromOriginalandfixedHeightx = OriginalImageWidth / getCropHeight;\r\n      var NewBoxRatioWidth_LONGIMAGE =\r\n        OriginalImageHeight / RatiofromOriginalandfixedHeightx;\r\n\r\n      setSourceWidthForCropY(NewBoxRatioWidth_LONGIMAGE);\r\n\r\n      var ratioh = (OriginalImageWidth * 3) / OriginalImageWidth;\r\n      var ratiow = (OriginalImageHeight * 3) / OriginalImageHeight;\r\n\r\n      if (BoxCropActivated) {\r\n        cropCanvasRef.current.width = getCropHeight;\r\n        cropCanvasRef.current.height = getCropHeight;\r\n      } else {\r\n        cropCanvasRef.current.width = OriginalImageWidth;\r\n        cropCanvasRef.current.height = OriginalImageHeight;\r\n      }\r\n\r\n      var centerpreview =\r\n        cropCanvasRef.current.width / 1.5 - NewBoxRatioWidth_LONGIMAGE / 1.5;\r\n\r\n      var xtraZoom = getCropHeight / NewBoxRatioWidth_WIDEIMAGE;\r\n\r\n      var centerCropCanvas =\r\n        cropCanvasRef.current.width / 2 - NewBoxRatioWidth_WIDEIMAGE / 2;\r\n\r\n      var RatiofromOriginalandfixedHeight =\r\n        OriginalImageHeight / getCropHeightRealImageRatio;\r\n      var newcropCSSWidth =\r\n        OriginalImageWidth / RatiofromOriginalandfixedHeight;\r\n\r\n      if (BoxCropActivated) {\r\n        var dragDistanceY = NewBoxRatioWidth_LONGIMAGE - getCropHeight;\r\n        var dragDistanceX = NewBoxRatioWidth_WIDEIMAGE - getCropHeight;\r\n\r\n        if (OriginalImageWidth > OriginalImageHeight) {\r\n          if (crop.x < -dragDistanceX) {\r\n            setcrop({ ...crop, x: -dragDistanceX });\r\n          } else if (crop.x > 0) {\r\n            setcrop({ ...crop, x: 0 });\r\n          } else {\r\n          }\r\n\r\n          requestAnimationFrame(() => {\r\n            draw(ctx, NewBoxRatioWidth_WIDEIMAGE, 1, crop.x);\r\n          });\r\n        } else {\r\n          if (crop.y < -dragDistanceY) {\r\n            setcrop({ ...crop, y: -dragDistanceY });\r\n          } else if (crop.y > 0) {\r\n            setcrop({ ...crop, y: 0 });\r\n          } else {\r\n          }\r\n\r\n          requestAnimationFrame(() => {\r\n            draw(ctx, NewBoxRatioWidth_LONGIMAGE, 2, crop.y);\r\n          });\r\n        }\r\n\r\n        cropCanvasRef.current.style.width = `${\r\n          getCropHeight / hdcanvasvalue\r\n        }px`;\r\n        cropCanvasRef.current.style.height = `${\r\n          getCropHeight / hdcanvasvalue\r\n        }px`;\r\n      } else {\r\n        requestAnimationFrame(() => {\r\n          draw(ctx, 0, 3, 0);\r\n        });\r\n\r\n        cropCanvasRef.current.style.width = `${newcropCSSWidth}px`;\r\n        cropCanvasRef.current.style.height = `${getCropHeightRealImageRatio}px`;\r\n      }\r\n    }\r\n  }, [\r\n    CropImageHolder,\r\n    cropCanvasRef,\r\n    BoxCropActivated,\r\n    OriginalImageWidth,\r\n    OriginalImageHeight,\r\n    crop,\r\n  ]);\r\n  const gg = () => {};\r\n\r\n  const cropaspectchange = () => {\r\n    setBoxCropActivated((BoxCropActivated) => !BoxCropActivated);\r\n  };\r\n\r\n  const complete = () => {\r\n    setcropToo({\r\n      ...cropToo,\r\n      x: crop.x,\r\n      y: crop.y,\r\n    });\r\n    setsuperCropLoadFade(true);\r\n    setTimeout(function () {\r\n      setshowCrop(false);\r\n      setcanvasToimage(true);\r\n    }, 500);\r\n  };\r\n\r\n  const blank = () => {};\r\n\r\n  //////////////////////////////////////////////////////////////////////SUPER CROP ///////////////////////////\r\n  return (\r\n    <>\r\n      <CropUploadMode\r\n        superCropLoadFade={superCropLoadFade}\r\n        showCrop={showCrop}\r\n        handleTouchStart={handleTouchStart}\r\n        handleTouchDrag={handleTouchDrag}\r\n        handleTouchEnd={handleTouchEnd}\r\n        cropCanvasRef={cropCanvasRef}\r\n        cropaspectchange={cropaspectchange}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport const UploadMenu = React.memo(UploadMenux);\r\n"]},"metadata":{},"sourceType":"module"}