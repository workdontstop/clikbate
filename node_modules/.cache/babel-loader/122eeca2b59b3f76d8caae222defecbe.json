{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\app-folder\\\\OptionInnerModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useCallback } from \"react\";\nimport AddRoundedIcon from \"@material-ui/icons/AddRounded\";\nimport { Grid, Switch, DialogContent } from \"@material-ui/core\";\nimport { useSpring, animated } from \"react-spring\";\nimport \"./OptionInnerModal.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar toggleDarkMode = false;\n\nfunction OptionInnerModalx({\n  closemodal,\n  showModal,\n  setShowModal,\n  darkmode,\n  setDarkmode\n}) {\n  _s();\n\n  var switchsize;\n  var marginData;\n  var fontData; ///\n  ///\n  ///\n  ///CONDITIONAL STATEMENT FOR DEVICE TYPE\n\n  if (matchPc) {\n    superFont = \"super-starz-text-Pc\";\n    optionsContainer = \"optionsContainer-Pc-Tab\";\n    switchsize = \"medium\";\n    marginData = marginDataPc;\n    fontData = fontDataPc; ///\n  } else if (matchTablet) {\n    superFont = \"super-starz-text-Tablet\";\n    optionsContainer = \"optionsContainer-Pc-Tab\";\n    switchsize = \"medium\";\n    marginData = marginDataPc;\n    fontData = fontDataTablet; ///\n  } else {\n    superFont = \"super-starz-text-Mobile\";\n    optionsContainer = \"optionsContainer-Mobile\";\n    switchsize = \"medium\";\n    marginData = marginDataMobile;\n    fontData = fontDataMobile;\n  } //\n  //\n  //\n  //USE SLIDE DOWN ANIMATION FROM REACT SPRING\n\n\n  const animation = useSpring({\n    config: {\n      duration: 250\n    },\n    opacity: showModal ? 1 : 0.0,\n    transform: showModal ? `translateY(0%)` : `translateY(-100%)`\n  }); //\n  //\n  //\n  //ESCAPE KEY CLOSE MODAL\n\n  const escapePress = useCallback(e => {\n    if (e.key === \"Escape\" && showModal) {\n      closemodal(0);\n    }\n  }, [showModal, closemodal]);\n  useEffect(() => {\n    document.addEventListener(\"keydown\", escapePress);\n    return () => document.removeEventListener(\"keydown\", escapePress);\n  }, [escapePress]); //\n  //\n  //\n  //USEREF TARGETS A DIV(BACKGROUND) AND CLOSES MODAL ON CLICK\n\n  const inputRef = useRef(null);\n\n  const onBackgroundFocus = e => {\n    if (inputRef.current === e.target) {\n      closemodal(0);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: showModal ? /*#__PURE__*/_jsxDEV(DialogContent, {\n      className: \"dialog-container dontallowhighlighting \",\n      onClick: onBackgroundFocus,\n      style: {\n        padding: \"0px\"\n      },\n      ref: inputRef,\n      children: /*#__PURE__*/_jsxDEV(animated.div, {\n        style: animation,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          className: darkmode ? \"Background-header-dark theme-more-container\" : \"Background-header-light theme-more-container\",\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            sm: 8,\n            md: 10,\n            xs: 7\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 2,\n            sm: 2,\n            md: 1,\n            className: \"zuperking\",\n            style: marginData,\n            children: /*#__PURE__*/_jsxDEV(Switch, {\n              size: switchsize,\n              checked: darkmode,\n              className: darkmode ? \"icon-color-dark dontallowhighlighting  \" : \"icon-color-light  dontallowhighlighting  \",\n              onChange: () => {\n                toggleDarkMode = !darkmode;\n                setDarkmode(!darkmode);\n                localStorage.setItem(\"darkmode\", toggleDarkMode.toString());\n                closemodal(0);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 3,\n            className: \"dontallowhighlighting add-rounded-icon-right\",\n            sm: 2,\n            md: 1,\n            children: /*#__PURE__*/_jsxDEV(AddRoundedIcon, {\n              className: darkmode ? \"make-small-icons-clickable-dark  dontallowhighlighting  \" : \"make-small-icons-clickable-light  dontallowhighlighting  \",\n              fontSize: \"large\",\n              style: fontData\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this) : null\n  }, void 0, false);\n}\n\n_s(OptionInnerModalx, \"nvTME0KW+X/IypzCs50LTEMrx+c=\", false, function () {\n  return [useSpring];\n});\n\n_c = OptionInnerModalx;\nexport const OptionInnerModal = /*#__PURE__*/React.memo(OptionInnerModalx);\n_c2 = OptionInnerModal;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"OptionInnerModalx\");\n$RefreshReg$(_c2, \"OptionInnerModal\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/app-folder/OptionInnerModal.tsx"],"names":["React","useRef","useEffect","useCallback","AddRoundedIcon","Grid","Switch","DialogContent","useSpring","animated","toggleDarkMode","OptionInnerModalx","closemodal","showModal","setShowModal","darkmode","setDarkmode","switchsize","marginData","fontData","matchPc","superFont","optionsContainer","marginDataPc","fontDataPc","matchTablet","fontDataTablet","marginDataMobile","fontDataMobile","animation","config","duration","opacity","transform","escapePress","e","key","document","addEventListener","removeEventListener","inputRef","onBackgroundFocus","current","target","padding","localStorage","setItem","toString","OptionInnerModal","memo"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useCallback } from \"react\";\r\nimport AddRoundedIcon from \"@material-ui/icons/AddRounded\";\r\nimport { Grid, Switch, DialogContent } from \"@material-ui/core\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport { IOptionInnerModal } from \"./appFolder-Interfaces\";\r\nimport \"./OptionInnerModal.css\";\r\n\r\nvar toggleDarkMode: boolean = false;\r\n\r\nfunction OptionInnerModalx({\r\n  closemodal,\r\n  showModal,\r\n  setShowModal,\r\n  darkmode,\r\n  setDarkmode,\r\n}: IOptionInnerModal): JSX.Element {\r\n  var switchsize: \"medium\" | \"small\" | undefined;\r\n  var marginData: CSS.Properties;\r\n  var fontData: CSS.Properties;\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  ///CONDITIONAL STATEMENT FOR DEVICE TYPE\r\n  if (matchPc) {\r\n    superFont = \"super-starz-text-Pc\";\r\n    optionsContainer = \"optionsContainer-Pc-Tab\";\r\n    switchsize = \"medium\";\r\n    marginData = marginDataPc;\r\n    fontData = fontDataPc;\r\n    ///\r\n  } else if (matchTablet) {\r\n    superFont = \"super-starz-text-Tablet\";\r\n    optionsContainer = \"optionsContainer-Pc-Tab\";\r\n    switchsize = \"medium\";\r\n    marginData = marginDataPc;\r\n    fontData = fontDataTablet;\r\n    ///\r\n  } else {\r\n    superFont = \"super-starz-text-Mobile\";\r\n    optionsContainer = \"optionsContainer-Mobile\";\r\n    switchsize = \"medium\";\r\n    marginData = marginDataMobile;\r\n    fontData = fontDataMobile;\r\n  }\r\n  //\r\n  //\r\n  //\r\n  //USE SLIDE DOWN ANIMATION FROM REACT SPRING\r\n  const animation = useSpring({\r\n    config: {\r\n      duration: 250,\r\n    },\r\n    opacity: showModal ? 1 : 0.0,\r\n    transform: showModal ? `translateY(0%)` : `translateY(-100%)`,\r\n  });\r\n\r\n  //\r\n  //\r\n  //\r\n  //ESCAPE KEY CLOSE MODAL\r\n  const escapePress = useCallback(\r\n    (e) => {\r\n      if (e.key === \"Escape\" && showModal) {\r\n        closemodal(0);\r\n      }\r\n    },\r\n    [showModal, closemodal]\r\n  );\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"keydown\", escapePress);\r\n    return () => document.removeEventListener(\"keydown\", escapePress);\r\n  }, [escapePress]);\r\n\r\n  //\r\n  //\r\n  //\r\n  //USEREF TARGETS A DIV(BACKGROUND) AND CLOSES MODAL ON CLICK\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const onBackgroundFocus = (e: any): void => {\r\n    if (inputRef.current === e.target) {\r\n      closemodal(0);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {showModal ? (\r\n        <DialogContent\r\n          className=\"dialog-container dontallowhighlighting \"\r\n          onClick={onBackgroundFocus}\r\n          style={{\r\n            padding: \"0px\",\r\n          }}\r\n          ref={inputRef}\r\n        >\r\n          <animated.div style={animation}>\r\n            <Grid\r\n              container\r\n              className={\r\n                darkmode\r\n                  ? \"Background-header-dark theme-more-container\"\r\n                  : \"Background-header-light theme-more-container\"\r\n              }\r\n            >\r\n              <Grid item sm={8} md={10} xs={7}></Grid>\r\n              <Grid\r\n                item\r\n                xs={2}\r\n                sm={2}\r\n                md={1}\r\n                className=\"zuperking\"\r\n                style={marginData}\r\n              >\r\n                <Switch\r\n                  size={switchsize}\r\n                  checked={darkmode}\r\n                  className={\r\n                    darkmode\r\n                      ? \"icon-color-dark dontallowhighlighting  \"\r\n                      : \"icon-color-light  dontallowhighlighting  \"\r\n                  }\r\n                  onChange={() => {\r\n                    toggleDarkMode = !darkmode;\r\n                    setDarkmode(!darkmode);\r\n                    localStorage.setItem(\"darkmode\", toggleDarkMode.toString());\r\n                    closemodal(0);\r\n                  }}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid\r\n                item\r\n                xs={3}\r\n                className=\"dontallowhighlighting add-rounded-icon-right\"\r\n                sm={2}\r\n                md={1}\r\n              >\r\n                <AddRoundedIcon\r\n                  className={\r\n                    darkmode\r\n                      ? \"make-small-icons-clickable-dark  dontallowhighlighting  \"\r\n                      : \"make-small-icons-clickable-light  dontallowhighlighting  \"\r\n                  }\r\n                  fontSize=\"large\"\r\n                  style={fontData}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </animated.div>\r\n        </DialogContent>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport const OptionInnerModal = React.memo(OptionInnerModalx);\r\n"]},"metadata":{},"sourceType":"module"}