{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\upload\\\\ImageTobeFiltered.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ImageTobeFilteredx({\n  itemUploadRef,\n  FilterSliderWidth,\n  index\n}) {\n  _s();\n\n  ///\n  ///\n  ///\n  const [imageHeight, setimageHeight] = useState(0);\n  const [imageWidth, setimageWidth] = useState(0);\n  const getimageDimensions = useRef(null);\n\n  const Imageloaded = () => {\n    if (getimageDimensions.current && getimageDimensions.current.clientWidth) {\n      setimageHeight(getimageDimensions.current.clientHeight);\n      setimageWidth(getimageDimensions.current.clientWidth);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"img\", {\n      ref: getimageDimensions,\n      onLoad: Imageloaded,\n      id: itemUploadRef.current[index],\n      src: itemUploadRef.current[index].src,\n      style: {\n        width: `${FilterSliderWidth}px`,\n        height: \"auto\",\n        position: \"relative\",\n        margin: \"auto\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(ImageTobeFilteredx, \"kQHn+p9mA7AEqCyPnRXSPkTPhZ0=\");\n\n_c = ImageTobeFilteredx;\nexport const ImageTobeFiltered = /*#__PURE__*/React.memo(ImageTobeFilteredx);\n_c2 = ImageTobeFiltered;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ImageTobeFilteredx\");\n$RefreshReg$(_c2, \"ImageTobeFiltered\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/upload/ImageTobeFiltered.tsx"],"names":["React","useRef","useState","ImageTobeFilteredx","itemUploadRef","FilterSliderWidth","index","imageHeight","setimageHeight","imageWidth","setimageWidth","getimageDimensions","Imageloaded","current","clientWidth","clientHeight","src","width","height","position","margin","ImageTobeFiltered","memo"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAmD,OAAnD;;;;AAKA,SAASC,kBAAT,CAA4B;AAC1BC,EAAAA,aAD0B;AAE1BC,EAAAA,iBAF0B;AAG1BC,EAAAA;AAH0B,CAA5B,EAIqB;AAAA;;AACnB;AACA;AACA;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAMS,kBAAuB,GAAGV,MAAM,CAAmB,IAAnB,CAAtC;;AAEA,QAAMW,WAAW,GAAG,MAAM;AACxB,QAAID,kBAAkB,CAACE,OAAnB,IAA8BF,kBAAkB,CAACE,OAAnB,CAA2BC,WAA7D,EAA0E;AACxEN,MAAAA,cAAc,CAACG,kBAAkB,CAACE,OAAnB,CAA2BE,YAA5B,CAAd;AACAL,MAAAA,aAAa,CAACC,kBAAkB,CAACE,OAAnB,CAA2BC,WAA5B,CAAb;AACD;AACF,GALD;;AAOA,sBACE;AAAA,2BACE;AACE,MAAA,GAAG,EAAEH,kBADP;AAEE,MAAA,MAAM,EAAEC,WAFV;AAGE,MAAA,EAAE,EAAER,aAAa,CAACS,OAAd,CAAsBP,KAAtB,CAHN;AAIE,MAAA,GAAG,EAAEF,aAAa,CAACS,OAAd,CAAsBP,KAAtB,EAA6BU,GAJpC;AAKE,MAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAG,GAAEZ,iBAAkB,IADvB;AAELa,QAAAA,MAAM,EAAE,MAFH;AAGLC,QAAAA,QAAQ,EAAE,UAHL;AAILC,QAAAA,MAAM,EAAE;AAJH;AALT;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAgBD;;GAnCQjB,kB;;KAAAA,kB;AAqCT,OAAO,MAAMkB,iBAAiB,gBAAGrB,KAAK,CAACsB,IAAN,CAAWnB,kBAAX,CAA1B;MAAMkB,iB","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nfunction ImageTobeFilteredx({\r\n  itemUploadRef,\r\n  FilterSliderWidth,\r\n  index,\r\n}: any): JSX.Element {\r\n  ///\r\n  ///\r\n  ///\r\n  const [imageHeight, setimageHeight] = useState(0);\r\n  const [imageWidth, setimageWidth] = useState(0);\r\n  const getimageDimensions: any = useRef<HTMLImageElement>(null);\r\n\r\n  const Imageloaded = () => {\r\n    if (getimageDimensions.current && getimageDimensions.current.clientWidth) {\r\n      setimageHeight(getimageDimensions.current.clientHeight);\r\n      setimageWidth(getimageDimensions.current.clientWidth);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <img\r\n        ref={getimageDimensions}\r\n        onLoad={Imageloaded}\r\n        id={itemUploadRef.current[index]}\r\n        src={itemUploadRef.current[index].src}\r\n        style={{\r\n          width: `${FilterSliderWidth}px`,\r\n          height: \"auto\",\r\n          position: \"relative\",\r\n          margin: \"auto\",\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport const ImageTobeFiltered = React.memo(ImageTobeFilteredx);\r\n"]},"metadata":{},"sourceType":"module"}