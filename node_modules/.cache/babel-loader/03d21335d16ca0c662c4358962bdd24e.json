{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\upload\\\\PreviewCanvas.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction PreviewCanvasx({\n  cropCanvasRef,\n  image,\n  getpreviewFixedWidth,\n  index,\n  CropImageHolder,\n  zoom,\n  cropheight,\n  cropwidth\n}) {\n  _s();\n\n  ///\n  ///\n  ///DARKMODE FROM REDUX\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const canvasRef = useRef(null);\n  const [imagehold, setimagehold] = useState(null);\n  const [imageWidth, setimageWidth] = useState(null);\n  const [imageHeight, setimageHeight] = useState(null);\n  const [imageW, setimageW] = useState(null);\n  const [imageH, setimageH] = useState(null);\n  const [imageWN, setimageWN] = useState(null);\n  const [imageHN, setimageHN] = useState(null);\n  useEffect(() => {\n    const previewFileReadimage = new Image();\n    previewFileReadimage.src = image;\n\n    previewFileReadimage.onload = function () {\n      setimagehold(previewFileReadimage);\n      let nw = 0;\n      let nh = 0;\n\n      if (CropImageHolder) {\n        setimageW(cropCanvasRef.current.width * 1.5);\n        setimageH(cropCanvasRef.current.height * 1.5);\n      } else {\n        setimageW(previewFileReadimage.naturalWidth * 1.5);\n        setimageH(previewFileReadimage.naturalHeight * 1.5);\n      }\n\n      let CropAspectRatio = cropwidth / cropheight;\n      let h = getpreviewFixedWidth / CropAspectRatio;\n      setimageHeight(h);\n      let aspectHx = previewFileReadimage.naturalHeight / previewFileReadimage.naturalWidth;\n      let hx = imageH / aspectHx;\n      setimageHN(hx);\n    };\n  }, [image, imageHeight, getpreviewFixedWidth, cropCanvasRef, CropImageHolder, cropwidth, cropheight]);\n  useEffect(() => {\n    if (imagehold && canvasRef.current) {\n      const ctx = canvasRef.current.getContext(\"2d\");\n      canvasRef.current.height = imageH * zoom;\n      canvasRef.current.width = imageW * zoom;\n      var dx = canvasRef.current.width / 2 - imageHN * zoom / 2;\n      ctx.drawImage(imagehold, dx, 0, imageHN * zoom, imageH * zoom);\n      canvasRef.current.style.width = `${getpreviewFixedWidth}px`;\n      canvasRef.current.style.height = `${imageHeight}px`;\n    }\n  }, [imagehold, canvasRef, CropImageHolder, imageHN]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      className: darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\",\n      ref: canvasRef,\n      style: {\n        padding: \"0px\",\n        marginTop: index === 0 || index === 1 || index === 2 ? \"0px\" : \"-5px\"\n      }\n    }, image, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(PreviewCanvasx, \"b5z37bkIXtZR1hyyDFKn1JHs3eg=\", false, function () {\n  return [useSelector];\n});\n\n_c = PreviewCanvasx;\nexport const PreviewCanvas = /*#__PURE__*/React.memo(PreviewCanvasx);\n_c2 = PreviewCanvas;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PreviewCanvasx\");\n$RefreshReg$(_c2, \"PreviewCanvas\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/upload/PreviewCanvas.tsx"],"names":["React","useRef","useState","useEffect","useSelector","PreviewCanvasx","cropCanvasRef","image","getpreviewFixedWidth","index","CropImageHolder","zoom","cropheight","cropwidth","darkmode","state","GlobalReducer","darkmodeReducer","canvasRef","imagehold","setimagehold","imageWidth","setimageWidth","imageHeight","setimageHeight","imageW","setimageW","imageH","setimageH","imageWN","setimageWN","imageHN","setimageHN","previewFileReadimage","Image","src","onload","nw","nh","current","width","height","naturalWidth","naturalHeight","CropAspectRatio","h","aspectHx","hx","ctx","getContext","dx","drawImage","style","padding","marginTop","PreviewCanvas","memo"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport Cropper from \"react-easy-crop\";\r\nimport MusicNoteIcon from \"@mui/icons-material/MusicNote\";\r\nimport PhotoIcon from \"@mui/icons-material/Photo\";\r\nimport GifIcon from \"@mui/icons-material/Gif\";\r\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\r\nimport Slider from \"@mui/material/Slider\";\r\nimport { AnySoaRecord } from \"dns\";\r\n\r\nfunction PreviewCanvasx({\r\n  cropCanvasRef,\r\n  image,\r\n  getpreviewFixedWidth,\r\n  index,\r\n  CropImageHolder,\r\n  zoom,\r\n  cropheight,\r\n  cropwidth,\r\n}: any): JSX.Element {\r\n  ///\r\n  ///\r\n  ///DARKMODE FROM REDUX\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n\r\n  const darkmodeReducer = darkmode;\r\n\r\n  const canvasRef: any = useRef(null);\r\n\r\n  const [imagehold, setimagehold] = useState<any>(null);\r\n  const [imageWidth, setimageWidth] = useState<any>(null);\r\n  const [imageHeight, setimageHeight] = useState<any>(null);\r\n\r\n  const [imageW, setimageW] = useState<any>(null);\r\n  const [imageH, setimageH] = useState<any>(null);\r\n\r\n  const [imageWN, setimageWN] = useState<any>(null);\r\n  const [imageHN, setimageHN] = useState<any>(null);\r\n\r\n  useEffect(() => {\r\n    const previewFileReadimage = new Image();\r\n    previewFileReadimage.src = image;\r\n    previewFileReadimage.onload = function () {\r\n      setimagehold(previewFileReadimage);\r\n\r\n      let nw = 0;\r\n      let nh = 0;\r\n\r\n      if (CropImageHolder) {\r\n        setimageW(cropCanvasRef.current.width * 1.5);\r\n        setimageH(cropCanvasRef.current.height * 1.5);\r\n      } else {\r\n        setimageW(previewFileReadimage.naturalWidth * 1.5);\r\n        setimageH(previewFileReadimage.naturalHeight * 1.5);\r\n      }\r\n\r\n      let CropAspectRatio = cropwidth / cropheight;\r\n      let h = getpreviewFixedWidth / CropAspectRatio;\r\n      setimageHeight(h);\r\n\r\n      let aspectHx =\r\n        previewFileReadimage.naturalHeight / previewFileReadimage.naturalWidth;\r\n      let hx = imageH / aspectHx;\r\n      setimageHN(hx);\r\n    };\r\n  }, [\r\n    image,\r\n    imageHeight,\r\n    getpreviewFixedWidth,\r\n    cropCanvasRef,\r\n    CropImageHolder,\r\n    cropwidth,\r\n    cropheight,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (imagehold && canvasRef.current) {\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n\r\n      canvasRef.current.height = imageH * zoom;\r\n      canvasRef.current.width = imageW * zoom;\r\n\r\n      var dx = canvasRef.current.width / 2 - (imageHN * zoom) / 2;\r\n\r\n      ctx.drawImage(imagehold, dx, 0, imageHN * zoom, imageH * zoom);\r\n\r\n      canvasRef.current.style.width = `${getpreviewFixedWidth}px`;\r\n      canvasRef.current.style.height = `${imageHeight}px`;\r\n    }\r\n  }, [imagehold, canvasRef, CropImageHolder, imageHN]);\r\n\r\n  return (\r\n    <>\r\n      <canvas\r\n        className={darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\"}\r\n        ref={canvasRef}\r\n        key={image}\r\n        style={{\r\n          padding: \"0px\",\r\n          marginTop: index === 0 || index === 1 || index === 2 ? \"0px\" : \"-5px\",\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport const PreviewCanvas = React.memo(PreviewCanvasx);\r\n"]},"metadata":{},"sourceType":"module"}