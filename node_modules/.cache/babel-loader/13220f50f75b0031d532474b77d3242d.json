{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\upload\\\\PreviewCanvas.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction PreviewCanvasx({\n  cropCanvasRef,\n  image,\n  getpreviewFixedWidth,\n  index,\n  CropImageHolder,\n  zoom,\n  cropheight,\n  cropwidth,\n  BoxCropActivated,\n  hdcanvasvalue,\n  SourceWidthForCropX,\n  SourceWidthForCropY,\n  crop\n}) {\n  _s();\n\n  ///\n  ///\n  ///DARKMODE FROM REDUX\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const canvasRef = useRef(null);\n  const [previewFilehold, setpreviewFilehold] = useState(null);\n  const [previewCSSHeight, setpreviewCSSHeight] = useState(null);\n  const [cropCanvasWidth, setcropCanvasWidth] = useState(null);\n  const [cropCanvasHeight, setcropCanvasHeight] = useState(null);\n  const [imageWidthWithAspectRatio, setimageWidthWithAspectRatio] = useState(null);\n  const [imageWidthWithAspectRatioxx, setimageWidthWithAspectRatioxx] = useState(null);\n  useEffect(() => {\n    const previewFileReadimage = new Image();\n    previewFileReadimage.src = image;\n\n    previewFileReadimage.onload = function () {\n      setpreviewFilehold(previewFileReadimage);\n\n      if (CropImageHolder) {\n        setcropCanvasWidth(cropCanvasRef.current.width * 1.5);\n        setcropCanvasHeight(cropCanvasRef.current.height * 1.5);\n      } else {\n        setcropCanvasWidth(previewFileReadimage.naturalWidth * 1.5);\n        setcropCanvasHeight(previewFileReadimage.naturalHeight * 1.5);\n      }\n\n      let CropAspectRatio = cropwidth / cropheight;\n      let newheight = getpreviewFixedWidth / CropAspectRatio;\n      setpreviewCSSHeight(newheight);\n      let AspectRatioPrevHeightandWidth = previewFileReadimage.naturalHeight / previewFileReadimage.naturalWidth;\n      let newWidth = cropCanvasHeight / AspectRatioPrevHeightandWidth;\n      setimageWidthWithAspectRatio(newWidth);\n      let AspectRatioPrevHeightandWidthx = cropCanvasWidth / cropCanvasHeight;\n      let newWidthx = getpreviewFixedWidth / AspectRatioPrevHeightandWidthx;\n      setimageWidthWithAspectRatioxx(newWidthx);\n    };\n  }, [image, previewCSSHeight, getpreviewFixedWidth, cropCanvasRef, CropImageHolder, cropwidth, cropheight]);\n  useEffect(() => {\n    if (previewFilehold && canvasRef.current) {\n      const ctx = canvasRef.current.getContext(\"2d\");\n      canvasRef.current.height = cropCanvasHeight;\n      canvasRef.current.width = cropCanvasWidth;\n\n      if (BoxCropActivated) {\n        if (previewFilehold.naturalWidth > previewFilehold.naturalHeight) {\n          var zoomINBOXWide = previewFilehold.naturalWidth / previewFilehold.naturalHeight;\n          let AspectRatioPrevHeightandWidthxWideCRop = previewFilehold.naturalWidth / previewFilehold.naturalHeight;\n          let boxWIDEheight = cropCanvasWidth * zoomINBOXWide / AspectRatioPrevHeightandWidthxWideCRop;\n          var centerpreview = canvasRef.current.width / 2 - cropCanvasWidth * zoomINBOXWide / 2;\n          ctx.drawImage(previewFilehold, crop.x * cropCanvasWidth * zoom * zoomINBOXWide / SourceWidthForCropX, crop.y, cropCanvasWidth * zoom * zoomINBOXWide, boxWIDEheight * zoom);\n        } else {\n          let AspectRatioPrevHeightandWidthxBox = previewFilehold.naturalWidth / previewFilehold.naturalHeight;\n          let boxedHeight = cropCanvasWidth / AspectRatioPrevHeightandWidthxBox;\n          var cr = crop.y;\n          var bb = boxedHeight * zoom - cropCanvasHeight;\n\n          if (crop.y < -bb) {\n            cr = -bb;\n          } else if (crop.y > 0) {\n            cr = 0;\n            var yOffset = 0;\n          } else {}\n\n          ctx.drawImage(previewFilehold, crop.x, cr * boxedHeight * zoom / SourceWidthForCropY, cropCanvasWidth * zoom, boxedHeight * zoom);\n        }\n\n        let CropAspectRatio = cropCanvasWidth / cropCanvasHeight;\n        let newheightq = getpreviewFixedWidth / CropAspectRatio;\n        canvasRef.current.style.width = `${getpreviewFixedWidth}px`;\n        canvasRef.current.style.height = `${newheightq}px`;\n      } else {\n        var xtraZoom = cropCanvasWidth / imageWidthWithAspectRatio;\n        var centerpreview = canvasRef.current.width / 2 - imageWidthWithAspectRatio / 2;\n        var centerpreview2 = canvasRef.current.height / 3 - cropCanvasHeight * xtraZoom / 3;\n\n        if (imageWidthWithAspectRatio < cropCanvasWidth) {\n          if (cropCanvasWidth > cropCanvasHeight) {\n            ////WIDE IMAGE SOURCE NOT PROPERLY FITTED\n            ctx.drawImage(previewFilehold, 0, centerpreview2, imageWidthWithAspectRatio * zoom * xtraZoom, cropCanvasHeight * zoom * xtraZoom);\n          } else {\n            ////LONG IMAGE SOURCE NOT PROPERLY FITTED\n            ctx.drawImage(previewFilehold, 0, 0, imageWidthWithAspectRatio * zoom * xtraZoom, cropCanvasHeight * zoom * xtraZoom);\n          }\n        } else {\n          ////////LONG IMAGE SOURCE WIDE IMAGE SOURCE\n          ctx.drawImage(previewFilehold, centerpreview, 0, imageWidthWithAspectRatio * zoom, cropCanvasHeight * zoom);\n        }\n\n        canvasRef.current.style.width = `${getpreviewFixedWidth}px`;\n        canvasRef.current.style.height = `${previewCSSHeight}px`;\n      }\n    }\n  }, [previewFilehold, canvasRef, CropImageHolder, imageWidthWithAspectRatio]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      className: darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\",\n      ref: canvasRef,\n      style: {\n        padding: \"0px\",\n        marginTop: index === 0 || index === 1 || index === 2 ? \"0px\" : \"-5px\"\n      }\n    }, image, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(PreviewCanvasx, \"vqIYrmO8XcrG42JgmRxD6mXj/N8=\", false, function () {\n  return [useSelector];\n});\n\n_c = PreviewCanvasx;\nexport const PreviewCanvas = /*#__PURE__*/React.memo(PreviewCanvasx);\n_c2 = PreviewCanvas;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PreviewCanvasx\");\n$RefreshReg$(_c2, \"PreviewCanvas\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/upload/PreviewCanvas.tsx"],"names":["React","useRef","useState","useEffect","useSelector","PreviewCanvasx","cropCanvasRef","image","getpreviewFixedWidth","index","CropImageHolder","zoom","cropheight","cropwidth","BoxCropActivated","hdcanvasvalue","SourceWidthForCropX","SourceWidthForCropY","crop","darkmode","state","GlobalReducer","darkmodeReducer","canvasRef","previewFilehold","setpreviewFilehold","previewCSSHeight","setpreviewCSSHeight","cropCanvasWidth","setcropCanvasWidth","cropCanvasHeight","setcropCanvasHeight","imageWidthWithAspectRatio","setimageWidthWithAspectRatio","imageWidthWithAspectRatioxx","setimageWidthWithAspectRatioxx","previewFileReadimage","Image","src","onload","current","width","height","naturalWidth","naturalHeight","CropAspectRatio","newheight","AspectRatioPrevHeightandWidth","newWidth","AspectRatioPrevHeightandWidthx","newWidthx","ctx","getContext","zoomINBOXWide","AspectRatioPrevHeightandWidthxWideCRop","boxWIDEheight","centerpreview","drawImage","x","y","AspectRatioPrevHeightandWidthxBox","boxedHeight","cr","bb","yOffset","newheightq","style","xtraZoom","centerpreview2","padding","marginTop","PreviewCanvas","memo"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport Cropper from \"react-easy-crop\";\r\nimport MusicNoteIcon from \"@mui/icons-material/MusicNote\";\r\nimport PhotoIcon from \"@mui/icons-material/Photo\";\r\nimport GifIcon from \"@mui/icons-material/Gif\";\r\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\r\nimport Slider from \"@mui/material/Slider\";\r\nimport { AnySoaRecord } from \"dns\";\r\n\r\nfunction PreviewCanvasx({\r\n  cropCanvasRef,\r\n  image,\r\n  getpreviewFixedWidth,\r\n  index,\r\n  CropImageHolder,\r\n  zoom,\r\n  cropheight,\r\n  cropwidth,\r\n  BoxCropActivated,\r\n  hdcanvasvalue,\r\n  SourceWidthForCropX,\r\n  SourceWidthForCropY,\r\n  crop,\r\n}: any): JSX.Element {\r\n  ///\r\n  ///\r\n  ///DARKMODE FROM REDUX\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n\r\n  const darkmodeReducer = darkmode;\r\n\r\n  const canvasRef: any = useRef(null);\r\n\r\n  const [previewFilehold, setpreviewFilehold] = useState<any>(null);\r\n\r\n  const [previewCSSHeight, setpreviewCSSHeight] = useState<any>(null);\r\n\r\n  const [cropCanvasWidth, setcropCanvasWidth] = useState<any>(null);\r\n\r\n  const [cropCanvasHeight, setcropCanvasHeight] = useState<any>(null);\r\n\r\n  const [imageWidthWithAspectRatio, setimageWidthWithAspectRatio] =\r\n    useState<any>(null);\r\n\r\n  const [imageWidthWithAspectRatioxx, setimageWidthWithAspectRatioxx] =\r\n    useState<any>(null);\r\n\r\n  useEffect(() => {\r\n    const previewFileReadimage = new Image();\r\n    previewFileReadimage.src = image;\r\n    previewFileReadimage.onload = function () {\r\n      setpreviewFilehold(previewFileReadimage);\r\n\r\n      if (CropImageHolder) {\r\n        setcropCanvasWidth(cropCanvasRef.current.width * 1.5);\r\n        setcropCanvasHeight(cropCanvasRef.current.height * 1.5);\r\n      } else {\r\n        setcropCanvasWidth(previewFileReadimage.naturalWidth * 1.5);\r\n        setcropCanvasHeight(previewFileReadimage.naturalHeight * 1.5);\r\n      }\r\n\r\n      let CropAspectRatio = cropwidth / cropheight;\r\n      let newheight = getpreviewFixedWidth / CropAspectRatio;\r\n      setpreviewCSSHeight(newheight);\r\n\r\n      let AspectRatioPrevHeightandWidth =\r\n        previewFileReadimage.naturalHeight / previewFileReadimage.naturalWidth;\r\n      let newWidth = cropCanvasHeight / AspectRatioPrevHeightandWidth;\r\n      setimageWidthWithAspectRatio(newWidth);\r\n\r\n      let AspectRatioPrevHeightandWidthx = cropCanvasWidth / cropCanvasHeight;\r\n      let newWidthx = getpreviewFixedWidth / AspectRatioPrevHeightandWidthx;\r\n      setimageWidthWithAspectRatioxx(newWidthx);\r\n    };\r\n  }, [\r\n    image,\r\n    previewCSSHeight,\r\n    getpreviewFixedWidth,\r\n    cropCanvasRef,\r\n    CropImageHolder,\r\n    cropwidth,\r\n    cropheight,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (previewFilehold && canvasRef.current) {\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n\r\n      canvasRef.current.height = cropCanvasHeight;\r\n      canvasRef.current.width = cropCanvasWidth;\r\n\r\n      if (BoxCropActivated) {\r\n        if (previewFilehold.naturalWidth > previewFilehold.naturalHeight) {\r\n          var zoomINBOXWide =\r\n            previewFilehold.naturalWidth / previewFilehold.naturalHeight;\r\n\r\n          let AspectRatioPrevHeightandWidthxWideCRop =\r\n            previewFilehold.naturalWidth / previewFilehold.naturalHeight;\r\n          let boxWIDEheight =\r\n            (cropCanvasWidth * zoomINBOXWide) /\r\n            AspectRatioPrevHeightandWidthxWideCRop;\r\n\r\n          var centerpreview =\r\n            canvasRef.current.width / 2 - (cropCanvasWidth * zoomINBOXWide) / 2;\r\n\r\n          ctx.drawImage(\r\n            previewFilehold,\r\n            (crop.x * cropCanvasWidth * zoom * zoomINBOXWide) /\r\n              SourceWidthForCropX,\r\n            crop.y,\r\n            cropCanvasWidth * zoom * zoomINBOXWide,\r\n            boxWIDEheight * zoom\r\n          );\r\n        } else {\r\n          let AspectRatioPrevHeightandWidthxBox =\r\n            previewFilehold.naturalWidth / previewFilehold.naturalHeight;\r\n          let boxedHeight = cropCanvasWidth / AspectRatioPrevHeightandWidthxBox;\r\n\r\n          var cr = crop.y;\r\n          var bb = boxedHeight * zoom - cropCanvasHeight;\r\n          if (crop.y < -bb) {\r\n            cr = -bb;\r\n          } else if (crop.y > 0) {\r\n            cr = 0;\r\n            var yOffset = 0;\r\n          } else {\r\n          }\r\n\r\n          ctx.drawImage(\r\n            previewFilehold,\r\n            crop.x,\r\n            (cr * boxedHeight * zoom) / SourceWidthForCropY,\r\n            cropCanvasWidth * zoom,\r\n            boxedHeight * zoom\r\n          );\r\n        }\r\n\r\n        let CropAspectRatio = cropCanvasWidth / cropCanvasHeight;\r\n        let newheightq = getpreviewFixedWidth / CropAspectRatio;\r\n\r\n        canvasRef.current.style.width = `${getpreviewFixedWidth}px`;\r\n        canvasRef.current.style.height = `${newheightq}px`;\r\n      } else {\r\n        var xtraZoom = cropCanvasWidth / imageWidthWithAspectRatio;\r\n\r\n        var centerpreview =\r\n          canvasRef.current.width / 2 - imageWidthWithAspectRatio / 2;\r\n\r\n        var centerpreview2 =\r\n          canvasRef.current.height / 3 - (cropCanvasHeight * xtraZoom) / 3;\r\n\r\n        if (imageWidthWithAspectRatio < cropCanvasWidth) {\r\n          if (cropCanvasWidth > cropCanvasHeight) {\r\n            ////WIDE IMAGE SOURCE NOT PROPERLY FITTED\r\n            ctx.drawImage(\r\n              previewFilehold,\r\n              0,\r\n              centerpreview2,\r\n              imageWidthWithAspectRatio * zoom * xtraZoom,\r\n              cropCanvasHeight * zoom * xtraZoom\r\n            );\r\n          } else {\r\n            ////LONG IMAGE SOURCE NOT PROPERLY FITTED\r\n            ctx.drawImage(\r\n              previewFilehold,\r\n              0,\r\n              0,\r\n              imageWidthWithAspectRatio * zoom * xtraZoom,\r\n              cropCanvasHeight * zoom * xtraZoom\r\n            );\r\n          }\r\n        } else {\r\n          ////////LONG IMAGE SOURCE WIDE IMAGE SOURCE\r\n          ctx.drawImage(\r\n            previewFilehold,\r\n            centerpreview,\r\n            0,\r\n            imageWidthWithAspectRatio * zoom,\r\n            cropCanvasHeight * zoom\r\n          );\r\n        }\r\n        canvasRef.current.style.width = `${getpreviewFixedWidth}px`;\r\n        canvasRef.current.style.height = `${previewCSSHeight}px`;\r\n      }\r\n    }\r\n  }, [previewFilehold, canvasRef, CropImageHolder, imageWidthWithAspectRatio]);\r\n\r\n  return (\r\n    <>\r\n      <canvas\r\n        className={darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\"}\r\n        ref={canvasRef}\r\n        key={image}\r\n        style={{\r\n          padding: \"0px\",\r\n          marginTop: index === 0 || index === 1 || index === 2 ? \"0px\" : \"-5px\",\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport const PreviewCanvas = React.memo(PreviewCanvasx);\r\n"]},"metadata":{},"sourceType":"module"}