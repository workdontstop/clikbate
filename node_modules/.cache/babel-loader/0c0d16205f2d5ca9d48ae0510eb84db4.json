{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oghen\\\\OneDrive\\\\Documents\\\\ClikBate\\\\super\\\\src\\\\profile\\\\Taskbar.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState } from \"react\";\nimport Cropper from \"react-easy-crop\";\nimport \"./styles.css\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Taskbarx({\n  showModalUploadTask,\n  uploadClose\n}) {\n  _s();\n\n  const [crop, setCrop] = useState({\n    x: 0,\n    y: 0\n  });\n  const [zoom, setZoom] = useState(1);\n  const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\n    console.log(croppedArea, croppedAreaPixels);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"crop-container\",\n        children: /*#__PURE__*/_jsxDEV(Cropper, {\n          image: prevImage[0],\n          crop: crop,\n          zoom: zoom,\n          aspect: 4 / 3,\n          onCropChange: setCrop,\n          onCropComplete: onCropComplete,\n          onZoomChange: setZoom\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: /*#__PURE__*/_jsxDEV(Slider, {\n          value: zoom,\n          min: 1,\n          max: 3,\n          step: 0.1,\n          \"aria-labelledby\": \"Zoom\",\n          onChange: (e, zoom) => setZoom(Number(zoom)),\n          classes: {\n            root: \"slider\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(Taskbarx, \"MzfQQXsumJgblMHE+XNyHptGN88=\");\n\n_c = Taskbarx;\nexport const Taskbar = /*#__PURE__*/React.memo(Taskbarx);\n_c2 = Taskbar;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Taskbarx\");\n$RefreshReg$(_c2, \"Taskbar\");","map":{"version":3,"sources":["C:/Users/oghen/OneDrive/Documents/ClikBate/super/src/profile/Taskbar.tsx"],"names":["React","useCallback","useState","Cropper","Slider","Taskbarx","showModalUploadTask","uploadClose","crop","setCrop","x","y","zoom","setZoom","onCropComplete","croppedArea","croppedAreaPixels","console","log","prevImage","e","Number","root","Taskbar","memo"],"mappings":";;;AAAA,OAAOA,KAAP,IAGEC,WAHF,EAIEC,QAJF,QAMO,OANP;AAYA,OAAOC,OAAP,MAAoB,iBAApB;AAEA,OAAO,cAAP;AAGA,OAAOC,MAAP,MAAmB,0BAAnB;;;;AAGA,SAASC,QAAT,CAAkB;AAChBC,EAAAA,mBADgB;AAEhBC,EAAAA;AAFgB,CAAlB,EAIqB;AAAA;;AAGnB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAQ;AAAEQ,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE;AAAX,GAAR,CAAhC;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAMY,cAAc,GAAGb,WAAW,CAChC,CAACc,WAAD,EAAoBC,iBAApB,KAAgD;AAC9CC,IAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ,EAAyBC,iBAAzB;AACD,GAH+B,EAIhC,EAJgC,CAAlC;AAaA,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,+BACE,QAAC,OAAD;AACE,UAAA,KAAK,EAAEG,SAAS,CAAC,CAAD,CADlB;AAEE,UAAA,IAAI,EAAEX,IAFR;AAGE,UAAA,IAAI,EAAEI,IAHR;AAIE,UAAA,MAAM,EAAE,IAAI,CAJd;AAKE,UAAA,YAAY,EAAEH,OALhB;AAME,UAAA,cAAc,EAAEK,cANlB;AAOE,UAAA,YAAY,EAAED;AAPhB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAYE;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA,+BACE,QAAC,MAAD;AACE,UAAA,KAAK,EAAED,IADT;AAEE,UAAA,GAAG,EAAE,CAFP;AAGE,UAAA,GAAG,EAAE,CAHP;AAIE,UAAA,IAAI,EAAE,GAJR;AAKE,6BAAgB,MALlB;AAME,UAAA,QAAQ,EAAE,CAACQ,CAAD,EAAIR,IAAJ,KAAaC,OAAO,CAACQ,MAAM,CAACT,IAAD,CAAP,CANhC;AAOE,UAAA,OAAO,EAAE;AAAEU,YAAAA,IAAI,EAAE;AAAR;AAPX;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAZF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AA4BD;;GAlDQjB,Q;;KAAAA,Q;AAoDT,OAAO,MAAMkB,OAAO,gBAAGvB,KAAK,CAACwB,IAAN,CAAWnB,QAAX,CAAhB;MAAMkB,O","sourcesContent":["import React, {\r\n  useRef,\r\n  useEffect,\r\n  useCallback,\r\n  useState,\r\n  useLayoutEffect,\r\n} from \"react\";\r\nimport ControlPointDuplicateIcon from \"@mui/icons-material/ControlPointDuplicate\";\r\n\r\n\r\n\r\n\r\nimport Cropper from \"react-easy-crop\";\r\nimport { Point, Area } from \"react-easy-crop/types\";\r\nimport \"./styles.css\";\r\n\r\n\r\nimport Slider from \"@material-ui/core/Slider\";\r\n\r\n\r\nfunction Taskbarx({\r\n  showModalUploadTask,\r\n  uploadClose,\r\n\r\n}: any): JSX.Element {\r\n\r\n\r\n  const [crop, setCrop] = useState<Point>({ x: 0, y: 0 });\r\n  const [zoom, setZoom] = useState(1);\r\n  const onCropComplete = useCallback(\r\n    (croppedArea: Area, croppedAreaPixels: Area) => {\r\n      console.log(croppedArea, croppedAreaPixels);\r\n    },\r\n    []\r\n  );\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className=\"App\">\r\n        <div className=\"crop-container\">\r\n          <Cropper\r\n            image={prevImage[0]}\r\n            crop={crop}\r\n            zoom={zoom}\r\n            aspect={4 / 3}\r\n            onCropChange={setCrop}\r\n            onCropComplete={onCropComplete}\r\n            onZoomChange={setZoom}\r\n          />\r\n        </div>\r\n        <div className=\"controls\">\r\n          <Slider\r\n            value={zoom}\r\n            min={1}\r\n            max={3}\r\n            step={0.1}\r\n            aria-labelledby=\"Zoom\"\r\n            onChange={(e, zoom) => setZoom(Number(zoom))}\r\n            classes={{ root: \"slider\" }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport const Taskbar = React.memo(Taskbarx);\r\n"]},"metadata":{},"sourceType":"module"}