{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\upload\\\\Upload.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from \"react\";\nimport { DialogContent } from \"@material-ui/core\";\nimport { useSpring, animated } from \"react-spring\";\nimport { OptionsSlider } from \"../profile/OptionsSlider\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Uploadx({\n  showModalUpload,\n  closeUploadModal,\n  OpenUploadModal,\n  getSliderWidth\n}) {\n  _s();\n\n  //\n  //\n  //\n  const [allowOverflow, setallowOverflow] = useState(true); //\n  //\n  //\n  //USE SLIDE DOWN ANIMATION FROM REACT SPRING\n\n  const animation = useSpring({\n    config: {\n      duration: 600\n    },\n    opacity: showModalUpload ? 1 : 0,\n    transform: showModalUpload ? `translateY(0%)` : `translateY(-100%)`\n  }); ///\n  ///\n  ///\n  /// GET DARKMODE FROM REDUX STORE\n\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n\n  const blank = () => {};\n\n  const {\n    REACT_APP_SUPERSTARZ_URL\n  } = process.env;\n  const cropTOPLEVELScrollRef = useRef(null);\n  const refWithimageData = useRef([]); ///\n  ///\n  ///\n  ///CREATE REFS FROM POSTS AND ADD THEM TO ARRAY\n\n  const addfinishedCropRef = itemsRef => {\n    if (itemsRef && !refWithimageData.current.includes(itemsRef)) {\n      refWithimageData.current.push(itemsRef);\n    } ////console.log(postItemsRef.current[1]);\n\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: showModalUpload ? /*#__PURE__*/_jsxDEV(DialogContent, {\n      className: darkmodeReducer ? \"dialog-container\" : \"dialog-container\",\n      style: {\n        padding: \"0px\",\n        height: \"100vh\",\n        position: \"fixed\",\n        zIndex: 100,\n        cursor: \"default\",\n        overflow: \"hidden\"\n      },\n      children: /*#__PURE__*/_jsxDEV(animated.div, {\n        style: animation,\n        children: /*#__PURE__*/_jsxDEV(DialogContent, {\n          ref: cropTOPLEVELScrollRef,\n          className: darkmodeReducer ? \" dontallowhighlighting modal-containerDark  postscroll-dark \" : \" dontallowhighlighting  modal-containerLight  postscroll-light \",\n          style: {\n            padding: \"0px\",\n            height: \"100vh\",\n            overflow: allowOverflow ? \"auto\" : \"hidden\"\n          },\n          children: /*#__PURE__*/_jsxDEV(OptionsSlider, {\n            typeUpload: 1,\n            showModalUpload: showModalUpload,\n            OpenUploadModal: OpenUploadModal,\n            sethaltedTop: blank,\n            typeTop: false,\n            getSliderWidth: getSliderWidth,\n            cropTOPLEVELScrollRef: cropTOPLEVELScrollRef,\n            refWithimageData: refWithimageData,\n            setallowOverflow: setallowOverflow\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this) : null\n  }, void 0, false);\n}\n\n_s(Uploadx, \"PGG5LTwlKS8czSJw3gZ1iGO65fE=\", false, function () {\n  return [useSpring, useSelector];\n});\n\n_c = Uploadx;\nexport const Upload = /*#__PURE__*/React.memo(Uploadx);\n_c2 = Upload;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Uploadx\");\n$RefreshReg$(_c2, \"Upload\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/upload/Upload.tsx"],"names":["React","useRef","useState","DialogContent","useSpring","animated","OptionsSlider","useSelector","Uploadx","showModalUpload","closeUploadModal","OpenUploadModal","getSliderWidth","allowOverflow","setallowOverflow","animation","config","duration","opacity","transform","darkmode","state","GlobalReducer","darkmodeReducer","blank","REACT_APP_SUPERSTARZ_URL","process","env","cropTOPLEVELScrollRef","refWithimageData","addfinishedCropRef","itemsRef","current","includes","push","padding","height","position","zIndex","cursor","overflow","Upload","memo"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useCallback, useState } from \"react\";\r\nimport ControlPointDuplicateIcon from \"@mui/icons-material/ControlPointDuplicate\";\r\nimport { Grid, Switch, DialogContent } from \"@material-ui/core\";\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport { OptionsSlider } from \"../profile/OptionsSlider\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport Axios from \"axios\";\r\n\r\nfunction Uploadx({\r\n  showModalUpload,\r\n  closeUploadModal,\r\n  OpenUploadModal,\r\n  getSliderWidth,\r\n}: any): JSX.Element {\r\n  //\r\n  //\r\n  //\r\n\r\n  const [allowOverflow, setallowOverflow] = useState(true);\r\n\r\n  //\r\n  //\r\n  //\r\n  //USE SLIDE DOWN ANIMATION FROM REACT SPRING\r\n  const animation = useSpring({\r\n    config: {\r\n      duration: 600,\r\n    },\r\n    opacity: showModalUpload ? 1 : 0,\r\n    transform: showModalUpload ? `translateY(0%)` : `translateY(-100%)`,\r\n  });\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// GET DARKMODE FROM REDUX STORE\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n\r\n  const darkmodeReducer = darkmode;\r\n\r\n  const blank = () => {};\r\n\r\n  const { REACT_APP_SUPERSTARZ_URL } = process.env;\r\n\r\n  const cropTOPLEVELScrollRef: any = useRef(null);\r\n\r\n  const refWithimageData = useRef<any>([]);\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  ///CREATE REFS FROM POSTS AND ADD THEM TO ARRAY\r\n  const addfinishedCropRef = (itemsRef: any) => {\r\n    if (itemsRef && !refWithimageData.current.includes(itemsRef)) {\r\n      refWithimageData.current.push(itemsRef);\r\n    }\r\n    ////console.log(postItemsRef.current[1]);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {showModalUpload ? (\r\n        <DialogContent\r\n          className={darkmodeReducer ? \"dialog-container\" : \"dialog-container\"}\r\n          style={{\r\n            padding: \"0px\",\r\n            height: \"100vh\",\r\n            position: \"fixed\",\r\n            zIndex: 100,\r\n            cursor: \"default\",\r\n            overflow: \"hidden\",\r\n          }}\r\n        >\r\n          <animated.div style={animation}>\r\n            <DialogContent\r\n              ref={cropTOPLEVELScrollRef}\r\n              className={\r\n                darkmodeReducer\r\n                  ? \" dontallowhighlighting modal-containerDark  postscroll-dark \"\r\n                  : \" dontallowhighlighting  modal-containerLight  postscroll-light \"\r\n              }\r\n              style={{\r\n                padding: \"0px\",\r\n                height: \"100vh\",\r\n                overflow: allowOverflow ? \"auto\" : \"hidden\",\r\n              }}\r\n            >\r\n              <OptionsSlider\r\n                typeUpload={1}\r\n                showModalUpload={showModalUpload}\r\n                OpenUploadModal={OpenUploadModal}\r\n                sethaltedTop={blank}\r\n                typeTop={false}\r\n                getSliderWidth={getSliderWidth}\r\n                cropTOPLEVELScrollRef={cropTOPLEVELScrollRef}\r\n                refWithimageData={refWithimageData}\r\n                setallowOverflow={setallowOverflow}\r\n              />\r\n            </DialogContent>\r\n          </animated.div>\r\n        </DialogContent>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport const Upload = React.memo(Uploadx);\r\n"]},"metadata":{},"sourceType":"module"}