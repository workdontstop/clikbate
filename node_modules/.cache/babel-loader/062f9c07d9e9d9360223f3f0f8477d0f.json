{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oghen\\\\OneDrive\\\\Documents\\\\ClikBate\\\\Clikbate\\\\src\\\\upload\\\\AudioEditor.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useCallback } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction AudioEditorx({\n  AudioUrl,\n  setShowAudio,\n  ShowAudio,\n  setinteractContentAudio,\n  setinteractContentAudiotype\n}) {\n  _s();\n\n  // Reference to the audio element\n  const audioPlayerRef = useRef(null); // States\n\n  const [recordedAudioUrl, setRecordedAudioUrl] = useState(null);\n  const [recording, setRecording] = useState(false);\n  const [processing, setProcessing] = useState(false);\n  const recorderRef = useRef(null); // Redux state for dark mode\n\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n\n  const startRecording = () => {\n    const audio = audioPlayerRef.current;\n\n    if (audio) {\n      const stream = audio.captureStream();\n      const options = {\n        mimeType: \"audio/webm\"\n      };\n      recorderRef.current = new MediaRecorder(stream, options);\n      const chunks = [];\n\n      recorderRef.current.ondataavailable = e => chunks.push(e.data);\n\n      recorderRef.current.onstop = () => {\n        const blob = new Blob(chunks, {\n          type: options.mimeType\n        });\n        const url = URL.createObjectURL(blob);\n        setRecordedAudioUrl(url);\n        setProcessing(false);\n      };\n\n      recorderRef.current.start();\n      setRecording(true);\n    }\n  };\n\n  const stopRecording = () => {\n    if (recorderRef.current && recorderRef.current.state === \"recording\") {\n      recorderRef.current.stop();\n      setRecording(false);\n    }\n  };\n\n  const saveRecording = useCallback(() => {\n    setinteractContentAudio(recordedAudioUrl);\n    setinteractContentAudiotype(1);\n    setShowAudio(false);\n  }, [recordedAudioUrl, setinteractContentAudio, setinteractContentAudiotype, setShowAudio]);\n\n  const closeEditor = () => {\n    setShowAudio(false);\n  };\n\n  function readFileAsDataUrl(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.onloadend = () => {\n        resolve(reader.result);\n      };\n\n      reader.onerror = () => {\n        reject(reader.error);\n      }; // Read the file and get the Data URL directly\n\n\n      reader.readAsDataURL(file);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      xs: 12,\n      style: {\n        display: \"block\",\n        position: \"fixed\",\n        top: \"0vh\",\n        height: \"100vh\",\n        backgroundColor: \"#555555\",\n        width: \"100%\",\n        margin: \"auto\",\n        textAlign: \"center\"\n      },\n      children: [AudioUrl ? /*#__PURE__*/_jsxDEV(\"audio\", {\n        ref: audioPlayerRef,\n        src: AudioUrl,\n        controls: true,\n        style: {\n          width: \"50%\",\n          margin: \"auto\",\n          textAlign: \"center\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this) : null, /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        style: {\n          position: \"relative\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          fontSize: \"24px\",\n          fontFamily: \"Helvetica, Arial, sans-serif\",\n          color: \"#ffffff\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startRecording,\n          disabled: recording,\n          style: {\n            margin: \"10px\"\n          },\n          children: \"Start Recording\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: stopRecording,\n          disabled: !recording,\n          style: {\n            margin: \"10px\"\n          },\n          children: \"Stop Recording\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: saveRecording,\n          disabled: !recordedAudioUrl,\n          style: {\n            margin: \"10px\"\n          },\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      style: {\n        margin: \"auto\",\n        textAlign: \"right\",\n        left: \"5px\",\n        height: \"20px\",\n        position: \"fixed\",\n        top: \"3vh\",\n        right: \"3vw\",\n        display: \"block\"\n      },\n      children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n        onClick: closeEditor,\n        className: darkmode ? \"make-small-icons-clickable-lightCrop dontallowhighlighting zuperkingIcon \" : \"make-small-icons-clickable-darkCrop dontallowhighlighting zuperkingIcon  \",\n        style: {\n          margin: \"auto\",\n          color: \"#ffffff\",\n          fontSize: \"2.5vw\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(AudioEditorx, \"fDUCR3OMoEvWL/mJmZPQlPDtClI=\", false, function () {\n  return [useSelector];\n});\n\n_c = AudioEditorx;\nexport const AudioEditor = /*#__PURE__*/React.memo(AudioEditorx);\n_c2 = AudioEditor;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AudioEditorx\");\n$RefreshReg$(_c2, \"AudioEditor\");","map":{"version":3,"sources":["C:/Users/oghen/OneDrive/Documents/ClikBate/Clikbate/src/upload/AudioEditor.tsx"],"names":["React","useRef","useState","useCallback","Grid","CloseIcon","useSelector","AudioEditorx","AudioUrl","setShowAudio","ShowAudio","setinteractContentAudio","setinteractContentAudiotype","audioPlayerRef","recordedAudioUrl","setRecordedAudioUrl","recording","setRecording","processing","setProcessing","recorderRef","darkmode","state","GlobalReducer","startRecording","audio","current","stream","captureStream","options","mimeType","MediaRecorder","chunks","ondataavailable","e","push","data","onstop","blob","Blob","type","url","URL","createObjectURL","start","stopRecording","stop","saveRecording","closeEditor","readFileAsDataUrl","file","Promise","resolve","reject","reader","FileReader","onloadend","result","onerror","error","readAsDataURL","display","position","top","height","backgroundColor","width","margin","textAlign","alignItems","justifyContent","fontSize","fontFamily","color","left","right","AudioEditor","memo"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useCallback, useEffect } from \"react\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction AudioEditorx({\r\n  AudioUrl,\r\n  setShowAudio,\r\n  ShowAudio,\r\n  setinteractContentAudio,\r\n  setinteractContentAudiotype,\r\n}: any): JSX.Element {\r\n  // Reference to the audio element\r\n\r\n\r\n  interface HTMLaudioElementWithCapture extends HTMLAudioElement {\r\n    captureStream(): MediaStream;\r\n  }\r\n\r\n  const audioPlayerRef = useRef<HTMLaudioElementWithCapture>(null);\r\n\r\n  // States\r\n  const [recordedAudioUrl, setRecordedAudioUrl] = useState(null);\r\n  const [recording, setRecording] = useState(false);\r\n  const [processing, setProcessing] = useState(false);\r\n\r\n  const recorderRef = useRef<MediaRecorder | null>(null);\r\n\r\n  // Redux state for dark mode\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n\r\n  const startRecording = () => {\r\n    const audio = audioPlayerRef.current;\r\n    if (audio) {\r\n      const stream = audio.captureStream();\r\n      const options = { mimeType: \"audio/webm\" };\r\n\r\n      recorderRef.current = new MediaRecorder(stream, options);\r\n\r\n      const chunks: any[] = [];\r\n      recorderRef.current.ondataavailable = (e: any) => chunks.push(e.data);\r\n      recorderRef.current.onstop = () => {\r\n        const blob = new Blob(chunks, { type: options.mimeType });\r\n        const url: any = URL.createObjectURL(blob);\r\n        setRecordedAudioUrl(url);\r\n        setProcessing(false);\r\n      };\r\n\r\n      recorderRef.current.start();\r\n      setRecording(true);\r\n    }\r\n  };\r\n\r\n  const stopRecording = () => {\r\n    if (recorderRef.current && recorderRef.current.state === \"recording\") {\r\n      recorderRef.current.stop();\r\n      setRecording(false);\r\n    }\r\n  };\r\n\r\n\r\n  const saveRecording = useCallback(() => {\r\n    setinteractContentAudio(recordedAudioUrl);\r\n    setinteractContentAudiotype(1);\r\n    setShowAudio(false);\r\n  }, [\r\n    recordedAudioUrl,\r\n    setinteractContentAudio,\r\n    setinteractContentAudiotype,\r\n    setShowAudio,\r\n  ]);\r\n\r\n  const closeEditor = () => {\r\n    setShowAudio(false);\r\n  };\r\n\r\n  function readFileAsDataUrl(file: any) {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n\r\n      reader.onloadend = () => {\r\n        resolve(reader.result);\r\n      };\r\n\r\n      reader.onerror = () => {\r\n        reject(reader.error);\r\n      };\r\n\r\n      // Read the file and get the Data URL directly\r\n      reader.readAsDataURL(file);\r\n    });\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        xs={12}\r\n        style={{\r\n          display: \"block\",\r\n          position: \"fixed\",\r\n          top: \"0vh\",\r\n          height: \"100vh\",\r\n          backgroundColor: \"#555555\",\r\n          width: \"100%\",\r\n          margin: \"auto\",\r\n          textAlign: \"center\",\r\n        }}\r\n      >\r\n        {AudioUrl ?\r\n          <audio\r\n            ref={audioPlayerRef}\r\n            src={AudioUrl}\r\n            controls\r\n            style={{ width: \"50%\", margin: \"auto\", textAlign: \"center\" }}\r\n          ></audio> : null}\r\n\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          style={{\r\n            position: \"relative\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            fontSize: \"24px\",\r\n            fontFamily: \"Helvetica, Arial, sans-serif\",\r\n            color: \"#ffffff\",\r\n          }}\r\n        >\r\n          <button\r\n            onClick={startRecording}\r\n            disabled={recording}\r\n            style={{ margin: \"10px\" }}\r\n          >\r\n            Start Recording\r\n          </button>\r\n          <button\r\n            onClick={stopRecording}\r\n            disabled={!recording}\r\n            style={{ margin: \"10px\" }}\r\n          >\r\n            Stop Recording\r\n          </button>\r\n          <button\r\n            onClick={saveRecording}\r\n            disabled={!recordedAudioUrl}\r\n            style={{ margin: \"10px\" }}\r\n          >\r\n            Save\r\n          </button>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid\r\n        item\r\n        xs={12}\r\n        style={{\r\n          margin: \"auto\",\r\n          textAlign: \"right\",\r\n          left: \"5px\",\r\n          height: \"20px\",\r\n          position: \"fixed\",\r\n          top: \"3vh\",\r\n          right: \"3vw\",\r\n          display: \"block\",\r\n        }}\r\n      >\r\n        <CloseIcon\r\n          onClick={closeEditor}\r\n          className={\r\n            darkmode\r\n              ? \"make-small-icons-clickable-lightCrop dontallowhighlighting zuperkingIcon \"\r\n              : \"make-small-icons-clickable-darkCrop dontallowhighlighting zuperkingIcon  \"\r\n          }\r\n          style={{ margin: \"auto\", color: \"#ffffff\", fontSize: \"2.5vw\" }}\r\n        />\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport const AudioEditor = React.memo(AudioEditorx);\r\n"]},"metadata":{},"sourceType":"module"}