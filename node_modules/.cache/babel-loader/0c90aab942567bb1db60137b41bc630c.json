{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\upload\\\\SuperCrop.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { matchPc } from \"../DetectDevice\";\nimport { Grid } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport Masonry from \"@mui/lab/Masonry\";\nimport Cropper from \"react-easy-crop\";\nimport Slider from \"@mui/material/Slider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction SuperCropx({\n  cropimage,\n  selectedImage\n}) {\n  _s();\n\n  ///\n  ///\n  const [PreviewIMgae, setPreviewIMgae] = useState([]);\n  const [createImage, setcreateImage] = useState([]);\n  const [image, setimage] = useState([]);\n  const [imageWidth, setimageWidth] = useState([]);\n  const [imageHeight, setimageHeight] = useState([]);\n  useEffect(() => {\n    selectedImage.map((photo, index) => {\n      ///////////////////////////////\n      const newcreate = [...createImage];\n      newcreate[index] = new Image();\n      setcreateImage(newcreate); ///////////////////////////////\n\n      createImage[index].src = photo;\n\n      createImage[index].src.onload = function () {\n        ///////////////////////////////\n        const newimage = [...image];\n        newimage[index] = createImage[index].src;\n        setimage(newimage); ///////////////////////////////\n        ///////////////////////////////\n\n        const newimageWidth = [...imageWidth];\n        newimageWidth[index] = createImage[index].src.naturalWidth;\n        setimageWidth(newimageWidth); ///////////////////////////////\n        ///////////////////////////////\n\n        const newimageHeight = [...imageHeight];\n        newimageHeight[index] = createImage[index].src.naturalHeight;\n        setimageHeight(newimageHeight); ///////////////////////////////\n      };\n    });\n  }, [selectedImage, createImage, image]); ///\n  ////\n  ////\n\n  const [cropArea, setcropArea] = useState(null);\n  const [crop, setcrop] = useState({\n    x: 0,\n    y: 0\n  });\n  const [zoom, setzoom] = useState(1);\n\n  const onCropComplete = (croppedAreaPercentage, croppedAreaPixels) => {\n    setcropArea(croppedAreaPixels);\n    console.log(croppedAreaPercentage);\n  }; ///\n  ///\n  ///DARKMODE FROM REDUX\n\n\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const canvasItemsRef = useRef([]); ///\n  ///\n  ///CREATE REFS FROM POSTS AND ADD THEM TO ARRAY\n\n  const addcanvasItemsRef = itemsRef => {\n    if (itemsRef && !canvasItemsRef.current.includes(itemsRef)) {\n      canvasItemsRef.current.push(itemsRef);\n    }\n  };\n\n  const RenderPreview = source => {\n    return source.map((photo, index) => {\n      return /*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\",\n        ref: addcanvasItemsRef,\n        width: imageWidth[index],\n        height: imageHeight[index]\n      }, photo, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      style: {\n        position: \"relative\",\n        width: \"100%\",\n        height: \"70%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        className: \"container-cropper\",\n        children: [/*#__PURE__*/_jsxDEV(Cropper, {\n          image: cropimage,\n          crop: crop,\n          zoom: zoom,\n          aspect: 4 / 4,\n          onCropChange: setcrop,\n          onCropComplete: onCropComplete,\n          onZoomChange: setzoom\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Slider, {\n          min: 1,\n          max: 3,\n          step: 0.001,\n          value: zoom,\n          onChange: (e, zoom) => {\n            setzoom(zoom);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      style: {\n        padding: \"20px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      style: {\n        padding: \"0px\",\n        height: \"auto\",\n        paddingLeft: \"6vw\"\n      },\n      children: selectedImage ? /*#__PURE__*/_jsxDEV(Masonry, {\n        columns: matchPc ? 3 : 1,\n        spacing: 10,\n        children: RenderPreview(selectedImage)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(SuperCropx, \"ndkb0PPppgspwiigs+qiHLNlcbM=\", false, function () {\n  return [useSelector];\n});\n\n_c = SuperCropx;\nexport const SuperCrop = /*#__PURE__*/React.memo(SuperCropx);\n_c2 = SuperCrop;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SuperCropx\");\n$RefreshReg$(_c2, \"SuperCrop\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/upload/SuperCrop.tsx"],"names":["React","useRef","useState","useEffect","matchPc","Grid","useSelector","Masonry","Cropper","Slider","SuperCropx","cropimage","selectedImage","PreviewIMgae","setPreviewIMgae","createImage","setcreateImage","image","setimage","imageWidth","setimageWidth","imageHeight","setimageHeight","map","photo","index","newcreate","Image","src","onload","newimage","newimageWidth","naturalWidth","newimageHeight","naturalHeight","cropArea","setcropArea","crop","setcrop","x","y","zoom","setzoom","onCropComplete","croppedAreaPercentage","croppedAreaPixels","console","log","darkmode","state","GlobalReducer","darkmodeReducer","canvasItemsRef","addcanvasItemsRef","itemsRef","current","includes","push","RenderPreview","source","position","width","height","e","padding","paddingLeft","SuperCrop","memo"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport Cropper from \"react-easy-crop\";\r\nimport MusicNoteIcon from \"@mui/icons-material/MusicNote\";\r\nimport PhotoIcon from \"@mui/icons-material/Photo\";\r\nimport GifIcon from \"@mui/icons-material/Gif\";\r\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\r\nimport Slider from \"@mui/material/Slider\";\r\nimport { AnySoaRecord } from \"dns\";\r\n\r\nfunction SuperCropx({ cropimage, selectedImage }: any): JSX.Element {\r\n  ///\r\n  ///\r\n  const [PreviewIMgae, setPreviewIMgae] = useState<Array<string>>([]);\r\n\r\n  const [createImage, setcreateImage] = useState<Array<any>>([]);\r\n  const [image, setimage] = useState<Array<any>>([]);\r\n  const [imageWidth, setimageWidth] = useState<Array<any>>([]);\r\n  const [imageHeight, setimageHeight] = useState<Array<any>>([]);\r\n\r\n  useEffect(() => {\r\n    selectedImage.map((photo: any, index: any) => {\r\n      ///////////////////////////////\r\n      const newcreate = [...createImage];\r\n      newcreate[index] = new Image();\r\n      setcreateImage(newcreate);\r\n      ///////////////////////////////\r\n      createImage[index].src = photo;\r\n\r\n      createImage[index].src.onload = function () {\r\n        ///////////////////////////////\r\n        const newimage = [...image];\r\n        newimage[index] = createImage[index].src;\r\n        setimage(newimage);\r\n        ///////////////////////////////\r\n\r\n        ///////////////////////////////\r\n        const newimageWidth = [...imageWidth];\r\n        newimageWidth[index] = createImage[index].src.naturalWidth;\r\n        setimageWidth(newimageWidth);\r\n        ///////////////////////////////\r\n\r\n        ///////////////////////////////\r\n        const newimageHeight = [...imageHeight];\r\n        newimageHeight[index] = createImage[index].src.naturalHeight;\r\n        setimageHeight(newimageHeight);\r\n        ///////////////////////////////\r\n      };\r\n    });\r\n  }, [selectedImage, createImage, image]);\r\n\r\n  ///\r\n  ////\r\n  ////\r\n  const [cropArea, setcropArea] = useState<any>(null);\r\n  const [crop, setcrop] = useState<any>({ x: 0, y: 0 });\r\n  const [zoom, setzoom] = useState(1);\r\n\r\n  const onCropComplete = (\r\n    croppedAreaPercentage: any,\r\n    croppedAreaPixels: any\r\n  ) => {\r\n    setcropArea(croppedAreaPixels);\r\n    console.log(croppedAreaPercentage);\r\n  };\r\n\r\n  ///\r\n  ///\r\n  ///DARKMODE FROM REDUX\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n\r\n  const darkmodeReducer = darkmode;\r\n\r\n  const canvasItemsRef = useRef<any>([]);\r\n\r\n  ///\r\n  ///\r\n  ///CREATE REFS FROM POSTS AND ADD THEM TO ARRAY\r\n  const addcanvasItemsRef = (itemsRef: any) => {\r\n    if (itemsRef && !canvasItemsRef.current.includes(itemsRef)) {\r\n      canvasItemsRef.current.push(itemsRef);\r\n    }\r\n  };\r\n\r\n  const RenderPreview = (source: any) => {\r\n    return source.map((photo: any, index: any) => {\r\n      return (\r\n        <canvas\r\n          className={\r\n            darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\"\r\n          }\r\n          key={photo}\r\n          ref={addcanvasItemsRef}\r\n          width={imageWidth[index]}\r\n          height={imageHeight[index]}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        style={{ position: \"relative\", width: \"100%\", height: \"70%\" }}\r\n      >\r\n        <Grid item xs={12} className=\"container-cropper\">\r\n          <Cropper\r\n            image={cropimage}\r\n            crop={crop}\r\n            zoom={zoom}\r\n            aspect={4 / 4}\r\n            onCropChange={setcrop}\r\n            onCropComplete={onCropComplete}\r\n            onZoomChange={setzoom}\r\n          />\r\n          <Slider\r\n            min={1}\r\n            max={3}\r\n            step={0.001}\r\n            value={zoom}\r\n            onChange={(e: any, zoom: any) => {\r\n              setzoom(zoom);\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid\r\n        item\r\n        xs={12}\r\n        style={{\r\n          padding: \"20px\",\r\n        }}\r\n      ></Grid>\r\n\r\n      <Grid\r\n        item\r\n        xs={12}\r\n        style={{\r\n          padding: \"0px\",\r\n          height: \"auto\",\r\n          paddingLeft: \"6vw\",\r\n        }}\r\n      >\r\n        {selectedImage ? (\r\n          <Masonry columns={matchPc ? 3 : 1} spacing={10}>\r\n            {RenderPreview(selectedImage)}\r\n          </Masonry>\r\n        ) : null}\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport const SuperCrop = React.memo(SuperCropx);\r\n"]},"metadata":{},"sourceType":"module"}