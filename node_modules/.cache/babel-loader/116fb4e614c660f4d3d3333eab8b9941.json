{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\upload\\\\ImageTobeFiltered.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ImageTobeFilteredx({\n  filterImage,\n  index,\n  itemUploadRef,\n  setActivatefilterImage\n}) {\n  _s();\n\n  ///\n  ///\n  ///\n  const filterbaseimageRef = useRef(null);\n  const canvasRef = useRef(null);\n  const canvasRefdummy = useRef(null);\n  const [activefilter, setactivefilter] = useState(0);\n\n  const closegate = () => {\n    if (index === 0) {\n      ////\n      addfilter();\n    } else {\n      setActivatefilterImage(false);\n    }\n  };\n\n  const addfilter = () => {\n    if (index === 0) {\n      const previewFileReadimage = new Image();\n      previewFileReadimage.src = itemUploadRef.current[index].src;\n\n      previewFileReadimage.onload = function () {\n        const ctx = canvasRef.current.getContext(\"2d\");\n        var width = window.innerWidth / 2;\n        var scale = width / previewFileReadimage.naturalWidth;\n        var height = previewFileReadimage.naturalHeight * scale;\n        canvasRef.current.height = height;\n        canvasRef.current.width = width; ////////////////////\n\n        requestAnimationFrame(() => {\n          ctx.filter = \"contrast(1.8)\";\n          ctx.filter = \"brightness(100%)\";\n          ctx.drawImage(previewFileReadimage, 0, 0, canvasRef.current.width, canvasRef.current.height);\n        });\n      }; ////////////////////\n      ////\n\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: itemUploadRef.current[index] ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \" love \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        id: itemUploadRef.current[index],\n        ref: filterbaseimageRef,\n        onClick: closegate,\n        src: itemUploadRef.current ? itemUploadRef.current[index].src : null,\n        style: {\n          width: \"30%\",\n          height: \"auto\",\n          position: \"relative\",\n          margin: \"auto\",\n          marginRight: index === 0 ? \"20px\" : \"0px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        style: {\n          padding: \"0px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRefdummy,\n        style: {\n          padding: \"0px\",\n          display: \"none\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : null\n  }, void 0, false);\n}\n\n_s(ImageTobeFilteredx, \"oyoXX/HD7YpXutDnfo/IikRf2/Q=\");\n\n_c = ImageTobeFilteredx;\nexport const ImageTobeFiltered = /*#__PURE__*/React.memo(ImageTobeFilteredx);\n_c2 = ImageTobeFiltered;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ImageTobeFilteredx\");\n$RefreshReg$(_c2, \"ImageTobeFiltered\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/upload/ImageTobeFiltered.tsx"],"names":["React","useRef","useState","ImageTobeFilteredx","filterImage","index","itemUploadRef","setActivatefilterImage","filterbaseimageRef","canvasRef","canvasRefdummy","activefilter","setactivefilter","closegate","addfilter","previewFileReadimage","Image","src","current","onload","ctx","getContext","width","window","innerWidth","scale","naturalWidth","height","naturalHeight","requestAnimationFrame","filter","drawImage","position","margin","marginRight","padding","display","ImageTobeFiltered","memo"],"mappings":"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","sourcesContent":["import React, {\r\n  useRef,\r\n  useState,\r\n  useCallback,\r\n  useEffect,\r\n  useLayoutEffect,\r\n} from \"react\";\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport { SuperCrop } from \"./SuperCrop\";\r\nimport MusicNoteIcon from \"@mui/icons-material/MusicNote\";\r\nimport PhotoIcon from \"@mui/icons-material/Photo\";\r\nimport GifIcon from \"@mui/icons-material/Gif\";\r\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\r\nimport Axios from \"axios\";\r\nimport CropIcon from \"@mui/icons-material/Crop\";\r\nimport CheckIcon from \"@mui/icons-material/Check\";\r\nimport { PreviewCanvasCropAll } from \"./PreviewCanvasCropAll\";\r\nimport { PreviewCanvas } from \"./PreviewCanvas\";\r\n\r\nfunction ImageTobeFilteredx({\r\n  filterImage,\r\n  index,\r\n  itemUploadRef,\r\n  setActivatefilterImage,\r\n}: any): JSX.Element {\r\n  ///\r\n  ///\r\n  ///\r\n  const filterbaseimageRef: any = useRef(null);\r\n\r\n  const canvasRef: any = useRef(null);\r\n\r\n  const canvasRefdummy: any = useRef(null);\r\n\r\n  const [activefilter, setactivefilter] = useState<number>(0);\r\n\r\n  const closegate = () => {\r\n    if (index === 0) {\r\n      ////\r\n      addfilter();\r\n    } else {\r\n      setActivatefilterImage(false);\r\n    }\r\n  };\r\n\r\n  const addfilter = () => {\r\n    if (index === 0) {\r\n      const previewFileReadimage = new Image();\r\n      previewFileReadimage.src = itemUploadRef.current[index].src;\r\n      previewFileReadimage.onload = function () {\r\n        const ctx = canvasRef.current.getContext(\"2d\");\r\n\r\n        var width = window.innerWidth / 2;\r\n        var scale = width / previewFileReadimage.naturalWidth;\r\n        var height = previewFileReadimage.naturalHeight * scale;\r\n\r\n        canvasRef.current.height = height;\r\n        canvasRef.current.width = width;\r\n\r\n        ////////////////////\r\n\r\n        requestAnimationFrame(() => {\r\n          ctx.filter = \"contrast(1.8)\";\r\n          ctx.filter = \"brightness(100%)\";\r\n          ctx.drawImage(\r\n            previewFileReadimage,\r\n            0,\r\n            0,\r\n            canvasRef.current.width,\r\n            canvasRef.current.height\r\n          );\r\n        });\r\n      };\r\n\r\n      ////////////////////\r\n      ////\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {itemUploadRef.current[index] ? (\r\n        <>\r\n          {\" \"}\r\n          <button> love </button>\r\n          <img\r\n            id={itemUploadRef.current[index]}\r\n            ref={filterbaseimageRef}\r\n            onClick={closegate}\r\n            src={\r\n              itemUploadRef.current ? itemUploadRef.current[index].src : null\r\n            }\r\n            style={{\r\n              width: \"30%\",\r\n              height: \"auto\",\r\n              position: \"relative\",\r\n              margin: \"auto\",\r\n              marginRight: index === 0 ? \"20px\" : \"0px\",\r\n            }}\r\n          />\r\n          <canvas\r\n            ref={canvasRef}\r\n            style={{\r\n              padding: \"0px\",\r\n            }}\r\n          />\r\n          <canvas\r\n            ref={canvasRefdummy}\r\n            style={{\r\n              padding: \"0px\",\r\n              display: \"none\",\r\n            }}\r\n          />\r\n        </>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport const ImageTobeFiltered = React.memo(ImageTobeFilteredx);\r\n"]},"metadata":{},"sourceType":"module"}