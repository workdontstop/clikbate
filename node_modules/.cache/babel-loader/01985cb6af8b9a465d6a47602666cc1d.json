{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\app-folder\\\\Option.tsx\",\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\nimport { OptionInnerModal } from \"./OptionInnerModal\";\nimport { useMediaQuery, Grid, useTheme } from \"@material-ui/core\";\nimport { isMobile } from \"react-device-detect\";\nimport \"./Option.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Optionx({\n  darkmode,\n  setDarkmode\n}) {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [showModal, setShowModal] = useState(false);\n  const [matchTablet, setmatchTablet] = useState(false);\n  const [matchPc, setmatchPc] = useState(false);\n  var usetheme = useTheme();\n  var matchMobile = isMobile;\n  var superFont = \"\";\n  var optionsContainer = \"\";\n  var HorizIconfontData;\n  const fontDataPc = {\n    fontSize: \"2.4vw\"\n  };\n  const fontDataTablet = {\n    fontSize: \"3.7vh\"\n  };\n  const fontDataMobile = {\n    fontSize: \"3.8vh\"\n  };\n  useEffect(_s(() => {\n    _s();\n\n    var matchTabletx = useMediaQuery(usetheme.breakpoints.up(\"sm\"));\n    var matchPcx = useMediaQuery(usetheme.breakpoints.up(\"md\"));\n    setmatchTablet(matchTabletx);\n    setmatchPc(matchPcx);\n  }, \"bybk9r8uv32VS2i+IOcSg7rZf9U=\", false, function () {\n    return [useMediaQuery, useMediaQuery];\n  }), [matchPc, matchTablet]); ///\n  ///\n  ///\n  ///CONDITIONAL STATEMENT FOR DEVICE TYPE\n\n  if (matchPc) {\n    superFont = \"super-starz-text-Pc\";\n    optionsContainer = \"optionsContainer-Pc-Tab\";\n    HorizIconfontData = fontDataPc; ///\n  } else if (matchTablet) {\n    superFont = \"super-starz-text-Tablet\";\n    optionsContainer = \"optionsContainer-Pc-Tab\";\n    HorizIconfontData = fontDataTablet; ///\n  } else {\n    superFont = \"super-starz-text-Mobile\";\n    optionsContainer = \"optionsContainer-Mobile\";\n    HorizIconfontData = fontDataMobile;\n  } ///\n  ///\n  ///\n  /// CLOSE MODAL (STARTS AN ONPOPSTATE EVENT)\n\n\n  const closemodal = useCallback(backbutton => {\n    //pop states fires when back and forward buttons used\n    if (backbutton === 1) {\n      window.onpopstate = () => {\n        window.history.pushState(null, \"\", window.location.href);\n        window.onpopstate = null;\n        setShowModal(false);\n      };\n    } else {\n      window.history.pushState(null, \"\", \".\");\n      window.onpopstate = null;\n      setShowModal(false);\n    }\n  }, [showModal]); ///\n  ///\n  ///\n  ///OPEN MODAL THEN CALL CLOSEMODAL FUNCTION WHICH WAITS FOR A POP EVENT(for closing modal)\n\n  const Openmodal = useCallback(() => {\n    setShowModal(!showModal); //pushstate add enteries to your history\n\n    window.history.pushState(null, \"\", \"Options\");\n    closemodal(1);\n  }, [showModal, closemodal]);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    children: [showModal ? null : /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      className: optionsContainer,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        style: {\n          textAlign: \"left\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: superFont,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: darkmode ? \"text-superstarz-dark   text-superstarz-dark-colorA  \" : \"text-superstarz-light  text-superstarz-light-colorA  \",\n            children: \"Super\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: darkmode ? \"text-superstarz-dark     text-superstarz-dark-colorB  \" : \"text-superstarz-light   text-superstarz-light-colorB   \",\n            children: \"starZ\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        className: \"text-align-right\",\n        children: /*#__PURE__*/_jsxDEV(MoreHorizIcon, {\n          onClick: Openmodal,\n          className: darkmode ? \"make-small-icons-clickable-dark dontallowhighlighting  \" : \"make-small-icons-clickable-light  dontallowhighlighting  \",\n          fontSize: \"large\",\n          style: HorizIconfontData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(OptionInnerModal, {\n      showModal: showModal,\n      closemodal: closemodal,\n      darkmode: darkmode,\n      setDarkmode: setDarkmode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Optionx, \"1D4+elmPZuqLvOhOeGElkZCkjy0=\", false, function () {\n  return [useTheme];\n});\n\n_c = Optionx;\nexport const Option = /*#__PURE__*/React.memo(Optionx);\n_c2 = Option;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Optionx\");\n$RefreshReg$(_c2, \"Option\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/app-folder/Option.tsx"],"names":["React","useState","useCallback","useEffect","MoreHorizIcon","OptionInnerModal","useMediaQuery","Grid","useTheme","isMobile","Optionx","darkmode","setDarkmode","showModal","setShowModal","matchTablet","setmatchTablet","matchPc","setmatchPc","usetheme","matchMobile","superFont","optionsContainer","HorizIconfontData","fontDataPc","fontSize","fontDataTablet","fontDataMobile","matchTabletx","breakpoints","up","matchPcx","closemodal","backbutton","window","onpopstate","history","pushState","location","href","Openmodal","textAlign","Option","memo"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\r\n\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { OptionInnerModal } from \"./OptionInnerModal\";\r\nimport { IOption } from \"./appFolder-Interfaces\";\r\n\r\nimport { useMediaQuery, Grid, useTheme } from \"@material-ui/core\";\r\nimport { isBrowser, isMobile } from \"react-device-detect\";\r\n\r\nimport \"./Option.css\";\r\nimport * as CSS from \"csstype\";\r\n\r\nfunction Optionx({ darkmode, setDarkmode }: IOption): JSX.Element {\r\n  const [showModal, setShowModal] = useState<boolean>(false);\r\n  const [matchTablet, setmatchTablet] = useState<boolean>(false);\r\n  const [matchPc, setmatchPc] = useState<boolean>(false);\r\n  var usetheme = useTheme();\r\n\r\n  var matchMobile = isMobile;\r\n\r\n  var superFont = \"\";\r\n  var optionsContainer = \"\";\r\n  var HorizIconfontData: CSS.Properties;\r\n\r\n  const fontDataPc: CSS.Properties = { fontSize: \"2.4vw\" };\r\n  const fontDataTablet: CSS.Properties = { fontSize: \"3.7vh\" };\r\n  const fontDataMobile: CSS.Properties = { fontSize: \"3.8vh\" };\r\n\r\n  useEffect(() => {\r\n    var matchTabletx = useMediaQuery(usetheme.breakpoints.up(\"sm\"));\r\n    var matchPcx = useMediaQuery(usetheme.breakpoints.up(\"md\"));\r\n    setmatchTablet(matchTabletx);\r\n    setmatchPc(matchPcx);\r\n  }, [matchPc, matchTablet]);\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  ///CONDITIONAL STATEMENT FOR DEVICE TYPE\r\n  if (matchPc) {\r\n    superFont = \"super-starz-text-Pc\";\r\n    optionsContainer = \"optionsContainer-Pc-Tab\";\r\n    HorizIconfontData = fontDataPc;\r\n    ///\r\n  } else if (matchTablet) {\r\n    superFont = \"super-starz-text-Tablet\";\r\n    optionsContainer = \"optionsContainer-Pc-Tab\";\r\n    HorizIconfontData = fontDataTablet;\r\n    ///\r\n  } else {\r\n    superFont = \"super-starz-text-Mobile\";\r\n    optionsContainer = \"optionsContainer-Mobile\";\r\n    HorizIconfontData = fontDataMobile;\r\n  }\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// CLOSE MODAL (STARTS AN ONPOPSTATE EVENT)\r\n  const closemodal = useCallback(\r\n    (backbutton: number) => {\r\n      //pop states fires when back and forward buttons used\r\n      if (backbutton === 1) {\r\n        window.onpopstate = () => {\r\n          window.history.pushState(null, \"\", window.location.href);\r\n          window.onpopstate = null;\r\n          setShowModal(false);\r\n        };\r\n      } else {\r\n        window.history.pushState(null, \"\", \".\");\r\n        window.onpopstate = null;\r\n        setShowModal(false);\r\n      }\r\n    },\r\n    [showModal]\r\n  );\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  ///OPEN MODAL THEN CALL CLOSEMODAL FUNCTION WHICH WAITS FOR A POP EVENT(for closing modal)\r\n  const Openmodal = useCallback(() => {\r\n    setShowModal(!showModal);\r\n    //pushstate add enteries to your history\r\n    window.history.pushState(null, \"\", \"Options\");\r\n    closemodal(1);\r\n  }, [showModal, closemodal]);\r\n\r\n  return (\r\n    <Grid container>\r\n      {showModal ? null : (\r\n        <Grid item xs={12} className={optionsContainer}>\r\n          <Grid item xs={6} style={{ textAlign: \"left\" }}>\r\n            <span className={superFont}>\r\n              <span\r\n                className={\r\n                  darkmode\r\n                    ? \"text-superstarz-dark   text-superstarz-dark-colorA  \"\r\n                    : \"text-superstarz-light  text-superstarz-light-colorA  \"\r\n                }\r\n              >\r\n                Super\r\n              </span>\r\n              <span\r\n                className={\r\n                  darkmode\r\n                    ? \"text-superstarz-dark     text-superstarz-dark-colorB  \"\r\n                    : \"text-superstarz-light   text-superstarz-light-colorB   \"\r\n                }\r\n              >\r\n                starZ\r\n              </span>\r\n            </span>\r\n          </Grid>\r\n\r\n          <Grid item xs={6} className=\"text-align-right\">\r\n            <MoreHorizIcon\r\n              onClick={Openmodal}\r\n              className={\r\n                darkmode\r\n                  ? \"make-small-icons-clickable-dark dontallowhighlighting  \"\r\n                  : \"make-small-icons-clickable-light  dontallowhighlighting  \"\r\n              }\r\n              fontSize=\"large\"\r\n              style={HorizIconfontData}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n\r\n      <OptionInnerModal\r\n        showModal={showModal}\r\n        closemodal={closemodal}\r\n        darkmode={darkmode}\r\n        setDarkmode={setDarkmode}\r\n      />\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport const Option = React.memo(Optionx);\r\n"]},"metadata":{},"sourceType":"module"}