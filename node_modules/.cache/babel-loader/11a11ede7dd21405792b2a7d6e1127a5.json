{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\upload\\\\Superstickers.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useLayoutEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Superstickersx({\n  startSuperSticker,\n  itemUploadRef,\n  index\n}) {\n  _s();\n\n  ///\n  ///\n  ///DARKMODE FROM REDUX\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const [superImageHolder, setsuperImageHolder] = useState(null);\n  const canvasRefsticker = useRef(null);\n  useLayoutEffect(() => {\n    const Newstickfilter = new Image();\n    Newstickfilter.src = itemUploadRef.current[index].src;\n\n    Newstickfilter.onload = function () {\n      const ctx = canvasRefsticker.current.getContext(\"2d\");\n    };\n  }, [startSuperSticker]);\n\n  if (superImageHolder === Newstickfilter) {} else {\n    setsuperImageHolder(Newstickfilter);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      className: darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\",\n      ref: canvasRefsticker,\n      style: {\n        padding: \"0px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(Superstickersx, \"5dSomCFUdp1xWj4Lyz4AlVBNyRc=\", false, function () {\n  return [useSelector];\n});\n\n_c = Superstickersx;\nexport const Superstickers = /*#__PURE__*/React.memo(Superstickersx);\n_c2 = Superstickers;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Superstickersx\");\n$RefreshReg$(_c2, \"Superstickers\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/upload/Superstickers.tsx"],"names":["React","useRef","useState","useLayoutEffect","useSelector","Superstickersx","startSuperSticker","itemUploadRef","index","darkmode","state","GlobalReducer","darkmodeReducer","superImageHolder","setsuperImageHolder","canvasRefsticker","Newstickfilter","Image","src","current","onload","ctx","getContext","padding","Superstickers","memo"],"mappings":";;;AAAA,OAAOA,KAAP,IACEC,MADF,EAEEC,QAFF,EAKEC,eALF,QAMO,OANP;AAUA,SAAyBC,WAAzB,QAAyD,aAAzD;;;;AAkBA,SAASC,cAAT,CAAwB;AACtBC,EAAAA,iBADsB;AAEtBC,EAAAA,aAFsB;AAGtBC,EAAAA;AAHsB,CAAxB,EAIqB;AAAA;;AACnB;AACA;AACA;AAMA,QAAM;AAAEC,IAAAA;AAAF,MAAeL,WAAW,CAAEM,KAAD,KAAoC,EACnE,GAAGA,KAAK,CAACC;AAD0D,GAApC,CAAD,CAAhC;AAIA,QAAMC,eAAe,GAAGH,QAAxB;AAEA,QAAM,CAACI,gBAAD,EAAmBC,mBAAnB,IAA0CZ,QAAQ,CAAM,IAAN,CAAxD;AAEA,QAAMa,gBAAqB,GAAGd,MAAM,CAAC,IAAD,CAApC;AAEAE,EAAAA,eAAe,CAAC,MAAM;AACpB,UAAMa,cAAmB,GAAG,IAAIC,KAAJ,EAA5B;AAEAD,IAAAA,cAAc,CAACE,GAAf,GAAqBX,aAAa,CAACY,OAAd,CAAsBX,KAAtB,EAA6BU,GAAlD;;AAEAF,IAAAA,cAAc,CAACI,MAAf,GAAwB,YAAY;AAClC,YAAMC,GAAG,GAAGN,gBAAgB,CAACI,OAAjB,CAAyBG,UAAzB,CAAoC,IAApC,CAAZ;AACD,KAFD;AAGD,GARc,EAQZ,CAAChB,iBAAD,CARY,CAAf;;AAUA,MAAIO,gBAAgB,KAAKG,cAAzB,EAAyC,CACxC,CADD,MACO;AACLF,IAAAA,mBAAmB,CAACE,cAAD,CAAnB;AACD;;AAED,sBACE;AAAA,2BACE;AACE,MAAA,SAAS,EAAEJ,eAAe,GAAG,mBAAH,GAAyB,oBADrD;AAEE,MAAA,GAAG,EAAEG,gBAFP;AAGE,MAAA,KAAK,EAAE;AACLQ,QAAAA,OAAO,EAAE;AADJ;AAHT;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAWD;;GAjDQlB,c;UAacD,W;;;KAbdC,c;AAmDT,OAAO,MAAMmB,aAAa,gBAAGxB,KAAK,CAACyB,IAAN,CAAWpB,cAAX,CAAtB;MAAMmB,a","sourcesContent":["import React, {\r\n  useRef,\r\n  useState,\r\n  useCallback,\r\n  useEffect,\r\n  useLayoutEffect,\r\n} from \"react\";\r\nimport { matchPc, matchTablet, matchMobile } from \"../DetectDevice\";\r\nimport { Grid, GridSize } from \"@material-ui/core\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { RootStateOrAny, useSelector, useDispatch } from \"react-redux\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport { SuperCrop } from \"./SuperCrop\";\r\nimport MusicNoteIcon from \"@mui/icons-material/MusicNote\";\r\nimport PhotoIcon from \"@mui/icons-material/Photo\";\r\nimport GifIcon from \"@mui/icons-material/Gif\";\r\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\r\nimport Axios from \"axios\";\r\nimport CropIcon from \"@mui/icons-material/Crop\";\r\nimport CheckIcon from \"@mui/icons-material/Check\";\r\nimport { PreviewCanvasCropAll } from \"./PreviewCanvasCropAll\";\r\nimport { ImageTobeFiltered } from \"./ImageTobeFiltered\";\r\nimport { FilterModeArrow } from \"./FilterModeArrow\";\r\nimport { OptionsSlider } from \"../profile/OptionsSlider\";\r\nimport { convertHexToRGB } from \"material-ui/utils/colorManipulator\";\r\n\r\nfunction Superstickersx({\r\n  startSuperSticker,\r\n  itemUploadRef,\r\n  index,\r\n}: any): JSX.Element {\r\n  ///\r\n  ///\r\n  ///DARKMODE FROM REDUX\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n\r\n  const darkmodeReducer = darkmode;\r\n\r\n  const [superImageHolder, setsuperImageHolder] = useState<any>(null);\r\n\r\n  const canvasRefsticker: any = useRef(null);\r\n\r\n  useLayoutEffect(() => {\r\n    const Newstickfilter: any = new Image();\r\n\r\n    Newstickfilter.src = itemUploadRef.current[index].src;\r\n\r\n    Newstickfilter.onload = function () {\r\n      const ctx = canvasRefsticker.current.getContext(\"2d\");\r\n    };\r\n  }, [startSuperSticker]);\r\n\r\n  if (superImageHolder === Newstickfilter) {\r\n  } else {\r\n    setsuperImageHolder(Newstickfilter);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <canvas\r\n        className={darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\"}\r\n        ref={canvasRefsticker}\r\n        style={{\r\n          padding: \"0px\",\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport const Superstickers = React.memo(Superstickersx);\r\n"]},"metadata":{},"sourceType":"module"}