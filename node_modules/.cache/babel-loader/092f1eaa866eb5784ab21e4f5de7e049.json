{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\log\\\\OptionInnerModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useCallback } from \"react\";\nimport AddRoundedIcon from \"@material-ui/icons/AddRounded\";\nimport { Grid, Switch, DialogContent } from \"@material-ui/core\";\nimport { isBrowser, isTablet } from \"react-device-detect\";\nimport { useSpring, animated } from \"react-spring\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { DarkmodeAction } from \".././GlobalActions\";\nimport \"./logCss.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar toggleDarkMode = false;\n\nfunction OptionInnerModalx({\n  closemodal,\n  showModal\n}) {\n  _s();\n\n  var matchPc = isBrowser;\n  var matchTablet = isTablet;\n  var marginData;\n  var fontData;\n  const fontDataPc = {\n    fontSize: \"2.4vw\"\n  };\n  const fontDataTablet = {\n    fontSize: \"3.4vh\"\n  };\n  const fontDataMobile = {\n    fontSize: \"3.8vh\"\n  };\n  const marginDataPc = {\n    marginLeft: \"-35px\"\n  };\n  const marginDataMobile = {\n    marginLeft: \"-15.5px\"\n  }; ///\n  ///\n  ///\n  ///CONDITIONAL STATEMENT FOR DEVICE TYPE\n\n  if (matchPc) {\n    marginData = marginDataPc;\n    fontData = fontDataPc; ///\n  } else if (matchTablet) {\n    marginData = marginDataPc;\n    fontData = fontDataTablet; ///\n  } else {\n    marginData = marginDataMobile;\n    fontData = fontDataMobile;\n  } //\n  //\n  //\n  //USE SLIDE DOWN ANIMATION FROM REACT SPRING\n\n\n  const animation = useSpring({\n    config: {\n      duration: 250\n    },\n    opacity: showModal ? 1 : 0.0,\n    transform: showModal ? `translateY(0%)` : `translateY(-100%)`\n  }); //\n  //\n  //\n  //ESCAPE KEY CLOSE MODAL\n\n  const escapePress = useCallback(e => {\n    if (e.key === \"Escape\" && showModal) {\n      closemodal(0);\n    }\n  }, [showModal, closemodal]);\n  useEffect(() => {\n    document.addEventListener(\"keydown\", escapePress);\n    return () => document.removeEventListener(\"keydown\", escapePress);\n  }, [escapePress]); //\n  //\n  //\n  //USEREF TARGETS A DIV(BACKGROUND) AND CLOSES MODAL ON CLICK\n\n  const inputRef = useRef(null);\n\n  const onBackgroundFocus = e => {\n    if (inputRef.current === e.target) {\n      closemodal(0);\n    }\n  };\n\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const dispatch = useDispatch();\n\n  const switchThemes = () => {\n    toggleDarkMode = true;\n    dispatch(DarkmodeAction(true));\n    localStorage.setItem(\"darkmode\", toggleDarkMode.toString());\n    closemodal(0);\n    alert(\"kjh\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: showModal ? /*#__PURE__*/_jsxDEV(DialogContent, {\n      className: \"dialog-container dontallowhighlighting \",\n      onClick: onBackgroundFocus,\n      style: {\n        padding: \"0px\",\n        height: \"100vh\"\n      },\n      ref: inputRef,\n      children: /*#__PURE__*/_jsxDEV(animated.div, {\n        style: animation,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          className: darkmode ? \"Background-header-dark theme-more-container\" : \"Background-header-light theme-more-container\",\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            sm: 8,\n            md: 10,\n            xs: 7\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 2,\n            sm: 2,\n            md: 1,\n            className: \"zuperking\",\n            style: marginData,\n            children: /*#__PURE__*/_jsxDEV(Switch, {\n              size: \"medium\",\n              checked: darkmode,\n              className: darkmode ? \"icon-color-dark dontallowhighlighting  \" : \"icon-color-light  dontallowhighlighting  \",\n              onChange: () => {\n                switchThemes();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 3,\n            className: \"dontallowhighlighting add-rounded-icon-right\",\n            sm: 2,\n            md: 1,\n            children: /*#__PURE__*/_jsxDEV(AddRoundedIcon, {\n              className: darkmode ? \"make-small-icons-clickable-dark  dontallowhighlighting  \" : \"make-small-icons-clickable-light  dontallowhighlighting  \",\n              fontSize: \"large\",\n              style: fontData\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this) : null\n  }, void 0, false);\n}\n\n_s(OptionInnerModalx, \"M1B2mhwBATofgPMS/KBtBo5TnKo=\", false, function () {\n  return [useSpring, useSelector, useDispatch];\n});\n\n_c = OptionInnerModalx;\nexport const OptionInnerModal = /*#__PURE__*/React.memo(OptionInnerModalx);\n_c2 = OptionInnerModal;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"OptionInnerModalx\");\n$RefreshReg$(_c2, \"OptionInnerModal\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/log/OptionInnerModal.tsx"],"names":["React","useRef","useEffect","useCallback","AddRoundedIcon","Grid","Switch","DialogContent","isBrowser","isTablet","useSpring","animated","useSelector","useDispatch","DarkmodeAction","toggleDarkMode","OptionInnerModalx","closemodal","showModal","matchPc","matchTablet","marginData","fontData","fontDataPc","fontSize","fontDataTablet","fontDataMobile","marginDataPc","marginLeft","marginDataMobile","animation","config","duration","opacity","transform","escapePress","e","key","document","addEventListener","removeEventListener","inputRef","onBackgroundFocus","current","target","darkmode","state","GlobalReducer","dispatch","switchThemes","localStorage","setItem","toString","alert","padding","height","OptionInnerModal","memo"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useCallback } from \"react\";\r\nimport AddRoundedIcon from \"@material-ui/icons/AddRounded\";\r\nimport { Grid, Switch, DialogContent } from \"@material-ui/core\";\r\nimport { isBrowser, isTablet } from \"react-device-detect\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport { IOptionInnerModal } from \"./log-Interfaces\";\r\nimport { RootStateOrAny, useSelector, useDispatch } from \"react-redux\";\r\nimport GlobalReducer from \".././GlobalReducer\";\r\nimport { DarkmodeAction, screenHeightAction } from \".././GlobalActions\";\r\n\r\nimport \"./logCss.css\";\r\nimport * as CSS from \"csstype\";\r\n\r\nvar toggleDarkMode: boolean = false;\r\n\r\nfunction OptionInnerModalx({\r\n  closemodal,\r\n  showModal,\r\n}: IOptionInnerModal): JSX.Element {\r\n  var matchPc = isBrowser;\r\n  var matchTablet = isTablet;\r\n\r\n  var marginData: CSS.Properties;\r\n  var fontData: CSS.Properties;\r\n  const fontDataPc: CSS.Properties = { fontSize: \"2.4vw\" };\r\n  const fontDataTablet: CSS.Properties = { fontSize: \"3.4vh\" };\r\n  const fontDataMobile: CSS.Properties = { fontSize: \"3.8vh\" };\r\n  const marginDataPc: CSS.Properties = { marginLeft: \"-35px\" };\r\n  const marginDataMobile: CSS.Properties = { marginLeft: \"-15.5px\" };\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  ///CONDITIONAL STATEMENT FOR DEVICE TYPE\r\n  if (matchPc) {\r\n    marginData = marginDataPc;\r\n    fontData = fontDataPc;\r\n    ///\r\n  } else if (matchTablet) {\r\n    marginData = marginDataPc;\r\n    fontData = fontDataTablet;\r\n    ///\r\n  } else {\r\n    marginData = marginDataMobile;\r\n    fontData = fontDataMobile;\r\n  }\r\n\r\n  //\r\n  //\r\n  //\r\n  //USE SLIDE DOWN ANIMATION FROM REACT SPRING\r\n  const animation = useSpring({\r\n    config: {\r\n      duration: 250,\r\n    },\r\n    opacity: showModal ? 1 : 0.0,\r\n    transform: showModal ? `translateY(0%)` : `translateY(-100%)`,\r\n  });\r\n\r\n  //\r\n  //\r\n  //\r\n  //ESCAPE KEY CLOSE MODAL\r\n  const escapePress = useCallback(\r\n    (e) => {\r\n      if (e.key === \"Escape\" && showModal) {\r\n        closemodal(0);\r\n      }\r\n    },\r\n    [showModal, closemodal]\r\n  );\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"keydown\", escapePress);\r\n    return () => document.removeEventListener(\"keydown\", escapePress);\r\n  }, [escapePress]);\r\n\r\n  //\r\n  //\r\n  //\r\n  //USEREF TARGETS A DIV(BACKGROUND) AND CLOSES MODAL ON CLICK\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const onBackgroundFocus = (e: any): void => {\r\n    if (inputRef.current === e.target) {\r\n      closemodal(0);\r\n    }\r\n  };\r\n\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n  const dispatch = useDispatch();\r\n\r\n  const switchThemes = () => {\r\n    toggleDarkMode = true;\r\n    dispatch(DarkmodeAction(true));\r\n    localStorage.setItem(\"darkmode\", toggleDarkMode.toString());\r\n    closemodal(0);\r\n    alert(\"kjh\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {showModal ? (\r\n        <DialogContent\r\n          className=\"dialog-container dontallowhighlighting \"\r\n          onClick={onBackgroundFocus}\r\n          style={{\r\n            padding: \"0px\",\r\n\r\n            height: \"100vh\",\r\n          }}\r\n          ref={inputRef}\r\n        >\r\n          <animated.div style={animation}>\r\n            <Grid\r\n              container\r\n              className={\r\n                darkmode\r\n                  ? \"Background-header-dark theme-more-container\"\r\n                  : \"Background-header-light theme-more-container\"\r\n              }\r\n            >\r\n              <Grid item sm={8} md={10} xs={7}></Grid>\r\n              <Grid\r\n                item\r\n                xs={2}\r\n                sm={2}\r\n                md={1}\r\n                className=\"zuperking\"\r\n                style={marginData}\r\n              >\r\n                <Switch\r\n                  size=\"medium\"\r\n                  checked={darkmode}\r\n                  className={\r\n                    darkmode\r\n                      ? \"icon-color-dark dontallowhighlighting  \"\r\n                      : \"icon-color-light  dontallowhighlighting  \"\r\n                  }\r\n                  onChange={() => {\r\n                    switchThemes();\r\n                  }}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid\r\n                item\r\n                xs={3}\r\n                className=\"dontallowhighlighting add-rounded-icon-right\"\r\n                sm={2}\r\n                md={1}\r\n              >\r\n                <AddRoundedIcon\r\n                  className={\r\n                    darkmode\r\n                      ? \"make-small-icons-clickable-dark  dontallowhighlighting  \"\r\n                      : \"make-small-icons-clickable-light  dontallowhighlighting  \"\r\n                  }\r\n                  fontSize=\"large\"\r\n                  style={fontData}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </animated.div>\r\n        </DialogContent>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport const OptionInnerModal = React.memo(OptionInnerModalx);\r\n"]},"metadata":{},"sourceType":"module"}