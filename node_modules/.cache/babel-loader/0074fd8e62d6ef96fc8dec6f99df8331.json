{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\log\\\\PasswordCheck.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useRef, useEffect } from \"react\";\nimport { TextField, DialogContent } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { matchPc, matchTablet } from \"../DetectDevice\";\nimport { Grid } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { ActivateLoaderAction, HideLoaderAction } from \"../GlobalActions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction PasswordCheckx({\n  widthHolder,\n  checkSignupPasswordACTIVATE,\n  signmeup,\n  responseErrorConfirmPassword\n}) {\n  _s();\n\n  ///\n  ///\n  ///\n  /// GET DARKMODE FROM REDUX STORE\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const [showSpinner, setshowSpinner] = useState(false);\n  const confirmPaswordTimer = useRef(null);\n  const [checkSignupPassword, setcheckSignupPassword] = useState(\"\"); ///\n  ///\n  ///\n  ///CLEAR REPEAT PASSWORD ON  UI SHOW(checkSignupPasswordACTIVAT)\n\n  useEffect(() => {\n    setcheckSignupPassword(\"\");\n  }, [checkSignupPasswordACTIVATE]); /////\n\n  var sizex = undefined;\n  var font1 = \" \";\n  var font2 = \" \";\n  var transform = \"\";\n  var widthcheckPassword = \"\";\n  var displayy = \"\"; ///////\n\n  if (matchPc) {\n    sizex = \"medium\";\n    font1 = \"2.7vh\";\n    font2 = \"1.9vh\";\n    transform = \"scale(1)\";\n    widthcheckPassword = widthHolder;\n    displayy = \"none\";\n  } else if (matchTablet) {\n    sizex = \"small\";\n    font1 = \"2.6vh\";\n    font2 = \"2vh\";\n    transform = \"scale(1)\";\n    widthcheckPassword = \"62%\";\n    displayy = \"block\";\n  } else {\n    sizex = \"small\";\n    font1 = \"\";\n    font2 = \"\";\n    transform = \"scale(0.94)\";\n    widthcheckPassword = \"100%\";\n    displayy = \"block\";\n  } ///\n  ///\n  ///\n  /// UPDATE CONFIRM PASSWORD VALUE/ SHOW SPINNER REPEAT PASSWORD\n\n\n  const updatecheckSignupPasswordvalues = useCallback(e => {\n    const {\n      value\n    } = e.target;\n\n    if (confirmPaswordTimer.current) {\n      clearTimeout(confirmPaswordTimer.current);\n    }\n\n    setcheckSignupPassword(value);\n\n    if (showSpinner) {} else {\n      ///setshowSpinner(true);\n      dispatch(ActivateLoaderAction(\"full\"));\n    }\n\n    confirmPaswordTimer.current = setTimeout(() => {\n      /// setshowSpinner(false);\n      dispatch(HideLoaderAction(\"full\"));\n      signmeup(value);\n    }, 2500);\n  }, [signmeup, showSpinner]);\n  var spinColor = \"\";\n  var topp = \"\";\n  var toptext = \"\";\n  var spinsize = 60;\n  var left = \"\";\n  darkmodeReducer ? spinColor = \"#333333\" : spinColor = \"#aaaaaa\";\n\n  if (matchPc) {\n    topp = \"11em\";\n    toptext = \"-17vh\";\n    spinsize = 55;\n    left = \"42%\";\n  } else if (matchTablet) {\n    topp = \"35em\";\n    toptext = \"-22vh\";\n    spinsize = 76;\n    left = \"45%\";\n  } else {\n    topp = \"10em\";\n    toptext = \"-31vh\";\n    spinsize = 60;\n    left = \"42%\";\n  } ///\n  ///\n  ///\n  ///MATERIAL UI SPINNER STYLES (INSPIRED BY FACEBOOK SPINNERS)\n\n\n  const useStylesmodalformsignup = makeStyles(theme => ({\n    root: {\n      position: \"relative\",\n      textAlign: \"center\",\n      left: 0\n    },\n    bottom: {\n      color: theme.palette.grey[theme.palette.type === \"light\" ? 300 : 700]\n    },\n    top: {\n      color: responseErrorConfirmPassword ? \"red\" : spinColor,\n      animationDuration: \"550ms\",\n      position: \"absolute\",\n      left: 0\n    },\n    circle: {\n      strokeLinecap: \"round\"\n    }\n  }));\n  const classes = useStylesmodalformsignup();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: checkSignupPasswordACTIVATE ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(DialogContent, {\n        className: darkmodeReducer ? \" dontallowhighlighting  mobileTextfield-backplateColorDark\" : \" dontallowhighlighting  mobileTextfield-backplateColorLight\",\n        style: {\n          zIndex: 12,\n          display: displayy,\n          bottom: \"0em\",\n          height: \"95.5vh\",\n          overflow: \"hidden\",\n          width: \"100%\",\n          position: \"fixed\",\n          marginTop: \"-3px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        style: {\n          position: \"fixed\",\n          top: topp,\n          left: left,\n          zIndex: 14\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.root,\n          style: {\n            opacity: showSpinner ? \"0.3\" : \"0\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n            variant: \"determinate\",\n            className: classes.bottom,\n            size: spinsize,\n            thickness: 4,\n            value: 100\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CircularProgress, {\n            variant: \"indeterminate\",\n            disableShrink: true,\n            className: classes.top,\n            classes: {\n              circle: classes.circle\n            },\n            size: spinsize,\n            thickness: 4\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        size: sizex,\n        inputProps: {\n          style: {\n            fontSize: font1\n          }\n        },\n        InputLabelProps: {\n          style: {\n            fontSize: font2,\n            color: responseErrorConfirmPassword ? \"red\" : \"\"\n          }\n        },\n        style: {\n          transform: transform,\n          width: widthcheckPassword,\n          position: \"relative\",\n          top: toptext,\n          zIndex: 14\n        },\n        label: responseErrorConfirmPassword ? \"Passwords Must Be Same\" : \"Repeat Password\",\n        type: \"password\",\n        onChange: updatecheckSignupPasswordvalues,\n        name: \"inputedUsername\",\n        value: checkSignupPassword,\n        variant: \"standard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : null\n  }, void 0, false);\n}\n\n_s(PasswordCheckx, \"YhRjgbNeMV1FBh/9RU05VIMVJCE=\", false, function () {\n  return [useSelector, useStylesmodalformsignup];\n});\n\n_c = PasswordCheckx;\nexport const PasswordCheck = /*#__PURE__*/React.memo(PasswordCheckx);\n_c2 = PasswordCheck;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PasswordCheckx\");\n$RefreshReg$(_c2, \"PasswordCheck\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/log/PasswordCheck.tsx"],"names":["React","useState","useCallback","useRef","useEffect","TextField","DialogContent","makeStyles","matchPc","matchTablet","Grid","useSelector","CircularProgress","ActivateLoaderAction","HideLoaderAction","PasswordCheckx","widthHolder","checkSignupPasswordACTIVATE","signmeup","responseErrorConfirmPassword","darkmode","state","GlobalReducer","darkmodeReducer","showSpinner","setshowSpinner","confirmPaswordTimer","checkSignupPassword","setcheckSignupPassword","sizex","undefined","font1","font2","transform","widthcheckPassword","displayy","updatecheckSignupPasswordvalues","e","value","target","current","clearTimeout","dispatch","setTimeout","spinColor","topp","toptext","spinsize","left","useStylesmodalformsignup","theme","root","position","textAlign","bottom","color","palette","grey","type","top","animationDuration","circle","strokeLinecap","classes","zIndex","display","height","overflow","width","marginTop","opacity","style","fontSize","PasswordCheck","memo"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useRef, useEffect } from \"react\";\r\n\r\nimport { TextField, DialogContent } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { useSelector } from \"react-redux\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { IPasswordCheck } from \"./log-Interfaces\";\r\nimport { ActivateLoaderAction, HideLoaderAction } from \"../GlobalActions\";\r\n\r\nfunction PasswordCheckx({\r\n  widthHolder,\r\n  checkSignupPasswordACTIVATE,\r\n  signmeup,\r\n  responseErrorConfirmPassword,\r\n}: IPasswordCheck): JSX.Element {\r\n  ///\r\n  ///\r\n  ///\r\n  /// GET DARKMODE FROM REDUX STORE\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n\r\n  const darkmodeReducer = darkmode;\r\n\r\n  const [showSpinner, setshowSpinner] = useState<boolean>(false);\r\n  const confirmPaswordTimer = useRef<ReturnType<typeof setTimeout> | null>(\r\n    null\r\n  );\r\n\r\n  const [checkSignupPassword, setcheckSignupPassword] = useState<string>(\"\");\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  ///CLEAR REPEAT PASSWORD ON  UI SHOW(checkSignupPasswordACTIVAT)\r\n  useEffect(() => {\r\n    setcheckSignupPassword(\"\");\r\n  }, [checkSignupPasswordACTIVATE]);\r\n\r\n  /////\r\n  var sizex: \"small\" | \"medium\" | undefined = undefined;\r\n  var font1 = \" \";\r\n  var font2 = \" \";\r\n  var transform = \"\";\r\n  var widthcheckPassword = \"\";\r\n\r\n  var displayy = \"\";\r\n\r\n  ///////\r\n\r\n  if (matchPc) {\r\n    sizex = \"medium\";\r\n    font1 = \"2.7vh\";\r\n    font2 = \"1.9vh\";\r\n    transform = \"scale(1)\";\r\n    widthcheckPassword = widthHolder;\r\n\r\n    displayy = \"none\";\r\n  } else if (matchTablet) {\r\n    sizex = \"small\";\r\n    font1 = \"2.6vh\";\r\n    font2 = \"2vh\";\r\n    transform = \"scale(1)\";\r\n    widthcheckPassword = \"62%\";\r\n\r\n    displayy = \"block\";\r\n  } else {\r\n    sizex = \"small\";\r\n    font1 = \"\";\r\n    font2 = \"\";\r\n    transform = \"scale(0.94)\";\r\n    widthcheckPassword = \"100%\";\r\n\r\n    displayy = \"block\";\r\n  }\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// UPDATE CONFIRM PASSWORD VALUE/ SHOW SPINNER REPEAT PASSWORD\r\n  const updatecheckSignupPasswordvalues = useCallback(\r\n    (e: any) => {\r\n      const { value } = e.target;\r\n      if (confirmPaswordTimer.current) {\r\n        clearTimeout(confirmPaswordTimer.current);\r\n      }\r\n      setcheckSignupPassword(value);\r\n\r\n      if (showSpinner) {\r\n      } else {\r\n        ///setshowSpinner(true);\r\n        dispatch(ActivateLoaderAction(\"full\"));\r\n      }\r\n\r\n      confirmPaswordTimer.current = setTimeout(() => {\r\n        /// setshowSpinner(false);\r\n        dispatch(HideLoaderAction(\"full\"));\r\n        signmeup(value);\r\n      }, 2500);\r\n    },\r\n\r\n    [signmeup, showSpinner]\r\n  );\r\n\r\n  var spinColor = \"\";\r\n  var topp = \"\";\r\n  var toptext = \"\";\r\n  var spinsize: number = 60;\r\n  var left = \"\";\r\n  darkmodeReducer ? (spinColor = \"#333333\") : (spinColor = \"#aaaaaa\");\r\n  if (matchPc) {\r\n    topp = \"11em\";\r\n    toptext = \"-17vh\";\r\n    spinsize = 55;\r\n    left = \"42%\";\r\n  } else if (matchTablet) {\r\n    topp = \"35em\";\r\n    toptext = \"-22vh\";\r\n    spinsize = 76;\r\n    left = \"45%\";\r\n  } else {\r\n    topp = \"10em\";\r\n    toptext = \"-31vh\";\r\n    spinsize = 60;\r\n    left = \"42%\";\r\n  }\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  ///MATERIAL UI SPINNER STYLES (INSPIRED BY FACEBOOK SPINNERS)\r\n  const useStylesmodalformsignup = makeStyles((theme) => ({\r\n    root: {\r\n      position: \"relative\",\r\n      textAlign: \"center\",\r\n      left: 0,\r\n    },\r\n    bottom: {\r\n      color: theme.palette.grey[theme.palette.type === \"light\" ? 300 : 700],\r\n    },\r\n    top: {\r\n      color: responseErrorConfirmPassword ? \"red\" : spinColor,\r\n      animationDuration: \"550ms\",\r\n      position: \"absolute\",\r\n      left: 0,\r\n    },\r\n    circle: {\r\n      strokeLinecap: \"round\",\r\n    },\r\n  }));\r\n\r\n  const classes = useStylesmodalformsignup();\r\n\r\n  return (\r\n    <>\r\n      {checkSignupPasswordACTIVATE ? (\r\n        <>\r\n          <DialogContent\r\n            className={\r\n              darkmodeReducer\r\n                ? \" dontallowhighlighting  mobileTextfield-backplateColorDark\"\r\n                : \" dontallowhighlighting  mobileTextfield-backplateColorLight\"\r\n            }\r\n            style={{\r\n              zIndex: 12,\r\n              display: displayy,\r\n              bottom: \"0em\",\r\n              height: \"95.5vh\",\r\n              overflow: \"hidden\",\r\n              width: \"100%\",\r\n              position: \"fixed\",\r\n              marginTop: \"-3px\",\r\n            }}\r\n          ></DialogContent>\r\n          <Grid\r\n            item\r\n            xs={12}\r\n            style={{\r\n              position: \"fixed\",\r\n              top: topp,\r\n              left: left,\r\n              zIndex: 14,\r\n            }}\r\n          >\r\n            <div\r\n              className={classes.root}\r\n              style={{\r\n                opacity: showSpinner ? \"0.3\" : \"0\",\r\n              }}\r\n            >\r\n              <CircularProgress\r\n                variant=\"determinate\"\r\n                className={classes.bottom}\r\n                size={spinsize}\r\n                thickness={4}\r\n                value={100}\r\n              />\r\n              <CircularProgress\r\n                variant=\"indeterminate\"\r\n                disableShrink\r\n                className={classes.top}\r\n                classes={{\r\n                  circle: classes.circle,\r\n                }}\r\n                size={spinsize}\r\n                thickness={4}\r\n              />\r\n            </div>{\" \"}\r\n          </Grid>\r\n          <TextField\r\n            size={sizex}\r\n            inputProps={{ style: { fontSize: font1 } }}\r\n            InputLabelProps={{\r\n              style: {\r\n                fontSize: font2,\r\n                color: responseErrorConfirmPassword ? \"red\" : \"\",\r\n              },\r\n            }}\r\n            style={{\r\n              transform: transform,\r\n              width: widthcheckPassword,\r\n              position: \"relative\",\r\n              top: toptext,\r\n              zIndex: 14,\r\n            }}\r\n            label={\r\n              responseErrorConfirmPassword\r\n                ? \"Passwords Must Be Same\"\r\n                : \"Repeat Password\"\r\n            }\r\n            type=\"password\"\r\n            onChange={updatecheckSignupPasswordvalues}\r\n            name=\"inputedUsername\"\r\n            value={checkSignupPassword}\r\n            variant=\"standard\"\r\n          />\r\n        </>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport const PasswordCheck = React.memo(PasswordCheckx);\r\n"]},"metadata":{},"sourceType":"module"}