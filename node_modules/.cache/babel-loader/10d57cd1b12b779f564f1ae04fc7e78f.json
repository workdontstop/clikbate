{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\app-folder\\\\ModalLog.tsx\",\n    _s = $RefreshSig$();\n\nimport { useRef, useEffect, useState, useCallback } from \"react\";\nimport { useSpring, animated } from \"react-spring\";\nimport { Grid, DialogContent, Paper, makeStyles, createMuiTheme, TextField, Button } from \"@material-ui/core\";\nimport im1 from \"./images/modalpic1.jpg\";\nimport im2 from \"./images/modalpic2.jpg\";\nimport im3 from \"./images/modalpic3.png\";\nimport \"./ModalLog.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Modalx({\n  CloseModalForm,\n  showModalForm,\n  setShowModalForm,\n  PaperStyle\n}) {\n  _s();\n\n  //\n  ///\n  ///\n  const initialValue = {\n    emailv: \"\",\n    usernamev: \"\",\n    passwordv: \"\"\n  };\n  const [showimage, setShowimage] = useState(\" \");\n  const [zoomedModal, setZoomedModal] = useState(false);\n  const [wideImage, setWideImage] = useState(false);\n  const [valuesx, setValuesx] = useState(initialValue); //\n  //\n  //\n  //CREATE A SLIDE UP ANIMATION WITH  REACT SPRING\n\n  const animation = useSpring({\n    config: {\n      duration: 1000\n    },\n    opacity: showModalForm ? 1 : 0.9,\n    transform: showModalForm ? `translateY(0%)` : `translateY(100%)`\n  }); //\n  //\n  //\n  // USEREF TARGETS A DIV(BACKGROUND) AND CLOSES MODAL ON CLICK\n\n  const ModalBackgroundRef = useRef(null);\n\n  const onBackgroundFocus = e => {\n    if (ModalBackgroundRef.current === e.target) {\n      CloseModalForm(0);\n    }\n  }; //\n  //\n  //\n  // ESCAPE KEY CLOSE MODAL\n\n\n  const escapePress = useCallback(e => {\n    if (e.key === \"Escape\" && showModalForm) {\n      CloseModalForm(0);\n    }\n  }, [setShowModalForm, showModalForm]);\n  useEffect(() => {\n    document.addEventListener(\"keydown\", escapePress);\n    return () => document.removeEventListener(\"keydown\", escapePress);\n  }, [escapePress]); //\n  //\n  //\n  // RANDOMISE IMAGE\n\n  useEffect(() => {\n    let imagecontrol = [1, 2, 3];\n    var randomimage = imagecontrol[Math.floor(Math.random() * imagecontrol.length)];\n\n    if (randomimage == 1) {\n      setShowimage(im1);\n    } else if (randomimage == 2) {\n      setShowimage(im2);\n    } else {\n      setShowimage(im3);\n    }\n  }, []); //\n  //\n  //\n  // GET IMAGE WIDTH ,HEIGHT AND SET WIDE IMAGE\n\n  const onimageload = e => {\n    const imageHeight = e.target.clientHeight;\n    const imageWidth = e.target.clientWidth;\n\n    if (imageWidth > imageHeight) {\n      setWideImage(true);\n    }\n  }; //\n  //\n  //\n  // SHOW A FULLSCREEN MODAL VIEW\n\n\n  const zoomlogmodal = () => {\n    setZoomedModal(!zoomedModal);\n  }; //\n  //\n  //\n  // DYNAMIC MODAL LAYOUT VARIABLES\n\n\n  const wideImageControlTrue = \"75vw\";\n  const wideImageControlfalse = \"70vw\";\n  const zoomImageControl = \"100vw\";\n  const GridMiniAwide = 8;\n  const GridMiniBwide = 4;\n  const GridMiniAlong = 7;\n  const GridMiniBlong = 5;\n  const GridZoomAwide = 8;\n  const GridZoomBwide = 4;\n  const GridZoomAlong = 6;\n  const GridZoomBlong = 6;\n  let GridHolderA = 7;\n  let GridHolderB = 5;\n  let GridxA = 7;\n  let GridxB = 5;\n  let GridyA = 7;\n  let GridyB = 5;\n  let wideImageControl = \"70vw\";\n  let imageReal = \"75vw\";\n  let borderGrid = \"11px\";\n\n  if (zoomedModal) {\n    borderGrid = \"0px\";\n\n    if (wideImage) {\n      wideImageControl = wideImageControlTrue;\n      GridxA = GridZoomAwide;\n      GridxB = GridZoomBwide;\n    } else {\n      wideImageControl = wideImageControlfalse;\n      GridxA = GridZoomAlong;\n      GridxB = GridZoomBlong;\n    }\n\n    imageReal = zoomImageControl;\n    GridHolderA = GridxA;\n    GridHolderB = GridxB;\n  } else {\n    borderGrid = \"11px\";\n\n    if (wideImage) {\n      wideImageControl = wideImageControlTrue;\n      GridyA = GridMiniAwide;\n      GridyB = GridMiniBwide;\n    } else {\n      wideImageControl = wideImageControlfalse;\n      GridyA = GridMiniAlong;\n      GridyB = GridMiniBlong;\n    }\n\n    imageReal = wideImageControl;\n    GridHolderA = GridyA;\n    GridHolderB = GridyB;\n  } //   DYNAMIC MODAL LAYOUT VARIABLES\n  //\n  //\n  //\n\n\n  let themeGeneralSettingsModal = createMuiTheme({});\n  var useStyleModal = makeStyles(themeGeneralSettingsModal => ({\n    containerStyle: {\n      width: imageReal,\n      height: \"auto\",\n      boxShadow: \"0 5px 16px rgba(0, 0, 0, 0.2)\",\n      color: \"#000000\",\n      position: \"relative\",\n      zIndex: 10,\n      borderRadius: borderGrid\n    },\n    imageStyle: {\n      objectFit: \"cover\",\n      width: \"100%\",\n      height: \"100%\",\n      borderRadius: `${borderGrid} 0 0 10px`,\n      background: \"#000000\"\n    }\n  }));\n  var classes = useStyleModal();\n  const signmeup = e = {};\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: showModalForm ? /*#__PURE__*/_jsxDEV(DialogContent, {\n      className: \"FormDialog-container dontallowhighlighting \",\n      onClick: onBackgroundFocus,\n      style: {\n        overflow: \"hidden\"\n      },\n      ref: ModalBackgroundRef,\n      children: /*#__PURE__*/_jsxDEV(animated.div, {\n        style: animation,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          className: PaperStyle,\n          style: {\n            borderRadius: borderGrid\n          },\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            xs: 12,\n            className: classes.containerStyle,\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: GridHolderA,\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                onClick: zoomlogmodal,\n                onLoad: onimageload,\n                src: showimage,\n                className: classes.imageStyle,\n                alt: \"Login Image\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 213,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              xs: GridHolderB,\n              item: true,\n              className: \"formholder\",\n              children: [/*#__PURE__*/_jsxDEV(TextField, {\n                style: {\n                  width: \"82%\",\n                  paddingBottom: \"80px\"\n                },\n                label: \"Email\",\n                variant: \"outlined\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                style: {\n                  width: \"82%\",\n                  paddingBottom: \"30px\"\n                },\n                label: \"Username\",\n                variant: \"outlined\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 228,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                style: {\n                  width: \"82%\",\n                  paddingBottom: \"30px\"\n                },\n                label: \"Password\",\n                variant: \"outlined\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 233,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                xs: 4,\n                children: [/*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  className: \"buttonpad buttonshake\",\n                  xs: 12,\n                  children: /*#__PURE__*/_jsxDEV(Button, {\n                    onChange: signmeup,\n                    fullWidth: true,\n                    variant: \"outlined\",\n                    size: \"large\",\n                    color: \"primary\",\n                    children: \"Sign Up\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 241,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 240,\n                  columnNumber: 21\n                }, this), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }, this) : null\n  }, void 0, false);\n}\n\n_s(Modalx, \"PuJM9P4POWGsWU7JJ/Fi14zj9ww=\", true, function () {\n  return [useSpring];\n});\n\n_c = Modalx;\n\nvar _c;\n\n$RefreshReg$(_c, \"Modalx\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/app-folder/ModalLog.tsx"],"names":["useRef","useEffect","useState","useCallback","useSpring","animated","Grid","DialogContent","Paper","makeStyles","createMuiTheme","TextField","Button","im1","im2","im3","Modalx","CloseModalForm","showModalForm","setShowModalForm","PaperStyle","initialValue","emailv","usernamev","passwordv","showimage","setShowimage","zoomedModal","setZoomedModal","wideImage","setWideImage","valuesx","setValuesx","animation","config","duration","opacity","transform","ModalBackgroundRef","onBackgroundFocus","e","current","target","escapePress","key","document","addEventListener","removeEventListener","imagecontrol","randomimage","Math","floor","random","length","onimageload","imageHeight","clientHeight","imageWidth","clientWidth","zoomlogmodal","wideImageControlTrue","wideImageControlfalse","zoomImageControl","GridMiniAwide","GridMiniBwide","GridMiniAlong","GridMiniBlong","GridZoomAwide","GridZoomBwide","GridZoomAlong","GridZoomBlong","GridHolderA","GridHolderB","GridxA","GridxB","GridyA","GridyB","wideImageControl","imageReal","borderGrid","themeGeneralSettingsModal","useStyleModal","containerStyle","width","height","boxShadow","color","position","zIndex","borderRadius","imageStyle","objectFit","background","classes","signmeup","overflow","paddingBottom"],"mappings":"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","sourcesContent":["import { useRef, useEffect, useState, useCallback } from \"react\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport {\r\n  Grid,\r\n  DialogContent,\r\n  Paper,\r\n  makeStyles,\r\n  createMuiTheme,\r\n  TextField,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport im1 from \"./images/modalpic1.jpg\";\r\nimport im2 from \"./images/modalpic2.jpg\";\r\nimport im3 from \"./images/modalpic3.png\";\r\n\r\nimport { ImodalForm, IGrid } from \"./appFolder-Interfaces\";\r\nimport \"./ModalLog.css\";\r\n\r\nexport default function Modalx({\r\n  CloseModalForm,\r\n  showModalForm,\r\n  setShowModalForm,\r\n  PaperStyle,\r\n}: ImodalForm): JSX.Element {\r\n  //\r\n  ///\r\n  ///\r\n  const initialValue = {\r\n    emailv: \"\",\r\n    usernamev: \"\",\r\n    passwordv: \"\",\r\n  };\r\n  const [showimage, setShowimage] = useState<string>(\" \");\r\n  const [zoomedModal, setZoomedModal] = useState<boolean>(false);\r\n  const [wideImage, setWideImage] = useState<boolean>(false);\r\n  const [valuesx, setValuesx] = useState(initialValue);\r\n\r\n  //\r\n  //\r\n  //\r\n  //CREATE A SLIDE UP ANIMATION WITH  REACT SPRING\r\n  const animation = useSpring({\r\n    config: {\r\n      duration: 1000,\r\n    },\r\n    opacity: showModalForm ? 1 : 0.9,\r\n    transform: showModalForm ? `translateY(0%)` : `translateY(100%)`,\r\n  });\r\n\r\n  //\r\n  //\r\n  //\r\n  // USEREF TARGETS A DIV(BACKGROUND) AND CLOSES MODAL ON CLICK\r\n  const ModalBackgroundRef = useRef<HTMLInputElement>(null);\r\n  const onBackgroundFocus = (e: any): void => {\r\n    if (ModalBackgroundRef.current === e.target) {\r\n      CloseModalForm(0);\r\n    }\r\n  };\r\n  //\r\n  //\r\n  //\r\n  // ESCAPE KEY CLOSE MODAL\r\n  const escapePress = useCallback(\r\n    (e) => {\r\n      if (e.key === \"Escape\" && showModalForm) {\r\n        CloseModalForm(0);\r\n      }\r\n    },\r\n    [setShowModalForm, showModalForm]\r\n  );\r\n  useEffect(() => {\r\n    document.addEventListener(\"keydown\", escapePress);\r\n    return () => document.removeEventListener(\"keydown\", escapePress);\r\n  }, [escapePress]);\r\n  //\r\n  //\r\n  //\r\n  // RANDOMISE IMAGE\r\n  useEffect(() => {\r\n    let imagecontrol: number[] = [1, 2, 3];\r\n    var randomimage =\r\n      imagecontrol[Math.floor(Math.random() * imagecontrol.length)];\r\n\r\n    if (randomimage == 1) {\r\n      setShowimage(im1);\r\n    } else if (randomimage == 2) {\r\n      setShowimage(im2);\r\n    } else {\r\n      setShowimage(im3);\r\n    }\r\n  }, []);\r\n  //\r\n  //\r\n  //\r\n  // GET IMAGE WIDTH ,HEIGHT AND SET WIDE IMAGE\r\n  const onimageload = (e: any) => {\r\n    const imageHeight = e.target.clientHeight;\r\n    const imageWidth = e.target.clientWidth;\r\n    if (imageWidth > imageHeight) {\r\n      setWideImage(true);\r\n    }\r\n  };\r\n  //\r\n  //\r\n  //\r\n  // SHOW A FULLSCREEN MODAL VIEW\r\n  const zoomlogmodal = () => {\r\n    setZoomedModal(!zoomedModal);\r\n  };\r\n  //\r\n  //\r\n  //\r\n  // DYNAMIC MODAL LAYOUT VARIABLES\r\n  const wideImageControlTrue: string = \"75vw\";\r\n  const wideImageControlfalse: string = \"70vw\";\r\n  const zoomImageControl: string = \"100vw\";\r\n  const GridMiniAwide: IGrid = 8;\r\n  const GridMiniBwide: IGrid = 4;\r\n  const GridMiniAlong: IGrid = 7;\r\n  const GridMiniBlong: IGrid = 5;\r\n  const GridZoomAwide: IGrid = 8;\r\n  const GridZoomBwide: IGrid = 4;\r\n  const GridZoomAlong: IGrid = 6;\r\n  const GridZoomBlong: IGrid = 6;\r\n\r\n  let GridHolderA: IGrid = 7;\r\n  let GridHolderB: IGrid = 5;\r\n\r\n  let GridxA: IGrid = 7;\r\n  let GridxB: IGrid = 5;\r\n\r\n  let GridyA: IGrid = 7;\r\n  let GridyB: IGrid = 5;\r\n\r\n  let wideImageControl: string = \"70vw\";\r\n  let imageReal: string = \"75vw\";\r\n\r\n  let borderGrid: string = \"11px\";\r\n\r\n  if (zoomedModal) {\r\n    borderGrid = \"0px\";\r\n    if (wideImage) {\r\n      wideImageControl = wideImageControlTrue;\r\n      GridxA = GridZoomAwide;\r\n      GridxB = GridZoomBwide;\r\n    } else {\r\n      wideImageControl = wideImageControlfalse;\r\n      GridxA = GridZoomAlong;\r\n      GridxB = GridZoomBlong;\r\n    }\r\n    imageReal = zoomImageControl;\r\n    GridHolderA = GridxA;\r\n    GridHolderB = GridxB;\r\n  } else {\r\n    borderGrid = \"11px\";\r\n    if (wideImage) {\r\n      wideImageControl = wideImageControlTrue;\r\n      GridyA = GridMiniAwide;\r\n      GridyB = GridMiniBwide;\r\n    } else {\r\n      wideImageControl = wideImageControlfalse;\r\n      GridyA = GridMiniAlong;\r\n      GridyB = GridMiniBlong;\r\n    }\r\n    imageReal = wideImageControl;\r\n    GridHolderA = GridyA;\r\n    GridHolderB = GridyB;\r\n  }\r\n  //   DYNAMIC MODAL LAYOUT VARIABLES\r\n  //\r\n  //\r\n  //\r\n\r\n  let themeGeneralSettingsModal = createMuiTheme({});\r\n\r\n  var useStyleModal = makeStyles((themeGeneralSettingsModal) => ({\r\n    containerStyle: {\r\n      width: imageReal,\r\n      height: \"auto\",\r\n      boxShadow: \"0 5px 16px rgba(0, 0, 0, 0.2)\",\r\n      color: \"#000000\",\r\n      position: \"relative\",\r\n      zIndex: 10,\r\n      borderRadius: borderGrid,\r\n    },\r\n    imageStyle: {\r\n      objectFit: \"cover\",\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n      borderRadius: `${borderGrid} 0 0 10px`,\r\n      background: \"#000000\",\r\n    },\r\n  }));\r\n\r\n  var classes = useStyleModal();\r\n\r\n  const signmeup = (e = {});\r\n\r\n  return (\r\n    <>\r\n      {showModalForm ? (\r\n        <DialogContent\r\n          className=\"FormDialog-container dontallowhighlighting \"\r\n          onClick={onBackgroundFocus}\r\n          style={{ overflow: \"hidden\" }}\r\n          ref={ModalBackgroundRef}\r\n        >\r\n          <animated.div style={animation}>\r\n            <Paper className={PaperStyle} style={{ borderRadius: borderGrid }}>\r\n              <Grid container xs={12} className={classes.containerStyle}>\r\n                <Grid item xs={GridHolderA}>\r\n                  <img\r\n                    onClick={zoomlogmodal}\r\n                    onLoad={onimageload}\r\n                    src={showimage}\r\n                    className={classes.imageStyle}\r\n                    alt=\"Login Image\"\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid xs={GridHolderB} item className=\"formholder\">\r\n                  <TextField\r\n                    style={{ width: \"82%\", paddingBottom: \"80px\" }}\r\n                    label=\"Email\"\r\n                    variant=\"outlined\"\r\n                  />\r\n                  <TextField\r\n                    style={{ width: \"82%\", paddingBottom: \"30px\" }}\r\n                    label=\"Username\"\r\n                    variant=\"outlined\"\r\n                  />\r\n                  <TextField\r\n                    style={{ width: \"82%\", paddingBottom: \"30px\" }}\r\n                    label=\"Password\"\r\n                    variant=\"outlined\"\r\n                  />\r\n\r\n                  <Grid container xs={4}>\r\n                    <Grid item className=\"buttonpad buttonshake\" xs={12}>\r\n                      <Button\r\n                        onChange={signmeup}\r\n                        fullWidth={true}\r\n                        variant=\"outlined\"\r\n                        size=\"large\"\r\n                        color=\"primary\"\r\n                      >\r\n                        Sign Up\r\n                      </Button>\r\n                    </Grid>{\" \"}\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Paper>\r\n          </animated.div>\r\n        </DialogContent>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}