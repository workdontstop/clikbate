{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\upload\\\\SuperCrop.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction SuperCropx({\n  cropimage,\n  selectedImage\n}) {\n  _s();\n\n  const cropCanvasRef = useRef(null); ////\n  ////\n  ////\n\n  const [cropArea, setcropArea] = useState(null); //\n\n  const [crop, setcrop] = useState({\n    x: 0,\n    y: 0\n  });\n  const [cropInitial, setcropInitial] = useState({\n    x: 0,\n    y: 0\n  });\n  const [cropOffset, setcropOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [Drag, setDrag] = useState(false); //\n\n  const [zoom, setzoom] = useState(1);\n  const [SourceWidthForCropX, setSourceWidthForCropX] = useState(0);\n  const [SourceWidthForCropY, setSourceWidthForCropY] = useState(0);\n  const [cropwidth, setcropwidth] = useState(0);\n  const [cropheight, setcropheight] = useState(0); ///\n  ///\n  ///DARKMODE FROM REDUX\n\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const getpreviewFixedWidthRef = useRef(null);\n  const getCropHeightRef = useRef(null);\n  const getFixedCropWidthRef = useRef(null);\n  const [getCropHeight, setgetCropHeight] = useState(0);\n  const [getCropHeightRealImageRatio, setgetCropHeightRealImageRatio] = useState(0);\n  const [getFixedCropWidth, setgetFixedCropWidth] = useState(0);\n  const [getpreviewFixedWidth, setgetpreviewFixedWidth] = useState(0);\n  const [CropImageHolder, setCropImageHolder] = useState(null);\n  const [OriginalImageWidth, setOriginalImageWidth] = useState(0);\n  const [OriginalImageHeight, setOriginalImageHeight] = useState(0);\n  const [BoxCropActivated, setBoxCropActivated] = useState(true);\n  const hdcanvasvalue = 2; ///\n  ///\n  ///\n  ///GET OPTIONS SLIDER IMAGE WIDTH FROM MATERIAL UI GRID\n\n  useEffect(() => {\n    if (getpreviewFixedWidthRef.current && getpreviewFixedWidthRef.current.clientWidth) {\n      setgetpreviewFixedWidth(getpreviewFixedWidthRef.current.clientWidth);\n    }\n\n    if (getCropHeightRef.current && getCropHeightRef.current.clientWidth) {\n      setgetCropHeight(getCropHeightRef.current.clientHeight * hdcanvasvalue);\n      setgetCropHeightRealImageRatio(getCropHeightRef.current.clientHeight);\n    }\n\n    if (getFixedCropWidthRef.current && getFixedCropWidthRef.current.clientWidth) {\n      setgetFixedCropWidth(getFixedCropWidthRef.current.clientWidth);\n    }\n  }, []); ///\n  ///\n  ///\n  ///\n  /// HANDLE TOUCH START EVENT\n\n  const handleTouchStart = (e, type) => {\n    console.log(e.clientX);\n\n    if (type === 0) {\n      setcropInitial({ ...cropInitial,\n        x: e.clientX,\n        y: e.clientY\n      });\n    } else {\n      setcropInitial({ ...cropInitial,\n        x: e.touches[0].clientX,\n        y: e.touches[0].clientY\n      });\n    }\n\n    if (e.target) {\n      setDrag(true);\n    }\n  };\n\n  const handleTouchEnd = () => {\n    setcropInitial({ ...cropInitial,\n      x: crop.x,\n      y: crop.y\n    });\n    setDrag(false);\n  };\n\n  const handleTouchDrag = (e, type) => {\n    if (Drag) {\n      if (type === 0) {\n        setcrop({ ...crop,\n          x: e.clientX - cropInitial.x,\n          y: e.clientY - cropInitial.y\n        });\n      } else {\n        setcrop({ ...crop,\n          x: e.touches[0].clientX - cropInitial.x,\n          y: e.touches[0].clientY - cropInitial.y\n        });\n      }\n\n      setcropOffset({ ...cropOffset,\n        x: crop.x,\n        y: crop.y\n      });\n    }\n  };\n\n  useEffect(() => {\n    const Newcropimage = new Image();\n    Newcropimage.src = cropimage;\n\n    Newcropimage.onload = function () {\n      setCropImageHolder(Newcropimage);\n      var data1 = Newcropimage.naturalWidth;\n      var data2 = Newcropimage.naturalHeight;\n      setOriginalImageWidth(data1);\n      setOriginalImageHeight(data2);\n      setcropwidth(data1);\n      setcropheight(data2);\n    };\n  }, [cropimage]);\n  useEffect(() => {\n    if (CropImageHolder && cropCanvasRef.current) {\n      const ctx = cropCanvasRef.current.getContext(\"2d\");\n      var RatiofromOriginalandfixedHeight = OriginalImageHeight / getCropHeight;\n      var NewBoxRatioWidth_WIDEIMAGE = OriginalImageWidth / RatiofromOriginalandfixedHeight;\n      setSourceWidthForCropX(NewBoxRatioWidth_WIDEIMAGE);\n      var RatiofromOriginalandfixedHeightx = OriginalImageWidth / getCropHeight;\n      var NewBoxRatioWidth_LONGIMAGE = OriginalImageHeight / RatiofromOriginalandfixedHeightx;\n      setSourceWidthForCropY(NewBoxRatioWidth_LONGIMAGE);\n      var ratioh = OriginalImageWidth * 3 / OriginalImageWidth;\n      var ratiow = OriginalImageHeight * 3 / OriginalImageHeight;\n\n      if (BoxCropActivated) {\n        cropCanvasRef.current.width = getCropHeight;\n        cropCanvasRef.current.height = getCropHeight;\n      } else {\n        cropCanvasRef.current.width = OriginalImageWidth;\n        cropCanvasRef.current.height = OriginalImageHeight;\n      }\n\n      var centerpreview = cropCanvasRef.current.width / 1.5 - NewBoxRatioWidth_LONGIMAGE / 1.5;\n      var xtraZoom = getCropHeight / NewBoxRatioWidth_WIDEIMAGE;\n      var centerCropCanvas = cropCanvasRef.current.width / 2 - NewBoxRatioWidth_WIDEIMAGE / 2;\n      var RatiofromOriginalandfixedHeight = OriginalImageHeight / getCropHeightRealImageRatio;\n      var newcropCSSWidth = OriginalImageWidth / RatiofromOriginalandfixedHeight;\n\n      if (BoxCropActivated) {\n        var dragDistanceY = NewBoxRatioWidth_LONGIMAGE * zoom - getCropHeight;\n        var dragDistanceX = NewBoxRatioWidth_WIDEIMAGE * zoom - getCropHeight;\n\n        if (OriginalImageWidth > OriginalImageHeight) {\n          ctx.drawImage(CropImageHolder, 0, 0, OriginalImageWidth, OriginalImageHeight, crop.x, 0, NewBoxRatioWidth_WIDEIMAGE * zoom, getCropHeight * zoom);\n        } else {\n          if (crop.y < -dragDistanceY) {\n            setcrop({ ...crop,\n              y: -dragDistanceY\n            });\n          } else if (crop.y > 0) {\n            setcrop({ ...crop,\n              y: 0\n            });\n          } else {}\n\n          ctx.drawImage(CropImageHolder, 0, crop.y, getCropHeight * zoom, NewBoxRatioWidth_LONGIMAGE * zoom);\n        }\n\n        cropCanvasRef.current.style.width = `${getCropHeight / hdcanvasvalue}px`;\n        cropCanvasRef.current.style.height = `${getCropHeight / hdcanvasvalue}px`;\n      } else {\n        ctx.drawImage(CropImageHolder, 0, 0, OriginalImageWidth * zoom, OriginalImageHeight * zoom);\n        cropCanvasRef.current.style.width = `${newcropCSSWidth}px`;\n        cropCanvasRef.current.style.height = `${getCropHeightRealImageRatio}px`;\n      }\n    }\n  }, [CropImageHolder, cropCanvasRef, OriginalImageWidth, OriginalImageHeight, crop.x, crop.y]);\n\n  const gg = () => {};\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      ref: getCropHeightRef,\n      style: {\n        position: \"relative\",\n        width: \"100%\",\n        height: \"70%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          ref: getFixedCropWidthRef,\n          xs: 4\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        onMouseDown: e => {\n          handleTouchStart(e, 0);\n        },\n        onTouchStart: e => {\n          handleTouchStart(e, 1);\n        },\n        onMouseMove: e => {\n          handleTouchDrag(e, 0);\n        },\n        onTouchMove: e => {\n          handleTouchDrag(e, 1);\n        },\n        onDragEnd: handleTouchEnd,\n        onTouchEnd: handleTouchEnd,\n        className: darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\",\n        ref: cropCanvasRef,\n        style: {\n          padding: \"0px\",\n          backgroundColor: \"#00ccff\",\n          margin: \"auto\"\n        }\n      }, cropimage, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      style: {\n        padding: \"0px\",\n        backgroundColor: \"#00ccff\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        ref: getpreviewFixedWidthRef,\n        xs: 5,\n        style: {\n          padding: \"0px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(SuperCropx, \"aHv1Nw8ro3D6Y0Xwv45oJe2uYl8=\", false, function () {\n  return [useSelector];\n});\n\n_c = SuperCropx;\nexport const SuperCrop = /*#__PURE__*/React.memo(SuperCropx);\n_c2 = SuperCrop;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SuperCropx\");\n$RefreshReg$(_c2, \"SuperCrop\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/upload/SuperCrop.tsx"],"names":["React","useRef","useState","useEffect","Grid","useSelector","SuperCropx","cropimage","selectedImage","cropCanvasRef","cropArea","setcropArea","crop","setcrop","x","y","cropInitial","setcropInitial","cropOffset","setcropOffset","Drag","setDrag","zoom","setzoom","SourceWidthForCropX","setSourceWidthForCropX","SourceWidthForCropY","setSourceWidthForCropY","cropwidth","setcropwidth","cropheight","setcropheight","darkmode","state","GlobalReducer","darkmodeReducer","getpreviewFixedWidthRef","getCropHeightRef","getFixedCropWidthRef","getCropHeight","setgetCropHeight","getCropHeightRealImageRatio","setgetCropHeightRealImageRatio","getFixedCropWidth","setgetFixedCropWidth","getpreviewFixedWidth","setgetpreviewFixedWidth","CropImageHolder","setCropImageHolder","OriginalImageWidth","setOriginalImageWidth","OriginalImageHeight","setOriginalImageHeight","BoxCropActivated","setBoxCropActivated","hdcanvasvalue","current","clientWidth","clientHeight","handleTouchStart","e","type","console","log","clientX","clientY","touches","target","handleTouchEnd","handleTouchDrag","Newcropimage","Image","src","onload","data1","naturalWidth","data2","naturalHeight","ctx","getContext","RatiofromOriginalandfixedHeight","NewBoxRatioWidth_WIDEIMAGE","RatiofromOriginalandfixedHeightx","NewBoxRatioWidth_LONGIMAGE","ratioh","ratiow","width","height","centerpreview","xtraZoom","centerCropCanvas","newcropCSSWidth","dragDistanceY","dragDistanceX","drawImage","style","gg","position","padding","backgroundColor","margin","SuperCrop","memo"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport Cropper from \"react-easy-crop\";\r\nimport MusicNoteIcon from \"@mui/icons-material/MusicNote\";\r\nimport PhotoIcon from \"@mui/icons-material/Photo\";\r\nimport GifIcon from \"@mui/icons-material/Gif\";\r\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\r\nimport Slider from \"@mui/material/Slider\";\r\nimport { AnySoaRecord } from \"dns\";\r\nimport { PreviewCanvas } from \"./PreviewCanvas\";\r\n\r\nfunction SuperCropx({ cropimage, selectedImage }: any): JSX.Element {\r\n  const cropCanvasRef: any = useRef(null);\r\n\r\n  ////\r\n  ////\r\n  ////\r\n  const [cropArea, setcropArea] = useState<any>(null);\r\n\r\n  //\r\n  const [crop, setcrop] = useState<any>({ x: 0, y: 0 });\r\n\r\n  const [cropInitial, setcropInitial] = useState<any>({ x: 0, y: 0 });\r\n\r\n  const [cropOffset, setcropOffset] = useState<any>({ x: 0, y: 0 });\r\n\r\n  const [Drag, setDrag] = useState<boolean>(false);\r\n  //\r\n\r\n  const [zoom, setzoom] = useState(1);\r\n\r\n  const [SourceWidthForCropX, setSourceWidthForCropX] = useState(0);\r\n\r\n  const [SourceWidthForCropY, setSourceWidthForCropY] = useState(0);\r\n\r\n  const [cropwidth, setcropwidth] = useState(0);\r\n  const [cropheight, setcropheight] = useState(0);\r\n\r\n  ///\r\n  ///\r\n  ///DARKMODE FROM REDUX\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n\r\n  const darkmodeReducer = darkmode;\r\n\r\n  const getpreviewFixedWidthRef = useRef<HTMLDivElement>(null);\r\n\r\n  const getCropHeightRef: any = useRef<HTMLDivElement>(null);\r\n\r\n  const getFixedCropWidthRef: any = useRef<HTMLDivElement>(null);\r\n\r\n  const [getCropHeight, setgetCropHeight] = useState(0);\r\n\r\n  const [getCropHeightRealImageRatio, setgetCropHeightRealImageRatio] =\r\n    useState(0);\r\n\r\n  const [getFixedCropWidth, setgetFixedCropWidth] = useState(0);\r\n\r\n  const [getpreviewFixedWidth, setgetpreviewFixedWidth] = useState(0);\r\n\r\n  const [CropImageHolder, setCropImageHolder] = useState<any>(null);\r\n\r\n  const [OriginalImageWidth, setOriginalImageWidth] = useState<number>(0);\r\n  const [OriginalImageHeight, setOriginalImageHeight] = useState<number>(0);\r\n\r\n  const [BoxCropActivated, setBoxCropActivated] = useState<boolean>(true);\r\n\r\n  const hdcanvasvalue = 2;\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  ///GET OPTIONS SLIDER IMAGE WIDTH FROM MATERIAL UI GRID\r\n  useEffect(() => {\r\n    if (\r\n      getpreviewFixedWidthRef.current &&\r\n      getpreviewFixedWidthRef.current.clientWidth\r\n    ) {\r\n      setgetpreviewFixedWidth(getpreviewFixedWidthRef.current.clientWidth);\r\n    }\r\n\r\n    if (getCropHeightRef.current && getCropHeightRef.current.clientWidth) {\r\n      setgetCropHeight(getCropHeightRef.current.clientHeight * hdcanvasvalue);\r\n      setgetCropHeightRealImageRatio(getCropHeightRef.current.clientHeight);\r\n    }\r\n\r\n    if (\r\n      getFixedCropWidthRef.current &&\r\n      getFixedCropWidthRef.current.clientWidth\r\n    ) {\r\n      setgetFixedCropWidth(getFixedCropWidthRef.current.clientWidth);\r\n    }\r\n  }, []);\r\n  ///\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// HANDLE TOUCH START EVENT\r\n  const handleTouchStart = (e: any, type: any) => {\r\n    console.log(e.clientX);\r\n\r\n    if (type === 0) {\r\n      setcropInitial({\r\n        ...cropInitial,\r\n        x: e.clientX,\r\n        y: e.clientY,\r\n      });\r\n    } else {\r\n      setcropInitial({\r\n        ...cropInitial,\r\n        x: e.touches[0].clientX,\r\n        y: e.touches[0].clientY,\r\n      });\r\n    }\r\n    if (e.target) {\r\n      setDrag(true);\r\n    }\r\n  };\r\n\r\n  const handleTouchEnd = () => {\r\n    setcropInitial({\r\n      ...cropInitial,\r\n      x: crop.x,\r\n      y: crop.y,\r\n    });\r\n    setDrag(false);\r\n  };\r\n\r\n  const handleTouchDrag = (e: any, type: any) => {\r\n    if (Drag) {\r\n      if (type === 0) {\r\n        setcrop({\r\n          ...crop,\r\n          x: e.clientX - cropInitial.x,\r\n          y: e.clientY - cropInitial.y,\r\n        });\r\n      } else {\r\n        setcrop({\r\n          ...crop,\r\n          x: e.touches[0].clientX - cropInitial.x,\r\n          y: e.touches[0].clientY - cropInitial.y,\r\n        });\r\n      }\r\n\r\n      setcropOffset({\r\n        ...cropOffset,\r\n        x: crop.x,\r\n        y: crop.y,\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const Newcropimage = new Image();\r\n    Newcropimage.src = cropimage;\r\n    Newcropimage.onload = function () {\r\n      setCropImageHolder(Newcropimage);\r\n\r\n      var data1 = Newcropimage.naturalWidth;\r\n      var data2 = Newcropimage.naturalHeight;\r\n      setOriginalImageWidth(data1);\r\n      setOriginalImageHeight(data2);\r\n\r\n      setcropwidth(data1);\r\n      setcropheight(data2);\r\n    };\r\n  }, [cropimage]);\r\n\r\n  useEffect(() => {\r\n    if (CropImageHolder && cropCanvasRef.current) {\r\n      const ctx = cropCanvasRef.current.getContext(\"2d\");\r\n\r\n      var RatiofromOriginalandfixedHeight = OriginalImageHeight / getCropHeight;\r\n      var NewBoxRatioWidth_WIDEIMAGE =\r\n        OriginalImageWidth / RatiofromOriginalandfixedHeight;\r\n\r\n      setSourceWidthForCropX(NewBoxRatioWidth_WIDEIMAGE);\r\n\r\n      var RatiofromOriginalandfixedHeightx = OriginalImageWidth / getCropHeight;\r\n      var NewBoxRatioWidth_LONGIMAGE =\r\n        OriginalImageHeight / RatiofromOriginalandfixedHeightx;\r\n\r\n      setSourceWidthForCropY(NewBoxRatioWidth_LONGIMAGE);\r\n\r\n      var ratioh = (OriginalImageWidth * 3) / OriginalImageWidth;\r\n      var ratiow = (OriginalImageHeight * 3) / OriginalImageHeight;\r\n\r\n      if (BoxCropActivated) {\r\n        cropCanvasRef.current.width = getCropHeight;\r\n        cropCanvasRef.current.height = getCropHeight;\r\n      } else {\r\n        cropCanvasRef.current.width = OriginalImageWidth;\r\n        cropCanvasRef.current.height = OriginalImageHeight;\r\n      }\r\n\r\n      var centerpreview =\r\n        cropCanvasRef.current.width / 1.5 - NewBoxRatioWidth_LONGIMAGE / 1.5;\r\n\r\n      var xtraZoom = getCropHeight / NewBoxRatioWidth_WIDEIMAGE;\r\n\r\n      var centerCropCanvas =\r\n        cropCanvasRef.current.width / 2 - NewBoxRatioWidth_WIDEIMAGE / 2;\r\n\r\n      var RatiofromOriginalandfixedHeight =\r\n        OriginalImageHeight / getCropHeightRealImageRatio;\r\n      var newcropCSSWidth =\r\n        OriginalImageWidth / RatiofromOriginalandfixedHeight;\r\n\r\n      if (BoxCropActivated) {\r\n        var dragDistanceY = NewBoxRatioWidth_LONGIMAGE * zoom - getCropHeight;\r\n        var dragDistanceX = NewBoxRatioWidth_WIDEIMAGE * zoom - getCropHeight;\r\n\r\n        if (OriginalImageWidth > OriginalImageHeight) {\r\n          ctx.drawImage(\r\n            CropImageHolder,\r\n            0,\r\n            0,\r\n            OriginalImageWidth,\r\n            OriginalImageHeight,\r\n            crop.x,\r\n            0,\r\n            NewBoxRatioWidth_WIDEIMAGE * zoom,\r\n            getCropHeight * zoom\r\n          );\r\n        } else {\r\n          if (crop.y < -dragDistanceY) {\r\n            setcrop({ ...crop, y: -dragDistanceY });\r\n          } else if (crop.y > 0) {\r\n            setcrop({ ...crop, y: 0 });\r\n          } else {\r\n          }\r\n\r\n          ctx.drawImage(\r\n            CropImageHolder,\r\n            0,\r\n            crop.y,\r\n            getCropHeight * zoom,\r\n            NewBoxRatioWidth_LONGIMAGE * zoom\r\n          );\r\n        }\r\n\r\n        cropCanvasRef.current.style.width = `${\r\n          getCropHeight / hdcanvasvalue\r\n        }px`;\r\n        cropCanvasRef.current.style.height = `${\r\n          getCropHeight / hdcanvasvalue\r\n        }px`;\r\n      } else {\r\n        ctx.drawImage(\r\n          CropImageHolder,\r\n          0,\r\n          0,\r\n          OriginalImageWidth * zoom,\r\n          OriginalImageHeight * zoom\r\n        );\r\n\r\n        cropCanvasRef.current.style.width = `${newcropCSSWidth}px`;\r\n        cropCanvasRef.current.style.height = `${getCropHeightRealImageRatio}px`;\r\n      }\r\n    }\r\n  }, [\r\n    CropImageHolder,\r\n    cropCanvasRef,\r\n    OriginalImageWidth,\r\n    OriginalImageHeight,\r\n    crop.x,\r\n    crop.y,\r\n  ]);\r\n  const gg = () => {};\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        ref={getCropHeightRef}\r\n        style={{\r\n          position: \"relative\",\r\n          width: \"100%\",\r\n          height: \"70%\",\r\n        }}\r\n      >\r\n        <Grid item xs={12}>\r\n          <Grid item ref={getFixedCropWidthRef} xs={4}></Grid>\r\n        </Grid>\r\n\r\n        <canvas\r\n          onMouseDown={(e: any) => {\r\n            handleTouchStart(e, 0);\r\n          }}\r\n          onTouchStart={(e: any) => {\r\n            handleTouchStart(e, 1);\r\n          }}\r\n          onMouseMove={(e: any) => {\r\n            handleTouchDrag(e, 0);\r\n          }}\r\n          onTouchMove={(e: any) => {\r\n            handleTouchDrag(e, 1);\r\n          }}\r\n          onDragEnd={handleTouchEnd}\r\n          onTouchEnd={handleTouchEnd}\r\n          className={\r\n            darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\"\r\n          }\r\n          ref={cropCanvasRef}\r\n          key={cropimage}\r\n          style={{\r\n            padding: \"0px\",\r\n            backgroundColor: \"#00ccff\",\r\n            margin: \"auto\",\r\n          }}\r\n        />\r\n      </Grid>\r\n\r\n      <Grid\r\n        item\r\n        xs={12}\r\n        style={{\r\n          padding: \"0px\",\r\n          backgroundColor: \"#00ccff\",\r\n        }}\r\n      >\r\n        <Grid\r\n          item\r\n          ref={getpreviewFixedWidthRef}\r\n          xs={5}\r\n          style={{\r\n            padding: \"0px\",\r\n          }}\r\n        ></Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport const SuperCrop = React.memo(SuperCropx);\r\n"]},"metadata":{},"sourceType":"module"}