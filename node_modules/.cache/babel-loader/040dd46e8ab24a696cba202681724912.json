{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oghen\\\\OneDrive\\\\Documents\\\\ClikBate\\\\super\\\\src\\\\profile\\\\TaskbarText.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useLayoutEffect } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction TaskbarTextx({\n  ShowText,\n  setShowText,\n  activeItem,\n  setactiveItem,\n  MainImageFiltersRef\n}) {\n  _s();\n\n  const cropCanvasRef = useRef(null);\n  const canvasRefdummy = useRef(null); ///\n  ///\n  ///\n  /// INTERFACE/TYPES FOR SCREENHEIGHT AND DARKMODE\n\n  ///\n  ///\n  ///\n  /// GET DARKMODE FROM REDUX STORE\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const [CropImageHolder, setCropImageHolder] = useState(null);\n  const [Dimension, setDimension] = useState(260);\n  const [imageHeight, setimageHeight] = useState(1300);\n  const [imageWidth, setimageWidth] = useState(1300);\n  useLayoutEffect(() => {\n    const ctx = cropCanvasRef.current.getContext(\"2d\");\n    ctx.clearRect(0, 0, cropCanvasRef.current.width, cropCanvasRef.current.height);\n    const Newcropimage = new Image();\n    Newcropimage.src = MainImageFiltersRef.current[activeItem].src;\n\n    Newcropimage.onload = function () {\n      if (CropImageHolder === Newcropimage) {} else {\n        //////////////\n        setCropImageHolder(Newcropimage);\n        let newWidth = Dimension;\n        let newHeight = Dimension;\n        const aspectRatio = Newcropimage.naturalWidth / Newcropimage.naturalHeight;\n\n        if (newWidth / newHeight > aspectRatio) {\n          newWidth = newHeight * aspectRatio;\n        } else {\n          newHeight = newWidth / aspectRatio;\n        }\n\n        setimageHeight(newHeight);\n        setimageWidth(newWidth); ///GiveImageSpecificDimensions(Newcropimage);\n      }\n    };\n  }, [MainImageFiltersRef, Dimension]);\n\n  /*#__PURE__*/\n  _jsxDEV(\"canvas\", {\n    ref: cropCanvasRef,\n    style: {\n      padding: \"0px\",\n      margin: \"auto\",\n      cursor: \"pointer\",\n      overflow: 'hidden',\n      position: 'fixed',\n      top: \"-400%\",\n      zIndex: 0,\n      visibility: \"hidden\",\n      width: '30%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        style: {\n          height: '200vh',\n          width: '100%',\n          position: 'fixed',\n          top: '0vh',\n          zIndex: 2000,\n          backgroundColor: darkmodeReducer ? \"rgb(2,2,2,0.5)\" : \"rgb(255,255,255,0.5)\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(TaskbarTextx, \"vRjKUcfpQ0ud2WdTBvS3Cj3RjII=\", false, function () {\n  return [useSelector];\n});\n\n_c = TaskbarTextx;\nexport const TaskbarText = /*#__PURE__*/React.memo(TaskbarTextx);\n_c2 = TaskbarText;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TaskbarTextx\");\n$RefreshReg$(_c2, \"TaskbarText\");","map":{"version":3,"sources":["C:/Users/oghen/OneDrive/Documents/ClikBate/super/src/profile/TaskbarText.tsx"],"names":["React","useRef","useState","useLayoutEffect","Grid","useSelector","TaskbarTextx","ShowText","setShowText","activeItem","setactiveItem","MainImageFiltersRef","cropCanvasRef","canvasRefdummy","darkmode","state","GlobalReducer","darkmodeReducer","CropImageHolder","setCropImageHolder","Dimension","setDimension","imageHeight","setimageHeight","imageWidth","setimageWidth","ctx","current","getContext","clearRect","width","height","Newcropimage","Image","src","onload","newWidth","newHeight","aspectRatio","naturalWidth","naturalHeight","padding","margin","cursor","overflow","position","top","zIndex","visibility","backgroundColor","TaskbarText","memo"],"mappings":"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","sourcesContent":["import React, {\r\n    useRef,\r\n    useEffect,\r\n    useCallback,\r\n    useState,\r\n    useLayoutEffect,\r\n} from \"react\";\r\nimport ControlPointDuplicateIcon from \"@mui/icons-material/ControlPointDuplicate\";\r\nimport { Grid, Switch, DialogContent } from \"@material-ui/core\";\r\nimport { matchPc, matchTablet, matchMobile } from \"../DetectDevice\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport { OptionsSlider } from \"../profile/OptionsSlider\";\r\nimport { RootStateOrAny, useSelector, useDispatch } from \"react-redux\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport Axios from \"axios\";\r\nimport CheckIcon from \"@mui/icons-material/Check\";\r\nimport date from \"date-and-time\";\r\nimport { UserInfoUpdatePROFILE } from \"../log/actions/UserdataAction\";\r\nimport { UserInfoUpdateBILLBOARD } from \"../log/actions/UserdataAction\";\r\nimport { usePalette } from \"react-palette\";\r\nimport { UpdateColorAction } from \"../GlobalActions\";\r\nimport EditTwoToneIcon from \"@mui/icons-material/EditTwoTone\";\r\nimport DoneOutlineIcon from '@mui/icons-material/DoneOutline';\r\nimport { UpdateUploadData } from \"../GlobalActions\";\r\nimport DoneIcon from '@mui/icons-material/Done';\r\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport CropIcon from '@mui/icons-material/Crop';\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport { TaskbarCrop } from \"./TaskbarCrop\";\r\nimport set from \"date-fns/set/index.js\";\r\nimport TitleIcon from '@mui/icons-material/Title';\r\nimport TouchAppIcon from '@mui/icons-material/TouchApp';\r\nimport InsertPhotoIcon from '@material-ui/icons/InsertPhoto';\r\nimport RestoreIcon from '@material-ui/icons/Restore';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction TaskbarTextx({ ShowText, setShowText, activeItem, setactiveItem, MainImageFiltersRef }: any): JSX.Element {\r\n\r\n\r\n\r\n\r\n\r\n    const cropCanvasRef: any = useRef(null);\r\n\r\n    const canvasRefdummy: any = useRef(null);\r\n\r\n\r\n\r\n    ///\r\n    ///\r\n    ///\r\n    /// INTERFACE/TYPES FOR SCREENHEIGHT AND DARKMODE\r\n    interface RootStateGlobalReducer {\r\n        GlobalReducer: {\r\n            darkmode: boolean;\r\n            screenHeight: number;\r\n        };\r\n    }\r\n\r\n    ///\r\n    ///\r\n    ///\r\n    /// GET DARKMODE FROM REDUX STORE\r\n    const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n        ...state.GlobalReducer,\r\n    }));\r\n    const darkmodeReducer = darkmode;\r\n\r\n\r\n    const [CropImageHolder, setCropImageHolder] = useState<any>(null);\r\n\r\n\r\n    const [Dimension, setDimension] = useState<any>(260);\r\n\r\n    const [imageHeight, setimageHeight] = useState(1300);\r\n    const [imageWidth, setimageWidth] = useState(1300);\r\n\r\n\r\n\r\n\r\n    useLayoutEffect(() => {\r\n\r\n        const ctx = cropCanvasRef.current.getContext(\"2d\");\r\n        ctx.clearRect(0, 0, cropCanvasRef.current.width, cropCanvasRef.current.height);\r\n\r\n        const Newcropimage: any = new Image();\r\n        Newcropimage.src = MainImageFiltersRef.current[activeItem].src;\r\n        Newcropimage.onload = function () {\r\n            if (CropImageHolder === Newcropimage) {\r\n\r\n            } else {\r\n\r\n                //////////////\r\n                setCropImageHolder(Newcropimage);\r\n\r\n                let newWidth = Dimension;\r\n                let newHeight = Dimension;\r\n                const aspectRatio = Newcropimage.naturalWidth / Newcropimage.naturalHeight;\r\n\r\n                if (newWidth / newHeight > aspectRatio) {\r\n                    newWidth = newHeight * aspectRatio;\r\n                } else {\r\n                    newHeight = newWidth / aspectRatio;\r\n                }\r\n\r\n\r\n                setimageHeight(newHeight);\r\n                setimageWidth(newWidth);\r\n                ///GiveImageSpecificDimensions(Newcropimage);\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n        }\r\n    }, [MainImageFiltersRef, Dimension]);\r\n\r\n\r\n\r\n    <canvas\r\n        ref={cropCanvasRef}\r\n        style={{\r\n            padding: \"0px\",\r\n            margin: \"auto\",\r\n            cursor: \"pointer\",\r\n            overflow: 'hidden',\r\n            position: 'fixed',\r\n            top: \"-400%\",\r\n            zIndex: 0,\r\n            visibility: \"hidden\",\r\n            width: '30%'\r\n\r\n        }} />\r\n\r\n\r\n    return (\r\n        <>\r\n            <Grid container>\r\n\r\n                <Grid item xs={12} style={{\r\n                    height: '200vh', width: '100%', position: 'fixed', top: '0vh', zIndex: 2000, backgroundColor: darkmodeReducer\r\n                        ? \"rgb(2,2,2,0.5)\"\r\n                        : \"rgb(255,255,255,0.5)\"\r\n                }}>\r\n\r\n\r\n\r\n                </Grid>\r\n\r\n\r\n            </Grid>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport const TaskbarText = React.memo(TaskbarTextx);\r\n"]},"metadata":{},"sourceType":"module"}