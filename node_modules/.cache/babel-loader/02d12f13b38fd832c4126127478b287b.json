{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\profile\\\\OptionsSlider.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { matchPc } from \"../DetectDevice\";\nimport { useSpring, animated } from \"react-spring\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction OptionsSliderx({\n  getSliderWidth\n}) {\n  _s();\n\n  var getSliderWidthNew = matchPc ? getSliderWidth / 1.53 : getSliderWidth / 0.8;\n  const optionsCollectImageRef = useRef(null);\n  const optionsImages = [\"1.jpg\", \"2.jpg\", \"3.jpg\", \"4.jpg\", \"5.jpg\"];\n  const [translate, setTranslate] = useState(0);\n  const [stalestate, setstalestate] = useState(1);\n  const [ActiveSlide, setActiveSlide] = useState(0);\n  var optionsNameData = [\"filter feeds\", \"albums\", \"playlist\", \"showroom\", \"posts  today\", \"settings\"]; ///\n  ///CREATE A SLIDE UP ANIMATION WITH  REACT SPRING\n\n  const modalanimation = useSpring({\n    config: {\n      duration: 300\n    },\n    transform: `translateX(-${translate}px)`,\n    transition: \"0.45s\",\n    height: \"auto\",\n    display: \"flex\",\n    width: `auto`,\n    margin: \"auto\"\n  }); ///\n  ///\n  ///\n  /// PROVIDES DYNAMIC HEIGHT FOR SLIDER CONTENT FROM IMAGE\n\n  const clickOptions = (i, type) => {\n    if (type === 1) {\n      setTranslate(stalestate + i);\n      setActiveSlide(i);\n    } else {\n      setTranslate(getSliderWidthNew * i + 1.5 * i);\n      setActiveSlide(i);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      style: {\n        position: \"relative\",\n        margin: \"0 auto\",\n        overflow: \"hidden\",\n        left: \"0px\",\n        paddingBottom: \"19px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(animated.div, {\n        ref: optionsCollectImageRef,\n        style: modalanimation,\n        children: optionsImages.map((im, i) => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              onClick: () => {\n                clickOptions(i, 1);\n              },\n              className: \"turprofileLight\",\n              style: {\n                width: `${getSliderWidthNew}px`,\n                height: `${getSliderWidthNew}px`,\n                borderRadius: \"50%\",\n                padding: \"2px\",\n                objectFit: \"cover\",\n                marginLeft: \"2px\",\n                marginTop: \"14px\",\n                boxShadow: \"0 0 3px blue\",\n                marginBottom: \"2.2px\"\n              },\n              src: `./images/options/${im}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              style: {\n                margin: \"auto\",\n                textAlign: \"center\",\n                position: \"relative\",\n                bottom: \"0.2em\"\n              },\n              children: /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                style: {\n                  fontSize: \"0.9vw\",\n                  fontWeight: \"bolder\",\n                  fontFamily: \"Arial, Helvetica, sans-serif\",\n                  display: ActiveSlide === i ? \"block\" : \"none\"\n                },\n                children: [\" \", optionsNameData[i]]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this)\n        }, void 0, false))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true);\n}\n\n_s(OptionsSliderx, \"Z9cAbXoHSfH/WMBAEioe4DHOtUQ=\", false, function () {\n  return [useSpring];\n});\n\n_c = OptionsSliderx;\nexport const OptionsSlider = /*#__PURE__*/React.memo(OptionsSliderx);\n_c2 = OptionsSlider;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"OptionsSliderx\");\n$RefreshReg$(_c2, \"OptionsSlider\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/profile/OptionsSlider.tsx"],"names":["React","useRef","useState","Grid","matchPc","useSpring","animated","OptionsSliderx","getSliderWidth","getSliderWidthNew","optionsCollectImageRef","optionsImages","translate","setTranslate","stalestate","setstalestate","ActiveSlide","setActiveSlide","optionsNameData","modalanimation","config","duration","transform","transition","height","display","width","margin","clickOptions","i","type","position","overflow","left","paddingBottom","map","im","borderRadius","padding","objectFit","marginLeft","marginTop","boxShadow","marginBottom","textAlign","bottom","fontSize","fontWeight","fontFamily","OptionsSlider","memo"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from \"react\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { useSpring, animated } from \"react-spring\";\r\n\r\nfunction OptionsSliderx({ getSliderWidth }: any) {\r\n  var getSliderWidthNew = matchPc\r\n    ? getSliderWidth / 1.53\r\n    : getSliderWidth / 0.8;\r\n\r\n  const optionsCollectImageRef = useRef<HTMLDivElement>(null);\r\n  const optionsImages = [\"1.jpg\", \"2.jpg\", \"3.jpg\", \"4.jpg\", \"5.jpg\"];\r\n  const [translate, setTranslate] = useState(0);\r\n  const [stalestate, setstalestate] = useState(1);\r\n\r\n  const [ActiveSlide, setActiveSlide] = useState(0);\r\n\r\n  var optionsNameData = [\r\n    \"filter feeds\",\r\n    \"albums\",\r\n    \"playlist\",\r\n    \"showroom\",\r\n    \"posts  today\",\r\n    \"settings\",\r\n  ];\r\n\r\n  ///\r\n  ///CREATE A SLIDE UP ANIMATION WITH  REACT SPRING\r\n  const modalanimation = useSpring({\r\n    config: {\r\n      duration: 300,\r\n    },\r\n    transform: `translateX(-${translate}px)`,\r\n    transition: \"0.45s\",\r\n    height: \"auto\",\r\n    display: \"flex\",\r\n    width: `auto`,\r\n\r\n    margin: \"auto\",\r\n  });\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// PROVIDES DYNAMIC HEIGHT FOR SLIDER CONTENT FROM IMAGE\r\n  const clickOptions = (i: number, type: number) => {\r\n    if (type === 1) {\r\n      setTranslate(stalestate + i);\r\n      setActiveSlide(i);\r\n    } else {\r\n      setTranslate(getSliderWidthNew * i + 1.5 * i);\r\n      setActiveSlide(i);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        style={{\r\n          position: \"relative\",\r\n          margin: \"0 auto\",\r\n          overflow: \"hidden\",\r\n          left: \"0px\",\r\n          paddingBottom: \"19px\",\r\n        }}\r\n      >\r\n        <animated.div ref={optionsCollectImageRef} style={modalanimation}>\r\n          {optionsImages.map((im: any, i: any) => (\r\n            <>\r\n              <Grid item xs={12}>\r\n                <img\r\n                  onClick={() => {\r\n                    clickOptions(i, 1);\r\n                  }}\r\n                  className=\"turprofileLight\"\r\n                  style={{\r\n                    width: `${getSliderWidthNew}px`,\r\n                    height: `${getSliderWidthNew}px`,\r\n                    borderRadius: \"50%\",\r\n                    padding: \"2px\",\r\n                    objectFit: \"cover\",\r\n                    marginLeft: \"2px\",\r\n                    marginTop: \"14px\",\r\n                    boxShadow: \"0 0 3px blue\",\r\n                    marginBottom: \"2.2px\",\r\n                  }}\r\n                  src={`./images/options/${im}`}\r\n                />\r\n\r\n                <Grid\r\n                  item\r\n                  xs={12}\r\n                  style={{\r\n                    margin: \"auto\",\r\n                    textAlign: \"center\",\r\n                    position: \"relative\",\r\n                    bottom: \"0.2em\",\r\n                  }}\r\n                >\r\n                  <Grid\r\n                    item\r\n                    xs={12}\r\n                    style={{\r\n                      fontSize: \"0.9vw\",\r\n                      fontWeight: \"bolder\",\r\n                      fontFamily: \"Arial, Helvetica, sans-serif\",\r\n                      display: ActiveSlide === i ? \"block\" : \"none\",\r\n                    }}\r\n                  >\r\n                    {\" \"}\r\n                    {optionsNameData[i]}\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </>\r\n          ))}\r\n        </animated.div>\r\n      </Grid>{\" \"}\r\n    </>\r\n  );\r\n}\r\n\r\nexport const OptionsSlider = React.memo(OptionsSliderx);\r\n"]},"metadata":{},"sourceType":"module"}