{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\upload\\\\ImageTobeFiltered.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ImageTobeFilteredx({\n  filterImage,\n  index,\n  itemUploadRef,\n  setActivatefilterImage\n}) {\n  _s();\n\n  ///\n  ///\n  ///\n  const filterbaseimageRef = useRef(null);\n  const canvasRef = useRef(null);\n  const canvasRefdummy = useRef(null);\n  const [activefilter, setactivefilter] = useState(0);\n\n  const closegate = () => {\n    if (index === 0) {\n      ////\n      addfilter();\n    } else {\n      setActivatefilterImage(false);\n    }\n  };\n\n  function toasterGradient(width, height) {\n    ////////////gradientcolor\n    var ctx = canvasRefdummy.current.getContext(\"2d\");\n    canvasRefdummy.current.height = height;\n    canvasRefdummy.current.width = width; // Fill a Radial Gradient\n    // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createRadialGradient\n\n    var gradient = ctx.createRadialGradient(width / 2, height / 2, 0, width / 2, height / 2, width * 0.6);\n    gradient.addColorStop(0, \"#804e0f\");\n    gradient.addColorStop(1, \"#3b003b\"); ////ctx.fillStyle = gradient;\n\n    ctx.fillRect(0, 0, width, height); ////////////gradientcolor\n\n    return ctx;\n  }\n\n  function blend(background, foreground, width, height, transform) {\n    // Side note: grabbing this data is the most expensive piece. For better\n    // performance, you could consider caching this data\n    var bottom = background.getImageData(0, 0, width, height);\n    var top = foreground.getImageData(0, 0, width, height);\n\n    for (var i = 0, size = top.data.length; i < size; i += 4) {\n      // red\n      top.data[i + 0] = transform(bottom.data[i + 0], top.data[i + 0]); // green\n\n      top.data[i + 1] = transform(bottom.data[i + 1], top.data[i + 1]); // blue\n\n      top.data[i + 2] = transform(bottom.data[i + 2], top.data[i + 2]); // the fourth slot is alpha. We don't need that (so skip by 4)\n    }\n\n    return top;\n  }\n\n  const addfilter = () => {\n    if (activefilter === 1) {}\n\n    if (index === 0) {\n      const previewFileReadimage = new Image();\n      previewFileReadimage.src = itemUploadRef.current[index].src;\n\n      previewFileReadimage.onload = function () {\n        const ctx = canvasRef.current.getContext(\"2d\");\n        var width = window.innerWidth / 2;\n        var scale = width / previewFileReadimage.naturalWidth;\n        var height = previewFileReadimage.naturalHeight * scale;\n        canvasRef.current.height = height;\n        canvasRef.current.width = width; ////////////////////\n\n        requestAnimationFrame(() => {\n          ctx.filter = \"contrast(1.8)\";\n          ctx.filter = \"brightness(10%)\";\n          ctx.drawImage(previewFileReadimage, 0, 0, canvasRef.current.width, canvasRef.current.height); ////////////vignette\n\n          var w = canvasRef.current.width;\n          var h = canvasRef.current.height;\n          var gradient = ctx.createRadialGradient(w / 2, h / 2, 0, w / 2, h / 2, w * 0.6); ///gradient.addColorStop(0, \"rgb(255,255,225,0)\");\n          ///gradient.addColorStop(1, \"rgb(000,000,000,0.5)\");\n          ///ctx.fillStyle = gradient;\n          ///ctx.fillRect(0, 0, width, height);\n          ////////////vignette\n          ////////////composition\n          ///ctx.globalCompositeOperation = \"lighter\";\n          ////ctx.fillStyle = \"red\";\n          ///ctx.fillRect(0, 0, width, height);\n          ////////////composition\n\n          var gradient = toasterGradient(width, height);\n          var screen = blend(ctx, gradient, width, height, function (bottomPixel, topPixel) {\n            return 255 - (255 - topPixel) * (255 - bottomPixel) / 255;\n          }); // replace `ctx.drawImage(gradient.canvas, 0, 0)` with this:\n\n          ctx.putImageData(screen, 0, 0);\n        });\n      }; ////////////////////\n      ////\n\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: itemUploadRef.current[index] ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \" love \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        id: itemUploadRef.current[index],\n        ref: filterbaseimageRef,\n        onClick: closegate,\n        src: itemUploadRef.current ? itemUploadRef.current[index].src : null,\n        style: {\n          width: \"30%\",\n          height: \"auto\",\n          position: \"relative\",\n          margin: \"auto\",\n          marginRight: index === 0 ? \"20px\" : \"0px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        style: {\n          padding: \"0px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRefdummy,\n        style: {\n          padding: \"0px\",\n          display: \"none\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : null\n  }, void 0, false);\n}\n\n_s(ImageTobeFilteredx, \"oyoXX/HD7YpXutDnfo/IikRf2/Q=\");\n\n_c = ImageTobeFilteredx;\nexport const ImageTobeFiltered = /*#__PURE__*/React.memo(ImageTobeFilteredx);\n_c2 = ImageTobeFiltered;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ImageTobeFilteredx\");\n$RefreshReg$(_c2, \"ImageTobeFiltered\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/upload/ImageTobeFiltered.tsx"],"names":["React","useRef","useState","ImageTobeFilteredx","filterImage","index","itemUploadRef","setActivatefilterImage","filterbaseimageRef","canvasRef","canvasRefdummy","activefilter","setactivefilter","closegate","addfilter","toasterGradient","width","height","ctx","current","getContext","gradient","createRadialGradient","addColorStop","fillRect","blend","background","foreground","transform","bottom","getImageData","top","i","size","data","length","previewFileReadimage","Image","src","onload","window","innerWidth","scale","naturalWidth","naturalHeight","requestAnimationFrame","filter","drawImage","w","h","screen","bottomPixel","topPixel","putImageData","position","margin","marginRight","padding","display","ImageTobeFiltered","memo"],"mappings":"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","sourcesContent":["import React, {\r\n  useRef,\r\n  useState,\r\n  useCallback,\r\n  useEffect,\r\n  useLayoutEffect,\r\n} from \"react\";\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport { SuperCrop } from \"./SuperCrop\";\r\nimport MusicNoteIcon from \"@mui/icons-material/MusicNote\";\r\nimport PhotoIcon from \"@mui/icons-material/Photo\";\r\nimport GifIcon from \"@mui/icons-material/Gif\";\r\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\r\nimport Axios from \"axios\";\r\nimport CropIcon from \"@mui/icons-material/Crop\";\r\nimport CheckIcon from \"@mui/icons-material/Check\";\r\nimport { PreviewCanvasCropAll } from \"./PreviewCanvasCropAll\";\r\nimport { PreviewCanvas } from \"./PreviewCanvas\";\r\n\r\nfunction ImageTobeFilteredx({\r\n  filterImage,\r\n  index,\r\n  itemUploadRef,\r\n  setActivatefilterImage,\r\n}: any): JSX.Element {\r\n  ///\r\n  ///\r\n  ///\r\n  const filterbaseimageRef: any = useRef(null);\r\n\r\n  const canvasRef: any = useRef(null);\r\n\r\n  const canvasRefdummy: any = useRef(null);\r\n\r\n  const [activefilter, setactivefilter] = useState<number>(0);\r\n\r\n  const closegate = () => {\r\n    if (index === 0) {\r\n      ////\r\n      addfilter();\r\n    } else {\r\n      setActivatefilterImage(false);\r\n    }\r\n  };\r\n\r\n  function toasterGradient(width: any, height: any) {\r\n    ////////////gradientcolor\r\n    var ctx = canvasRefdummy.current.getContext(\"2d\");\r\n\r\n    canvasRefdummy.current.height = height;\r\n    canvasRefdummy.current.width = width;\r\n\r\n    // Fill a Radial Gradient\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createRadialGradient\r\n\r\n    var gradient = ctx.createRadialGradient(\r\n      width / 2,\r\n      height / 2,\r\n      0,\r\n      width / 2,\r\n      height / 2,\r\n      width * 0.6\r\n    );\r\n\r\n    gradient.addColorStop(0, \"#804e0f\");\r\n    gradient.addColorStop(1, \"#3b003b\");\r\n\r\n    ////ctx.fillStyle = gradient;\r\n    ctx.fillRect(0, 0, width, height);\r\n    ////////////gradientcolor\r\n    return ctx;\r\n  }\r\n\r\n  function blend(\r\n    background: any,\r\n    foreground: any,\r\n    width: any,\r\n    height: any,\r\n    transform: any\r\n  ) {\r\n    // Side note: grabbing this data is the most expensive piece. For better\r\n    // performance, you could consider caching this data\r\n    var bottom = background.getImageData(0, 0, width, height);\r\n    var top = foreground.getImageData(0, 0, width, height);\r\n\r\n    for (var i = 0, size = top.data.length; i < size; i += 4) {\r\n      // red\r\n      top.data[i + 0] = transform(bottom.data[i + 0], top.data[i + 0]);\r\n      // green\r\n      top.data[i + 1] = transform(bottom.data[i + 1], top.data[i + 1]);\r\n      // blue\r\n      top.data[i + 2] = transform(bottom.data[i + 2], top.data[i + 2]);\r\n      // the fourth slot is alpha. We don't need that (so skip by 4)\r\n    }\r\n\r\n    return top;\r\n  }\r\n\r\n  const addfilter = () => {\r\n    if (activefilter === 1) {\r\n    }\r\n    if (index === 0) {\r\n      const previewFileReadimage = new Image();\r\n      previewFileReadimage.src = itemUploadRef.current[index].src;\r\n      previewFileReadimage.onload = function () {\r\n        const ctx = canvasRef.current.getContext(\"2d\");\r\n\r\n        var width = window.innerWidth / 2;\r\n        var scale = width / previewFileReadimage.naturalWidth;\r\n        var height = previewFileReadimage.naturalHeight * scale;\r\n\r\n        canvasRef.current.height = height;\r\n        canvasRef.current.width = width;\r\n\r\n        ////////////////////\r\n\r\n        requestAnimationFrame(() => {\r\n          ctx.filter = \"contrast(1.8)\";\r\n          ctx.filter = \"brightness(10%)\";\r\n          ctx.drawImage(\r\n            previewFileReadimage,\r\n            0,\r\n            0,\r\n            canvasRef.current.width,\r\n            canvasRef.current.height\r\n          );\r\n          ////////////vignette\r\n          var w = canvasRef.current.width;\r\n          var h = canvasRef.current.height;\r\n\r\n          var gradient = ctx.createRadialGradient(\r\n            w / 2,\r\n            h / 2,\r\n            0,\r\n            w / 2,\r\n            h / 2,\r\n            w * 0.6\r\n          );\r\n\r\n          ///gradient.addColorStop(0, \"rgb(255,255,225,0)\");\r\n          ///gradient.addColorStop(1, \"rgb(000,000,000,0.5)\");\r\n\r\n          ///ctx.fillStyle = gradient;\r\n          ///ctx.fillRect(0, 0, width, height);\r\n          ////////////vignette\r\n\r\n          ////////////composition\r\n          ///ctx.globalCompositeOperation = \"lighter\";\r\n          ////ctx.fillStyle = \"red\";\r\n          ///ctx.fillRect(0, 0, width, height);\r\n          ////////////composition\r\n\r\n          var gradient = toasterGradient(width, height);\r\n\r\n          var screen = blend(\r\n            ctx,\r\n            gradient,\r\n            width,\r\n            height,\r\n            function (bottomPixel: any, topPixel: any) {\r\n              return 255 - ((255 - topPixel) * (255 - bottomPixel)) / 255;\r\n            }\r\n          );\r\n\r\n          // replace `ctx.drawImage(gradient.canvas, 0, 0)` with this:\r\n          ctx.putImageData(screen, 0, 0);\r\n        });\r\n      };\r\n\r\n      ////////////////////\r\n      ////\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {itemUploadRef.current[index] ? (\r\n        <>\r\n          {\" \"}\r\n          <button> love </button>\r\n          <img\r\n            id={itemUploadRef.current[index]}\r\n            ref={filterbaseimageRef}\r\n            onClick={closegate}\r\n            src={\r\n              itemUploadRef.current ? itemUploadRef.current[index].src : null\r\n            }\r\n            style={{\r\n              width: \"30%\",\r\n              height: \"auto\",\r\n              position: \"relative\",\r\n              margin: \"auto\",\r\n              marginRight: index === 0 ? \"20px\" : \"0px\",\r\n            }}\r\n          />\r\n          <canvas\r\n            ref={canvasRef}\r\n            style={{\r\n              padding: \"0px\",\r\n            }}\r\n          />\r\n          <canvas\r\n            ref={canvasRefdummy}\r\n            style={{\r\n              padding: \"0px\",\r\n              display: \"none\",\r\n            }}\r\n          />\r\n        </>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport const ImageTobeFiltered = React.memo(ImageTobeFilteredx);\r\n"]},"metadata":{},"sourceType":"module"}