{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oghen\\\\OneDrive\\\\Documents\\\\ClikBate\\\\super\\\\src\\\\profile\\\\TaskbarSuperphoto.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useLayoutEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport Masonry from \"@mui/lab/Masonry\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction TaskbarSuperphotox({\n  finalImage\n}) {\n  _s();\n\n  const dispatch = useDispatch();\n  const [CropImageHolder, setCropImageHolder] = useState(null);\n  useLayoutEffect(() => {\n    const Newcropimage = new Image();\n    Newcropimage.src = finalImage[0];\n\n    Newcropimage.onload = function () {\n      if (CropImageHolder === Newcropimage) {} else {\n        //////////////\n        setCropImageHolder(Newcropimage); ///GiveImageSpecificDimensions(Newcropimage);\n      }\n    };\n  }, [finalImage[0]]);\n  useLayoutEffect(() => {\n    if (CropImageHolder && cropCanvasRef.current) {\n      const ctx = cropCanvasRef.current.getContext(\"2d\");\n      cropCanvasRef.current.width = imageWidth;\n      cropCanvasRef.current.height = imageHeight; ////////////////////////////////\n\n      const w = CropImageHolder.naturalWidth;\n      const h = CropImageHolder.naturalHeight;\n      requestAnimationFrame(() => {\n        ctx.drawImage(CropImageHolder, 0, 0, w, h);\n      });\n    }\n  }, [CropImageHolder, imageWidth, imageHeight, Box, crop, cropx, zoom, final, cropCanvasRef]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [finalImage.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Masonry, {\n        columns: 3,\n        spacing: 0,\n        style: {\n          padding: \"0px\",\n          height: '88vh',\n          overflow: 'hidden'\n        },\n        children: finalImage.map((picture, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n          style: {\n            cursor: 'pointer'\n          },\n          src: picture,\n          alt: `Image ${index}`\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 40\n      }, this)\n    }, void 0, false) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        marginLeft: '20vh',\n        cursor: 'pointer'\n      },\n      children: \"Zoidberg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(TaskbarSuperphotox, \"TBjvt5X1ELTplxPWQNc/jADZEwI=\", false, function () {\n  return [useDispatch];\n});\n\n_c = TaskbarSuperphotox;\nexport const TaskbarSuperphoto = /*#__PURE__*/React.memo(TaskbarSuperphotox);\n_c2 = TaskbarSuperphoto;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TaskbarSuperphotox\");\n$RefreshReg$(_c2, \"TaskbarSuperphoto\");","map":{"version":3,"sources":["C:/Users/oghen/OneDrive/Documents/ClikBate/super/src/profile/TaskbarSuperphoto.tsx"],"names":["React","useState","useLayoutEffect","useDispatch","Masonry","TaskbarSuperphotox","finalImage","dispatch","CropImageHolder","setCropImageHolder","Newcropimage","Image","src","onload","cropCanvasRef","current","ctx","getContext","width","imageWidth","height","imageHeight","w","naturalWidth","h","naturalHeight","requestAnimationFrame","drawImage","Box","crop","cropx","zoom","final","length","padding","overflow","map","picture","index","cursor","marginLeft","TaskbarSuperphoto","memo"],"mappings":";;;AAAA,OAAOA,KAAP,IAIIC,QAJJ,EAKIC,eALJ,QAMO,OANP;AAYA,SAAsCC,WAAtC,QAAyD,aAAzD;AACA,OAAOC,OAAP,MAAoB,kBAApB;;;;AAwBA,SAASC,kBAAT,CAA4B;AACxBC,EAAAA;AADwB,CAA5B,EACoC;AAAA;;AAChC,QAAMC,QAAQ,GAAGJ,WAAW,EAA5B;AAGA,QAAM,CAACK,eAAD,EAAkBC,kBAAlB,IAAwCR,QAAQ,CAAM,IAAN,CAAtD;AAEAC,EAAAA,eAAe,CAAC,MAAM;AAClB,UAAMQ,YAAiB,GAAG,IAAIC,KAAJ,EAA1B;AACAD,IAAAA,YAAY,CAACE,GAAb,GAAmBN,UAAU,CAAC,CAAD,CAA7B;;AACAI,IAAAA,YAAY,CAACG,MAAb,GAAsB,YAAY;AAC9B,UAAIL,eAAe,KAAKE,YAAxB,EAAsC,CACrC,CADD,MACO;AAEH;AACAD,QAAAA,kBAAkB,CAACC,YAAD,CAAlB,CAHG,CAIH;AACH;AAGJ,KAVD;AAWH,GAdc,EAcZ,CAACJ,UAAU,CAAC,CAAD,CAAX,CAdY,CAAf;AAwBAJ,EAAAA,eAAe,CAAC,MAAM;AAClB,QAAIM,eAAe,IAAIM,aAAa,CAACC,OAArC,EAA8C;AAG1C,YAAMC,GAAG,GAAGF,aAAa,CAACC,OAAd,CAAsBE,UAAtB,CAAiC,IAAjC,CAAZ;AAKAH,MAAAA,aAAa,CAACC,OAAd,CAAsBG,KAAtB,GAA8BC,UAA9B;AACAL,MAAAA,aAAa,CAACC,OAAd,CAAsBK,MAAtB,GAA+BC,WAA/B,CAT0C,CAa1C;;AAEA,YAAMC,CAAC,GAAGd,eAAe,CAACe,YAA1B;AACA,YAAMC,CAAC,GAAGhB,eAAe,CAACiB,aAA1B;AAKAC,MAAAA,qBAAqB,CAAC,MAAM;AAExBV,QAAAA,GAAG,CAACW,SAAJ,CAAcnB,eAAd,EAA+B,CAA/B,EAAkC,CAAlC,EAAqCc,CAArC,EAAwCE,CAAxC;AAGH,OALoB,CAArB;AAWH;AACJ,GAlCc,EAkCZ,CAAChB,eAAD,EAAkBW,UAAlB,EAA8BE,WAA9B,EAA2CO,GAA3C,EAAgDC,IAAhD,EAAsDC,KAAtD,EAA6DC,IAA7D,EAAmEC,KAAnE,EAA0ElB,aAA1E,CAlCY,CAAf;AA0CA,sBACI;AAAA,eACKR,UAAU,CAAC2B,MAAX,GAAoB,CAApB,gBAAwB;AAAA,6BAAE,QAAC,OAAD;AACvB,QAAA,OAAO,EAAE,CADc;AAEvB,QAAA,OAAO,EAAE,CAFc;AAGvB,QAAA,KAAK,EAAE;AACHC,UAAAA,OAAO,EAAE,KADN;AAEHd,UAAAA,MAAM,EAAE,MAFL;AAGHe,UAAAA,QAAQ,EAAE;AAHP,SAHgB;AAAA,kBAWtB7B,UAAU,CAAC8B,GAAX,CAAe,CAACC,OAAD,EAAeC,KAAf,kBAEZ;AAAiB,UAAA,KAAK,EAAE;AAAEC,YAAAA,MAAM,EAAE;AAAV,WAAxB;AAA+C,UAAA,GAAG,EAAEF,OAApD;AAA6D,UAAA,GAAG,EAAG,SAAQC,KAAM;AAAjF,WAAUA,KAAV;AAAA;AAAA;AAAA;AAAA,gBAFH;AAXsB;AAAA;AAAA;AAAA;AAAA;AAAF,qBAAxB,GAoBgB,IArBrB,eAyBI;AAAQ,MAAA,KAAK,EAAE;AAAEE,QAAAA,UAAU,EAAE,MAAd;AAAsBD,QAAAA,MAAM,EAAE;AAA9B,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAzBJ;AAAA,kBADJ;AA8BH;;GAvGQlC,kB;UAEYF,W;;;KAFZE,kB;AAyGT,OAAO,MAAMoC,iBAAiB,gBAAGzC,KAAK,CAAC0C,IAAN,CAAWrC,kBAAX,CAA1B;MAAMoC,iB","sourcesContent":["import React, {\r\n    useRef,\r\n    useEffect,\r\n    useCallback,\r\n    useState,\r\n    useLayoutEffect,\r\n} from \"react\";\r\nimport ControlPointDuplicateIcon from \"@mui/icons-material/ControlPointDuplicate\";\r\nimport { Grid, Switch, DialogContent } from \"@material-ui/core\";\r\nimport { matchPc, matchTablet, matchMobile } from \"../DetectDevice\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport { OptionsSlider } from \"../profile/OptionsSlider\";\r\nimport { RootStateOrAny, useSelector, useDispatch } from \"react-redux\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport Axios from \"axios\";\r\nimport CheckIcon from \"@mui/icons-material/Check\";\r\nimport date from \"date-and-time\";\r\nimport { UserInfoUpdatePROFILE } from \"../log/actions/UserdataAction\";\r\nimport { UserInfoUpdateBILLBOARD } from \"../log/actions/UserdataAction\";\r\nimport { usePalette } from \"react-palette\";\r\nimport { UpdateColorAction } from \"../GlobalActions\";\r\nimport EditTwoToneIcon from \"@mui/icons-material/EditTwoTone\";\r\nimport DoneOutlineIcon from '@mui/icons-material/DoneOutline';\r\nimport { UpdateUploadData } from \"../GlobalActions\";\r\nimport DoneIcon from '@mui/icons-material/Done';\r\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\r\n\r\nimport CropIcon from '@mui/icons-material/Crop';\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport { TaskbarCrop } from \"./TaskbarCrop\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction TaskbarSuperphotox({\r\n    finalImage }: any): JSX.Element {\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const [CropImageHolder, setCropImageHolder] = useState<any>(null);\r\n\r\n    useLayoutEffect(() => {\r\n        const Newcropimage: any = new Image();\r\n        Newcropimage.src = finalImage[0];\r\n        Newcropimage.onload = function () {\r\n            if (CropImageHolder === Newcropimage) {\r\n            } else {\r\n\r\n                //////////////\r\n                setCropImageHolder(Newcropimage);\r\n                ///GiveImageSpecificDimensions(Newcropimage);\r\n            }\r\n\r\n\r\n        }\r\n    }, [finalImage[0]]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    useLayoutEffect(() => {\r\n        if (CropImageHolder && cropCanvasRef.current) {\r\n\r\n\r\n            const ctx = cropCanvasRef.current.getContext(\"2d\");\r\n\r\n\r\n\r\n\r\n            cropCanvasRef.current.width = imageWidth;\r\n            cropCanvasRef.current.height = imageHeight;\r\n\r\n\r\n\r\n            ////////////////////////////////\r\n\r\n            const w = CropImageHolder.naturalWidth;\r\n            const h = CropImageHolder.naturalHeight;\r\n\r\n\r\n\r\n\r\n            requestAnimationFrame(() => {\r\n\r\n                ctx.drawImage(CropImageHolder, 0, 0, w, h);\r\n\r\n\r\n            });\r\n\r\n\r\n\r\n\r\n\r\n        }\r\n    }, [CropImageHolder, imageWidth, imageHeight, Box, crop, cropx, zoom, final, cropCanvasRef])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            {finalImage.length > 0 ? <><Masonry\r\n                columns={3}\r\n                spacing={0}\r\n                style={{\r\n                    padding: \"0px\",\r\n                    height: '88vh',\r\n                    overflow: 'hidden'\r\n                }}\r\n            >\r\n\r\n\r\n                {finalImage.map((picture: any, index: any) => (\r\n\r\n                    <img key={index} style={{ cursor: 'pointer' }} src={picture} alt={`Image ${index}`} />\r\n\r\n                ))}\r\n\r\n\r\n\r\n\r\n            </Masonry ></> : null\r\n            }\r\n\r\n\r\n            <button style={{ marginLeft: '20vh', cursor: 'pointer' }}>Zoidberg</button>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport const TaskbarSuperphoto = React.memo(TaskbarSuperphotox);\r\n"]},"metadata":{},"sourceType":"module"}