{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\log\\\\TextFieldLogin.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { IconButton, InputAdornment, TextField } from \"@material-ui/core\";\nimport VisibilityOffIcon from \"@material-ui/icons/VisibilityOff\";\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\nimport { DialogContent } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction TextFieldLoginx({\n  updateLoginvalues,\n  rawLoginValues,\n  ShowLoginPasswordForaWhile,\n  loginShowPassword,\n  size,\n  passwordType,\n  withHolder\n}) {\n  _s();\n\n  const [focusUsername, setFocusUsername] = useState(false);\n  var width = \" \";\n  var sizex = undefined;\n  var zindexU = 0;\n  var zindexBackPlateU = 0;\n  var displayBackPlateU = \"none\";\n\n  switch (size) {\n    case \"small\":\n      sizex = \"small\";\n      width = \"100%\";\n      var transform = \"scale(0.95)\";\n      var zIndex = 0;\n      var font1 = \"\";\n      var font2 = \"\";\n      var paddingbutU = \"69px\";\n      break;\n\n    case \"smallTablet\":\n      sizex = \"small\";\n      width = \"62%\";\n      var transform = \"scale(1)\";\n      var zIndex = 0;\n      var font1 = \"2.6vh\";\n      var font2 = \"2vh\";\n      var paddingbutU = \"100px\";\n      break;\n\n    default:\n      sizex = \"medium\";\n      width = withHolder;\n      var transform = \"scale(1)\";\n      var zIndex = 1;\n      var font1 = \"2.7vh\";\n      var font2 = \"1.9vh\";\n      var paddingbutU = \"70px\";\n  }\n\n  if (size == \"small\" || size === \"smallTablet\") {\n    if (focusUsername) {\n      bottom = \"-30vh\";\n      zindexU = 15;\n      zindexBackPlateU = 12;\n      displayBackPlateU = \"block\";\n    } else {\n      bottom = \"0px\";\n      zindexU = 0;\n      zindexBackPlateU = 0;\n      displayBackPlateU = \"none\";\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: passwordType ? /*#__PURE__*/_jsxDEV(TextField, {\n      size: sizex,\n      inputProps: {\n        style: {\n          fontSize: font1\n        }\n      },\n      InputLabelProps: {\n        style: {\n          fontSize: font2\n        }\n      },\n      style: {\n        transform: transform,\n        width: width,\n        paddingBottom: \"40px\",\n        zIndex: zIndex\n      },\n      label: \"Password\",\n      onChange: updateLoginvalues,\n      type: loginShowPassword ? \"text\" : \"password\",\n      name: \"inputedPassword\",\n      value: rawLoginValues.inputedPassword,\n      variant: \"standard\",\n      InputProps: {\n        endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"end\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            onMouseDown: ShowLoginPasswordForaWhile,\n            \"aria-label\": \"toggle password visibility\",\n            children: loginShowPassword ? /*#__PURE__*/_jsxDEV(VisibilityIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(VisibilityOffIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 15\n        }, this)\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(DialogContent, {\n        className: \"mobileTextfield-backplate dontallowhighlighting\",\n        style: {\n          zIndex: zindexBackPlateU,\n          display: displayBackPlateU\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        onFocus: () => setFocusUsername(true),\n        onBlur: () => setFocusUsername(false),\n        size: sizex,\n        inputProps: {\n          style: {\n            fontSize: font1\n          }\n        },\n        InputLabelProps: {\n          style: {\n            fontSize: font2\n          }\n        },\n        style: {\n          transform: transform,\n          width: width,\n          paddingBottom: paddingbutU,\n          zIndex: zindexU\n        },\n        label: \"Username\",\n        margin: \"normal\",\n        type: \"text\",\n        onChange: updateLoginvalues,\n        name: \"inputedUsername\",\n        value: rawLoginValues.inputedUsername,\n        variant: \"standard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false);\n}\n\n_s(TextFieldLoginx, \"Els0QSUvnjQNV19rlgLyg4trgp8=\");\n\n_c = TextFieldLoginx;\nexport const TextFieldLogin = /*#__PURE__*/React.memo(TextFieldLoginx);\n_c2 = TextFieldLogin;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TextFieldLoginx\");\n$RefreshReg$(_c2, \"TextFieldLogin\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/log/TextFieldLogin.tsx"],"names":["React","useState","IconButton","InputAdornment","TextField","VisibilityOffIcon","VisibilityIcon","DialogContent","TextFieldLoginx","updateLoginvalues","rawLoginValues","ShowLoginPasswordForaWhile","loginShowPassword","size","passwordType","withHolder","focusUsername","setFocusUsername","width","sizex","undefined","zindexU","zindexBackPlateU","displayBackPlateU","transform","zIndex","font1","font2","paddingbutU","bottom","style","fontSize","paddingBottom","inputedPassword","endAdornment","display","inputedUsername","TextFieldLogin","memo"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport { IconButton, InputAdornment, TextField } from \"@material-ui/core\";\r\nimport VisibilityOffIcon from \"@material-ui/icons/VisibilityOff\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\nimport { ItextfIeldLogin } from \"./log-Interfaces\";\r\nimport { isTablet } from \"react-device-detect\";\r\nimport { DialogContent, Button, Paper, Grid } from \"@material-ui/core\";\r\n\r\nfunction TextFieldLoginx({\r\n  updateLoginvalues,\r\n  rawLoginValues,\r\n  ShowLoginPasswordForaWhile,\r\n  loginShowPassword,\r\n  size,\r\n  passwordType,\r\n  withHolder,\r\n}: ItextfIeldLogin): JSX.Element {\r\n  const [focusUsername, setFocusUsername] = useState<boolean>(false);\r\n\r\n  var width = \" \";\r\n  var sizex: \"small\" | \"medium\" | undefined = undefined;\r\n\r\n  var zindexU = 0;\r\n  var zindexBackPlateU = 0;\r\n  var displayBackPlateU = \"none\";\r\n\r\n  switch (size) {\r\n    case \"small\":\r\n      sizex = \"small\";\r\n      width = \"100%\";\r\n      var transform = \"scale(0.95)\";\r\n      var zIndex = 0;\r\n      var font1 = \"\";\r\n      var font2 = \"\";\r\n      var paddingbutU = \"69px\";\r\n\r\n      break;\r\n    case \"smallTablet\":\r\n      sizex = \"small\";\r\n      width = \"62%\";\r\n      var transform = \"scale(1)\";\r\n      var zIndex = 0;\r\n      var font1 = \"2.6vh\";\r\n      var font2 = \"2vh\";\r\n      var paddingbutU = \"100px\";\r\n      break;\r\n    default:\r\n      sizex = \"medium\";\r\n      width = withHolder;\r\n      var transform = \"scale(1)\";\r\n      var zIndex = 1;\r\n      var font1 = \"2.7vh\";\r\n      var font2 = \"1.9vh\";\r\n      var paddingbutU = \"70px\";\r\n  }\r\n\r\n  if (size == \"small\" || size === \"smallTablet\") {\r\n    if (focusUsername) {\r\n      bottom = \"-30vh\";\r\n      zindexU = 15;\r\n      zindexBackPlateU = 12;\r\n      displayBackPlateU = \"block\";\r\n    } else {\r\n      bottom = \"0px\";\r\n      zindexU = 0;\r\n      zindexBackPlateU = 0;\r\n      displayBackPlateU = \"none\";\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {passwordType ? (\r\n        <TextField\r\n          size={sizex}\r\n          inputProps={{ style: { fontSize: font1 } }}\r\n          InputLabelProps={{ style: { fontSize: font2 } }}\r\n          style={{\r\n            transform: transform,\r\n            width: width,\r\n            paddingBottom: \"40px\",\r\n            zIndex: zIndex,\r\n          }}\r\n          label=\"Password\"\r\n          onChange={updateLoginvalues}\r\n          type={loginShowPassword ? \"text\" : \"password\"}\r\n          name=\"inputedPassword\"\r\n          value={rawLoginValues.inputedPassword}\r\n          variant=\"standard\"\r\n          InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment position=\"end\">\r\n                <IconButton\r\n                  onMouseDown={ShowLoginPasswordForaWhile}\r\n                  aria-label=\"toggle password visibility\"\r\n                >\r\n                  {loginShowPassword ? (\r\n                    <VisibilityIcon />\r\n                  ) : (\r\n                    <VisibilityOffIcon />\r\n                  )}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n      ) : (\r\n        <>\r\n          <DialogContent\r\n            className=\"mobileTextfield-backplate dontallowhighlighting\"\r\n            style={{ zIndex: zindexBackPlateU, display: displayBackPlateU }}\r\n          ></DialogContent>\r\n          <TextField\r\n            onFocus={() => setFocusUsername(true)}\r\n            onBlur={() => setFocusUsername(false)}\r\n            size={sizex}\r\n            inputProps={{ style: { fontSize: font1 } }}\r\n            InputLabelProps={{ style: { fontSize: font2 } }}\r\n            style={{\r\n              transform: transform,\r\n              width: width,\r\n              paddingBottom: paddingbutU,\r\n              zIndex: zindexU,\r\n            }}\r\n            label=\"Username\"\r\n            margin=\"normal\"\r\n            type=\"text\"\r\n            onChange={updateLoginvalues}\r\n            name=\"inputedUsername\"\r\n            value={rawLoginValues.inputedUsername}\r\n            variant=\"standard\"\r\n          />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport const TextFieldLogin = React.memo(TextFieldLoginx);\r\n"]},"metadata":{},"sourceType":"module"}