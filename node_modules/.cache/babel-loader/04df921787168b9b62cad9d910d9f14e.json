{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oghen\\\\OneDrive\\\\Documents\\\\ClikBate\\\\super\\\\src\\\\profile\\\\Taskbar.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from \"react\";\nimport { Grid, DialogContent } from \"@material-ui/core\";\nimport { useSpring, animated } from \"react-spring\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Taskbarx({\n  showModalUploadTask,\n  uploadClose\n}) {\n  _s();\n\n  const animation = useSpring({\n    config: {\n      duration: 600\n    },\n    opacity: showModalUploadTask ? 1 : 0,\n    transform: showModalUploadTask ? `translateX(0%)` : `translateX(-100%)`,\n    padding: \"0px\"\n  });\n  const cropCanvasRef = useRef(null);\n  const [allowCropAllCanvas, setallowCropAllCanvas] = useState(true);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(animated.div, {\n      style: { ...animation,\n        width: '94%',\n        height: \"100vh\",\n        position: \"fixed\",\n        top: '-0vh',\n        zIndex: 100,\n        cursor: \"default\",\n        overflow: \"hidden\",\n        backgroundColor: '#00ccff'\n      },\n      children: [/*#__PURE__*/_jsxDEV(DialogContent, {\n        style: {\n          padding: \"0px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          style: {\n            padding: \"0px\",\n            width: '100%'\n          },\n          children: allowCropAllCanvas ? /*#__PURE__*/_jsxDEV(\"canvas\", {\n            ref: cropCanvasRef,\n            style: {\n              padding: \"0px\",\n              margin: \"auto\",\n              backgroundColor: '#000000',\n              cursor: \"pointer\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(Taskbarx, \"yK9W7jcFqgknpBB41xSzFMsO1QE=\", false, function () {\n  return [useSpring];\n});\n\n_c = Taskbarx;\nexport const Taskbar = /*#__PURE__*/React.memo(Taskbarx);\n_c2 = Taskbar;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Taskbarx\");\n$RefreshReg$(_c2, \"Taskbar\");","map":{"version":3,"sources":["C:/Users/oghen/OneDrive/Documents/ClikBate/super/src/profile/Taskbar.tsx"],"names":["React","useRef","useState","Grid","DialogContent","useSpring","animated","Taskbarx","showModalUploadTask","uploadClose","animation","config","duration","opacity","transform","padding","cropCanvasRef","allowCropAllCanvas","setallowCropAllCanvas","width","height","position","top","zIndex","cursor","overflow","backgroundColor","margin","Taskbar","memo"],"mappings":";;;AAAA,OAAOA,KAAP,IACEC,MADF,EAIEC,QAJF,QAMO,OANP;AAQA,SAASC,IAAT,EAAuBC,aAAvB,QAA4C,mBAA5C;AAEA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,cAApC;;;;AAYA,SAASC,QAAT,CAAkB;AAChBC,EAAAA,mBADgB;AAEhBC,EAAAA;AAFgB,CAAlB,EAIqB;AAAA;;AAGnB,QAAMC,SAAS,GAAGL,SAAS,CAAC;AAC1BM,IAAAA,MAAM,EAAE;AACNC,MAAAA,QAAQ,EAAE;AADJ,KADkB;AAI1BC,IAAAA,OAAO,EAAEL,mBAAmB,GAAG,CAAH,GAAO,CAJT;AAK1BM,IAAAA,SAAS,EAAEN,mBAAmB,GAAI,gBAAJ,GAAuB,mBAL3B;AAM1BO,IAAAA,OAAO,EAAE;AANiB,GAAD,CAA3B;AAaA,QAAMC,aAAkB,GAAGf,MAAM,CAAC,IAAD,CAAjC;AAEA,QAAM,CAACgB,kBAAD,EAAqBC,qBAArB,IAA8ChB,QAAQ,CAAU,IAAV,CAA5D;AAEA,sBACE;AAAA,2BACE,QAAC,QAAD,CAAU,GAAV;AAAc,MAAA,KAAK,EAAE,EACnB,GAAGQ,SADgB;AACLS,QAAAA,KAAK,EAAE,KADF;AAEnBC,QAAAA,MAAM,EAAE,OAFW;AAGnBC,QAAAA,QAAQ,EAAE,OAHS;AAInBC,QAAAA,GAAG,EAAE,MAJc;AAKnBC,QAAAA,MAAM,EAAE,GALW;AAMnBC,QAAAA,MAAM,EAAE,SANW;AAOnBC,QAAAA,QAAQ,EAAE,QAPS;AAQnBC,QAAAA,eAAe,EAAE;AARE,OAArB;AAAA,8BAUE,QAAC,aAAD;AACE,QAAA,KAAK,EAAE;AACLX,UAAAA,OAAO,EAAE;AADJ,SADT;AAAA,+BAOE,QAAC,IAAD;AACE,UAAA,SAAS,MADX;AAEE,UAAA,KAAK,EAAE;AACLA,YAAAA,OAAO,EAAE,KADJ;AACWI,YAAAA,KAAK,EAAE;AADlB,WAFT;AAAA,oBAMGF,kBAAkB,gBACjB;AACE,YAAA,GAAG,EAAED,aADP;AAEE,YAAA,KAAK,EAAE;AACLD,cAAAA,OAAO,EAAE,KADJ;AAELY,cAAAA,MAAM,EAAE,MAFH;AAGLD,cAAAA,eAAe,EAAE,SAHZ;AAILF,cAAAA,MAAM,EAAE;AAJH;AAFT;AAAA;AAAA;AAAA;AAAA,kBADiB,GASf;AAfN;AAAA;AAAA;AAAA;AAAA;AAPF;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AA2CD;;GAnEQjB,Q;UAOWF,S;;;KAPXE,Q;AAqET,OAAO,MAAMqB,OAAO,gBAAG5B,KAAK,CAAC6B,IAAN,CAAWtB,QAAX,CAAhB;MAAMqB,O","sourcesContent":["import React, {\r\n  useRef,\r\n  useEffect,\r\n  useCallback,\r\n  useState,\r\n  useLayoutEffect,\r\n} from \"react\";\r\nimport ControlPointDuplicateIcon from \"@mui/icons-material/ControlPointDuplicate\";\r\nimport { Grid, Switch, DialogContent } from \"@material-ui/core\";\r\nimport { matchPc, matchTablet, matchMobile } from \"../DetectDevice\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport { OptionsSlider } from \"../profile/OptionsSlider\";\r\nimport { RootStateOrAny, useSelector, useDispatch } from \"react-redux\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport Axios from \"axios\";\r\nimport CheckIcon from \"@mui/icons-material/Check\";\r\nimport date from \"date-and-time\";\r\nimport { UserInfoUpdatePROFILE } from \"../log/actions/UserdataAction\";\r\nimport { UserInfoUpdateBILLBOARD } from \"../log/actions/UserdataAction\";\r\nimport { usePalette } from \"react-palette\";\r\nimport { UpdateColorAction } from \"../GlobalActions\";\r\n\r\nfunction Taskbarx({\r\n  showModalUploadTask,\r\n  uploadClose,\r\n\r\n}: any): JSX.Element {\r\n\r\n\r\n  const animation = useSpring({\r\n    config: {\r\n      duration: 600,\r\n    },\r\n    opacity: showModalUploadTask ? 1 : 0,\r\n    transform: showModalUploadTask ? `translateX(0%)` : `translateX(-100%)`,\r\n    padding: \"0px\",\r\n\r\n  });\r\n\r\n\r\n\r\n\r\n  const cropCanvasRef: any = useRef(null);\r\n\r\n  const [allowCropAllCanvas, setallowCropAllCanvas] = useState<boolean>(true);\r\n\r\n  return (\r\n    <>\r\n      <animated.div style={{\r\n        ...animation, width: '94%',\r\n        height: \"100vh\",\r\n        position: \"fixed\",\r\n        top: '-0vh',\r\n        zIndex: 100,\r\n        cursor: \"default\",\r\n        overflow: \"hidden\",\r\n        backgroundColor: '#00ccff'\r\n      }}>\r\n        <DialogContent\r\n          style={{\r\n            padding: \"0px\",\r\n          }}>\r\n\r\n\r\n\r\n          <Grid\r\n            container\r\n            style={{\r\n              padding: \"0px\", width: '100%'\r\n            }}>\r\n\r\n            {allowCropAllCanvas ? (\r\n              <canvas\r\n                ref={cropCanvasRef}\r\n                style={{\r\n                  padding: \"0px\",\r\n                  margin: \"auto\",\r\n                  backgroundColor: '#000000',\r\n                  cursor: \"pointer\",\r\n                }} />\r\n            ) : null}\r\n\r\n          </Grid>\r\n\r\n        </DialogContent> </animated.div>\r\n\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport const Taskbar = React.memo(Taskbarx);\r\n"]},"metadata":{},"sourceType":"module"}