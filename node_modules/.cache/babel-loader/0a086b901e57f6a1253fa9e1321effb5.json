{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\profile\\\\SliderBillboard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { ArrowBillboard } from \"./ArrowBillboard\";\nimport { matchPc } from \"../DetectDevice\";\nimport { Grid } from \"@material-ui/core\";\nimport { animated, useTransition } from \"react-spring\";\nimport { useSelector } from \"react-redux\";\nimport { DotsBillboard } from \"./DotsBillboard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SliderBillboardx({\n  slides,\n  billboardDynamicHeight,\n  ClickBillboardClose,\n  ShowBillboard\n}) {\n  _s();\n\n  const [sliderIndex, setSliderIndex] = useState(0);\n  const [allowAutoPlay, setAllowAutoPlay] = useState(true);\n  const [sliderDuration, setsliderDuration] = useState(2500);\n  const [autoSlideDuration, setautoSlideDuration] = useState(2600); /// const getWidth = () => window.innerWidth;\n  ///var newGetWidth = getWidth() * slides.length;\n\n  const handleTouchMoveTimer = useRef(null);\n  const cancelAutoBillboardTimer = useRef(null);\n  const changeBillboardAutoSlideDurationTimer = useRef(null);\n  const autoPlayTimer = useRef(null);\n  const SlideimageRef = useRef(null);\n  const SlideimageRefthumb = useRef(null);\n  const [imageHeight, setImageHeight] = useState(0);\n  const [touchPosition, setTouchPosition] = useState(null); ///\n  ///\n  ///\n  /// GET DARKMODE FROM REDUX STORE\n\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode; ///\n  ///\n  ///\n  /// SPRING TRANSITION WITH INDEX\n\n  const transitions = useTransition(sliderIndex, {\n    key: sliderIndex,\n    from: {\n      opacity: 0\n    },\n    enter: {\n      opacity: 1\n    },\n    leave: {\n      opacity: 0\n    },\n    config: {\n      duration: sliderDuration - 50\n    }\n  }); ///\n  ///\n  ///\n  /// PROVIDES DYNAMIC HEIGHT FOR SLIDER CONTENT FROM IMAGE\n\n  const sliderFirstImageOnLoad = item => {\n    if (item === 0) {\n      if (SlideimageRef.current && SlideimageRef.current.clientHeight) {\n        setImageHeight(SlideimageRef.current.clientHeight);\n      }\n    }\n  }; ///\n  ///\n  ///\n  /// PROVIDES DYNAMIC HEIGHT FOR SLIDER CONTENT FROM THUMBS IF IMAGE DOES NOT LOAD\n\n\n  const sliderFirstImageOnLoadthumb = item => {\n    if (item === 0 && imageHeight === 0) {\n      if (SlideimageRefthumb.current && SlideimageRefthumb.current.clientHeight) {\n        setImageHeight(SlideimageRefthumb.current.clientHeight);\n      }\n    }\n  }; ///\n  ///\n  ///\n  /// HANDLE TOUCH START EVENT\n\n\n  const handleTouchStart = e => {\n    ////onMouseDown onMouseMove\n    ////touchDown = e.clientX\n    const touchDown = e.touches[0].clientX;\n    setTouchPosition(touchDown);\n  }; ///\n  ///\n  ///\n  /// HANDLE TOUCH MOVE EVENT\n\n\n  const handleTouchMove = e => {\n    if (handleTouchMoveTimer.current) {\n      clearTimeout(handleTouchMoveTimer.current);\n    }\n\n    handleTouchMoveTimer.current = setTimeout(function () {\n      const touchDown = touchPosition;\n\n      if (touchDown === null) {\n        return;\n      } ////currentTouch = e.clientX\n\n\n      const currentTouch = e.touches[0].clientX;\n      const diff = touchDown - currentTouch;\n\n      if (diff > 40) {\n        nextSlide();\n      } else if (diff < -40) {\n        prevSlide();\n      } else {}\n\n      setTouchPosition(null);\n      return false;\n    }, 200);\n    return false;\n  }; ///\n  ///\n  ///\n  /// NEXT SLIDE\n\n\n  const nextSlide = () => {\n    if (allowAutoPlay) {} else {\n      if (autoPlayTimer.current) {\n        clearTimeout(autoPlayTimer.current);\n      }\n    } ///set((state) => (state + 1) % slides.length);\n\n\n    if (sliderIndex === slides.length - 1) {\n      setSliderIndex(sliderIndex => 0);\n    } else {\n      setSliderIndex(sliderIndex => sliderIndex + 1);\n    }\n  }; ///\n  ///\n  ///\n  /// PREV SLIDE\n\n\n  const prevSlide = () => {\n    if (allowAutoPlay) {} else {\n      if (autoPlayTimer.current) {\n        clearTimeout(autoPlayTimer.current);\n      }\n    }\n\n    if (sliderIndex === 0) {\n      setSliderIndex(sliderIndex => slides.length - 1);\n    } else {\n      setSliderIndex(sliderIndex => sliderIndex - 1);\n    }\n  }; ///\n  ///\n  ///\n  /// AUTO PLAY SLIDER DEPENDENT FUNCTION\n\n\n  const startSlider = () => {\n    setAllowAutoPlay(false);\n    autoPlayTimer.current = setInterval(function () {\n      setSliderIndex(state => (state + 1) % slides.length);\n    }, autoSlideDuration);\n  }; ///\n  ///\n  ///\n  /// AUTO PLAY SLIDER START\n\n\n  const SliderAutoPlay = () => {\n    if (allowAutoPlay) {\n      startSlider();\n    } else {\n      setAllowAutoPlay(true);\n\n      if (autoPlayTimer.current) {\n        clearInterval(autoPlayTimer.current);\n      }\n    }\n  }; ///\n  ///\n  ///\n  /// UPDATE AUTO  PLAY  DURATION  AFTER INITIAL QUICK SLIDE\n\n\n  const callNewAutoBillboard = () => {\n    if (autoPlayTimer.current) {\n      clearInterval(autoPlayTimer.current);\n    }\n\n    autoPlayTimer.current = setInterval(function () {\n      setSliderIndex(state => (state + 1) % slides.length);\n    }, 8000);\n\n    if (cancelAutoBillboardTimer.current) {\n      clearTimeout(cancelAutoBillboardTimer.current);\n    }\n\n    cancelAutoBillboardTimer.current = setTimeout(function () {\n      if (autoPlayTimer.current) {\n        clearInterval(autoPlayTimer.current);\n      }\n    }, 72000);\n  }; ///\n  ///\n  ///START AUTOPLAY ON PAGE LOAD\n\n\n  useEffect(() => {\n    SliderAutoPlay();\n    changeBillboardAutoSlideDurationTimer.current = setTimeout(function () {\n      setsliderDuration(5500);\n      callNewAutoBillboard();\n    }, 5200);\n  }, []); ///\n  ///\n  /// WATCH FOR CHANGE IN [ShowBillboard] AND USE THAT CONTROL SLIDER DURATION(ON VIEW) AND CLEAR AUTOPLAY TIMER\n\n  useEffect(() => {\n    if (ShowBillboard) {\n      setsliderDuration(2000);\n\n      if (allowAutoPlay) {} else {\n        if (autoPlayTimer.current) {\n          clearInterval(autoPlayTimer.current);\n        }\n      }\n    } else {}\n  }, [ShowBillboard]); ///\n  ///\n  ///  CHANGE [showBillboard == close]  EXTEND SLIDER DURATION(ON VIEW) AND  START AUTOPLAY\n\n  const ClickBillboardCloseStart = () => {\n    ClickBillboardClose();\n    setsliderDuration(5500);\n\n    if (allowAutoPlay) {} else {\n      callNewAutoBillboard();\n    }\n  }; ///\n  ///\n  ///\n  /// CHANGE SLIDER CONTENT USING  DOTS\n\n\n  const GotoDots = clickedDot => {\n    setSliderIndex(sliderIndex => clickedDot);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    item: true,\n    onTouchStart: handleTouchStart,\n    onTouchMove: handleTouchMove,\n    xs: 12,\n    style: {\n      position: \"relative\",\n      height: `${imageHeight}px`,\n      opacity: imageHeight === 0 ? 0 : 1\n    },\n    children: [/*#__PURE__*/_jsxDEV(ArrowBillboard, {\n      ShowBillboard: ShowBillboard,\n      direction: \"left\",\n      clickSlideprev: prevSlide,\n      clickSlidenext: nextSlide,\n      imageHeight: imageHeight\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this), transitions((style, i) => /*#__PURE__*/_jsxDEV(Grid, {\n      xs: 12,\n      item: true,\n      children: [/*#__PURE__*/_jsxDEV(animated.img, {\n        ref: SlideimageRefthumb,\n        onLoad: () => {\n          sliderFirstImageOnLoadthumb(i);\n        },\n        className: \"turlightbillboard\",\n        style: { ...style,\n          width: \"100%\",\n          objectFit: \"cover\",\n          position: \"absolute\",\n          height: billboardDynamicHeight,\n          borderRadius: \"0px\",\n          borderBottomLeftRadius: matchPc ? \"7px\" : \"0em\",\n          borderBottomRightRadius: matchPc ? \"7px\" : \"0em\",\n          filter: \"blur(3px)\",\n          left: \"0\"\n        },\n        src: `./images/billboardthumb/${slides[i]}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(animated.img, {\n        ref: SlideimageRef,\n        onClick: ClickBillboardCloseStart,\n        onLoad: () => {\n          sliderFirstImageOnLoad(i);\n        },\n        style: { ...style,\n          cursor: \"pointer\",\n          width: \"100%\",\n          objectFit: \"cover\",\n          position: \"absolute\",\n          height: billboardDynamicHeight,\n          borderRadius: \"0px\",\n          borderBottomLeftRadius: ShowBillboard ? \"0px\" : matchPc ? \"7px\" : \"0px\",\n          borderBottomRightRadius: ShowBillboard ? \"0px\" : matchPc ? \"7px\" : \"0px\",\n          left: \"0\",\n          zIndex: 1\n        },\n        src: `./images/billboard/${slides[i]}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 11\n      }, this)]\n    }, i, true, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 9\n    }, this)), \" \", /*#__PURE__*/_jsxDEV(DotsBillboard, {\n      ShowBillboard: ShowBillboard,\n      GotoDots: GotoDots,\n      slides: slides,\n      activeSlide: sliderIndex\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 277,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SliderBillboardx, \"2hkiLi//nQq+Scloqsf/dBTUGnI=\", false, function () {\n  return [useSelector, useTransition];\n});\n\n_c = SliderBillboardx;\nexport const SliderBillboard = /*#__PURE__*/React.memo(SliderBillboardx);\n_c2 = SliderBillboard;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SliderBillboardx\");\n$RefreshReg$(_c2, \"SliderBillboard\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/profile/SliderBillboard.tsx"],"names":["React","useState","useRef","useEffect","ArrowBillboard","matchPc","Grid","animated","useTransition","useSelector","DotsBillboard","SliderBillboardx","slides","billboardDynamicHeight","ClickBillboardClose","ShowBillboard","sliderIndex","setSliderIndex","allowAutoPlay","setAllowAutoPlay","sliderDuration","setsliderDuration","autoSlideDuration","setautoSlideDuration","handleTouchMoveTimer","cancelAutoBillboardTimer","changeBillboardAutoSlideDurationTimer","autoPlayTimer","SlideimageRef","SlideimageRefthumb","imageHeight","setImageHeight","touchPosition","setTouchPosition","darkmode","state","GlobalReducer","darkmodeReducer","transitions","key","from","opacity","enter","leave","config","duration","sliderFirstImageOnLoad","item","current","clientHeight","sliderFirstImageOnLoadthumb","handleTouchStart","e","touchDown","touches","clientX","handleTouchMove","clearTimeout","setTimeout","currentTouch","diff","nextSlide","prevSlide","length","startSlider","setInterval","SliderAutoPlay","clearInterval","callNewAutoBillboard","ClickBillboardCloseStart","GotoDots","clickedDot","position","height","style","i","width","objectFit","borderRadius","borderBottomLeftRadius","borderBottomRightRadius","filter","left","cursor","zIndex","SliderBillboard","memo"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport { ArrowBillboard } from \"./ArrowBillboard\";\r\nimport { matchPc } from \"../DetectDevice\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { animated, useTransition } from \"react-spring\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { DotsBillboard } from \"./DotsBillboard\";\r\n\r\nfunction SliderBillboardx({\r\n  slides,\r\n  billboardDynamicHeight,\r\n  ClickBillboardClose,\r\n  ShowBillboard,\r\n}: any): JSX.Element {\r\n  const [sliderIndex, setSliderIndex] = useState(0);\r\n\r\n  const [allowAutoPlay, setAllowAutoPlay] = useState(true);\r\n\r\n  const [sliderDuration, setsliderDuration] = useState(2500);\r\n  const [autoSlideDuration, setautoSlideDuration] = useState(2600);\r\n\r\n  /// const getWidth = () => window.innerWidth;\r\n  ///var newGetWidth = getWidth() * slides.length;\r\n\r\n  const handleTouchMoveTimer = useRef<ReturnType<typeof setTimeout> | null>(\r\n    null\r\n  );\r\n\r\n  const cancelAutoBillboardTimer = useRef<ReturnType<typeof setTimeout> | null>(\r\n    null\r\n  );\r\n\r\n  const changeBillboardAutoSlideDurationTimer = useRef<ReturnType<\r\n    typeof setTimeout\r\n  > | null>(null);\r\n\r\n  const autoPlayTimer = useRef<ReturnType<typeof setInterval> | null>(null);\r\n\r\n  const SlideimageRef = useRef<HTMLImageElement>(null);\r\n  const SlideimageRefthumb = useRef<HTMLImageElement>(null);\r\n\r\n  const [imageHeight, setImageHeight] = useState(0);\r\n  const [touchPosition, setTouchPosition] = useState(null);\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// GET DARKMODE FROM REDUX STORE\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n  const darkmodeReducer = darkmode;\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// SPRING TRANSITION WITH INDEX\r\n  const transitions = useTransition(sliderIndex, {\r\n    key: sliderIndex,\r\n    from: { opacity: 0 },\r\n    enter: { opacity: 1 },\r\n    leave: { opacity: 0 },\r\n    config: { duration: sliderDuration - 50 },\r\n  });\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// PROVIDES DYNAMIC HEIGHT FOR SLIDER CONTENT FROM IMAGE\r\n  const sliderFirstImageOnLoad = (item: number) => {\r\n    if (item === 0) {\r\n      if (SlideimageRef.current && SlideimageRef.current.clientHeight) {\r\n        setImageHeight(SlideimageRef.current.clientHeight);\r\n      }\r\n    }\r\n  };\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// PROVIDES DYNAMIC HEIGHT FOR SLIDER CONTENT FROM THUMBS IF IMAGE DOES NOT LOAD\r\n  const sliderFirstImageOnLoadthumb = (item: number) => {\r\n    if (item === 0 && imageHeight === 0) {\r\n      if (\r\n        SlideimageRefthumb.current &&\r\n        SlideimageRefthumb.current.clientHeight\r\n      ) {\r\n        setImageHeight(SlideimageRefthumb.current.clientHeight);\r\n      }\r\n    }\r\n  };\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// HANDLE TOUCH START EVENT\r\n  const handleTouchStart = (e: any) => {\r\n    ////onMouseDown onMouseMove\r\n    ////touchDown = e.clientX\r\n    const touchDown = e.touches[0].clientX;\r\n    setTouchPosition(touchDown);\r\n  };\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// HANDLE TOUCH MOVE EVENT\r\n  const handleTouchMove = (e: any) => {\r\n    if (handleTouchMoveTimer.current) {\r\n      clearTimeout(handleTouchMoveTimer.current);\r\n    }\r\n    handleTouchMoveTimer.current = setTimeout(function () {\r\n      const touchDown = touchPosition;\r\n\r\n      if (touchDown === null) {\r\n        return;\r\n      }\r\n      ////currentTouch = e.clientX\r\n      const currentTouch = e.touches[0].clientX;\r\n      const diff = touchDown - currentTouch;\r\n\r\n      if (diff > 40) {\r\n        nextSlide();\r\n      } else if (diff < -40) {\r\n        prevSlide();\r\n      } else {\r\n      }\r\n\r\n      setTouchPosition(null);\r\n      return false;\r\n    }, 200);\r\n\r\n    return false;\r\n  };\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// NEXT SLIDE\r\n  const nextSlide = () => {\r\n    if (allowAutoPlay) {\r\n    } else {\r\n      if (autoPlayTimer.current) {\r\n        clearTimeout(autoPlayTimer.current);\r\n      }\r\n    }\r\n\r\n    ///set((state) => (state + 1) % slides.length);\r\n    if (sliderIndex === slides.length - 1) {\r\n      setSliderIndex((sliderIndex) => 0);\r\n    } else {\r\n      setSliderIndex((sliderIndex) => sliderIndex + 1);\r\n    }\r\n  };\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// PREV SLIDE\r\n  const prevSlide = () => {\r\n    if (allowAutoPlay) {\r\n    } else {\r\n      if (autoPlayTimer.current) {\r\n        clearTimeout(autoPlayTimer.current);\r\n      }\r\n    }\r\n\r\n    if (sliderIndex === 0) {\r\n      setSliderIndex((sliderIndex) => slides.length - 1);\r\n    } else {\r\n      setSliderIndex((sliderIndex) => sliderIndex - 1);\r\n    }\r\n  };\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// AUTO PLAY SLIDER DEPENDENT FUNCTION\r\n  const startSlider = () => {\r\n    setAllowAutoPlay(false);\r\n\r\n    autoPlayTimer.current = setInterval(function () {\r\n      setSliderIndex((state) => (state + 1) % slides.length);\r\n    }, autoSlideDuration);\r\n  };\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// AUTO PLAY SLIDER START\r\n  const SliderAutoPlay = () => {\r\n    if (allowAutoPlay) {\r\n      startSlider();\r\n    } else {\r\n      setAllowAutoPlay(true);\r\n\r\n      if (autoPlayTimer.current) {\r\n        clearInterval(autoPlayTimer.current);\r\n      }\r\n    }\r\n  };\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// UPDATE AUTO  PLAY  DURATION  AFTER INITIAL QUICK SLIDE\r\n  const callNewAutoBillboard = () => {\r\n    if (autoPlayTimer.current) {\r\n      clearInterval(autoPlayTimer.current);\r\n    }\r\n    autoPlayTimer.current = setInterval(function () {\r\n      setSliderIndex((state) => (state + 1) % slides.length);\r\n    }, 8000);\r\n\r\n    if (cancelAutoBillboardTimer.current) {\r\n      clearTimeout(cancelAutoBillboardTimer.current);\r\n    }\r\n    cancelAutoBillboardTimer.current = setTimeout(function () {\r\n      if (autoPlayTimer.current) {\r\n        clearInterval(autoPlayTimer.current);\r\n      }\r\n    }, 72000);\r\n  };\r\n\r\n  ///\r\n  ///\r\n  ///START AUTOPLAY ON PAGE LOAD\r\n  useEffect(() => {\r\n    SliderAutoPlay();\r\n    changeBillboardAutoSlideDurationTimer.current = setTimeout(function () {\r\n      setsliderDuration(5500);\r\n      callNewAutoBillboard();\r\n    }, 5200);\r\n  }, []);\r\n\r\n  ///\r\n  ///\r\n  /// WATCH FOR CHANGE IN [ShowBillboard] AND USE THAT CONTROL SLIDER DURATION(ON VIEW) AND CLEAR AUTOPLAY TIMER\r\n  useEffect(() => {\r\n    if (ShowBillboard) {\r\n      setsliderDuration(2000);\r\n      if (allowAutoPlay) {\r\n      } else {\r\n        if (autoPlayTimer.current) {\r\n          clearInterval(autoPlayTimer.current);\r\n        }\r\n      }\r\n    } else {\r\n    }\r\n  }, [ShowBillboard]);\r\n\r\n  ///\r\n  ///\r\n  ///  CHANGE [showBillboard == close]  EXTEND SLIDER DURATION(ON VIEW) AND  START AUTOPLAY\r\n  const ClickBillboardCloseStart = () => {\r\n    ClickBillboardClose();\r\n    setsliderDuration(5500);\r\n    if (allowAutoPlay) {\r\n    } else {\r\n      callNewAutoBillboard();\r\n    }\r\n  };\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// CHANGE SLIDER CONTENT USING  DOTS\r\n  const GotoDots = (clickedDot: number) => {\r\n    setSliderIndex((sliderIndex) => clickedDot);\r\n  };\r\n  return (\r\n    <Grid\r\n      item\r\n      onTouchStart={handleTouchStart}\r\n      onTouchMove={handleTouchMove}\r\n      xs={12}\r\n      style={{\r\n        position: \"relative\",\r\n        height: `${imageHeight}px`,\r\n        opacity: imageHeight === 0 ? 0 : 1,\r\n      }}\r\n    >\r\n      <ArrowBillboard\r\n        ShowBillboard={ShowBillboard}\r\n        direction=\"left\"\r\n        clickSlideprev={prevSlide}\r\n        clickSlidenext={nextSlide}\r\n        imageHeight={imageHeight}\r\n      />\r\n      {transitions((style, i) => (\r\n        <Grid key={i} xs={12} item>\r\n          <animated.img\r\n            ref={SlideimageRefthumb}\r\n            onLoad={() => {\r\n              sliderFirstImageOnLoadthumb(i);\r\n            }}\r\n            className=\"turlightbillboard\"\r\n            style={{\r\n              ...style,\r\n              width: \"100%\",\r\n              objectFit: \"cover\",\r\n              position: \"absolute\",\r\n              height: billboardDynamicHeight,\r\n              borderRadius: \"0px\",\r\n              borderBottomLeftRadius: matchPc ? \"7px\" : \"0em\",\r\n              borderBottomRightRadius: matchPc ? \"7px\" : \"0em\",\r\n              filter: \"blur(3px)\",\r\n              left: \"0\",\r\n            }}\r\n            src={`./images/billboardthumb/${slides[i]}`}\r\n          />\r\n\r\n          <animated.img\r\n            ref={SlideimageRef}\r\n            onClick={ClickBillboardCloseStart}\r\n            onLoad={() => {\r\n              sliderFirstImageOnLoad(i);\r\n            }}\r\n            style={{\r\n              ...style,\r\n              cursor: \"pointer\",\r\n              width: \"100%\",\r\n              objectFit: \"cover\",\r\n              position: \"absolute\",\r\n              height: billboardDynamicHeight,\r\n              borderRadius: \"0px\",\r\n              borderBottomLeftRadius: ShowBillboard\r\n                ? \"0px\"\r\n                : matchPc\r\n                ? \"7px\"\r\n                : \"0px\",\r\n              borderBottomRightRadius: ShowBillboard\r\n                ? \"0px\"\r\n                : matchPc\r\n                ? \"7px\"\r\n                : \"0px\",\r\n              left: \"0\",\r\n              zIndex: 1,\r\n            }}\r\n            src={`./images/billboard/${slides[i]}`}\r\n          />\r\n        </Grid>\r\n      ))}{\" \"}\r\n      <DotsBillboard\r\n        ShowBillboard={ShowBillboard}\r\n        GotoDots={GotoDots}\r\n        slides={slides}\r\n        activeSlide={sliderIndex}\r\n      />\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport const SliderBillboard = React.memo(SliderBillboardx);\r\n"]},"metadata":{},"sourceType":"module"}