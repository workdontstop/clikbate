{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oghen\\\\OneDrive\\\\Documents\\\\ClikBate\\\\super\\\\src\\\\profile\\\\Taskbar.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { DialogContent } from \"@material-ui/core\";\nimport { matchPc } from \"../DetectDevice\";\nimport { useSpring, animated } from \"react-spring\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { FilterMode } from \"../upload/FilterMode\";\nimport { TaskbarCrop } from \"./TaskbarCrop\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Taskbarx({\n  showModalUploadTask,\n  uploadClose,\n  getSliderWidth\n}) {\n  _s();\n\n  const dispatch = useDispatch(); ///\n  ///\n  ///\n  /// INTERFACE/TYPES FOR SCREENHEIGHT AND DARKMODE\n\n  ///\n  ///\n  ///\n  /// GET DARKMODE FROM REDUX STORE\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const animation = useSpring({\n    config: {\n      duration: 600\n    },\n    opacity: showModalUploadTask ? 1 : 0,\n    transform: showModalUploadTask ? `translateX(0%)` : `translateX(-100%)`,\n    padding: \"0px\"\n  });\n  const [showAlll, setshowAlll] = useState(false);\n  const [hidecropper, setHidecropper] = useState(false);\n  const [finalImage, setfinalimage] = useState([]);\n  const [hideCrop, sethideCrop] = useState(false);\n  const [ratiox, setratiox] = useState(1);\n  useEffect(() => {\n    if (showModalUploadTask) {\n      setHidecropper(false);\n      setratiox(1);\n      setTimeout(() => {\n        setshowAlll(true);\n      }, 600);\n    } else {\n      setshowAlll(false);\n    }\n  }, [showModalUploadTask]);\n  const itemUploadRefSD = useRef([]);\n  const itemUploadRefThumb = useRef([]);\n  const itemUploadRef = useRef([]);\n  const [ActivatefilterImage, setActivatefilterImage] = useState(false);\n  const {\n    activatefilterImage,\n    activatecropImage,\n    selectedImage,\n    cropimage\n  } = useSelector(state => ({ ...state.GlobalNavuploadReducer\n  }));\n  const activatefilterImageReducer = activatefilterImage;\n  const activatecropImageReducer = activatecropImage;\n  const selectedImageReducer = selectedImage;\n  const cropimageReducer = cropimage;\n  const animationkk = useSpring({\n    config: {\n      duration: 600\n    },\n    opacity: activatefilterImageReducer ? 1 : 0\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(animated.div, {\n      className: matchPc ? darkmodeReducer ? \"postscroll-dark modal-containerDark\" : \"postscroll-light modal-containerLight\" : darkmodeReducer ? \"postscroll-darkm modal-containerDark\" : \"postscroll-lightm  modal-containerLight\",\n      style: { ...animation,\n        width: '94%',\n        height: \"100vh\",\n        position: \"fixed\",\n        top: '-0vh',\n        zIndex: 100,\n        cursor: \"default\",\n        overflow: hideCrop ? 'auto' : 'hidden'\n      },\n      children: [/*#__PURE__*/_jsxDEV(DialogContent, {\n        className: \"dontallowhighlighting\",\n        style: {\n          padding: \"0px\"\n        },\n        children: [showAlll ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [\"   \", hidecropper && selectedImageReducer.length === finalImage.length ? /*#__PURE__*/_jsxDEV(animated.div, {\n            style: { ...animationkk,\n              position: activatefilterImageReducer ? \"relative\" : \"fixed\",\n              top: activatefilterImageReducer ? \"\" : \"-20vh\",\n              zIndex: activatefilterImageReducer ? 10 : 1,\n              padding: \"0px\"\n            },\n            children: /*#__PURE__*/_jsxDEV(FilterMode, {\n              closeUploadModal: null,\n              itemUploadRefThumb: itemUploadRefThumb,\n              itemUploadRefSD: itemUploadRefSD,\n              itemUploadRef: itemUploadRef,\n              filterImage: finalImage,\n              selectedImage: selectedImageReducer,\n              ActivatefilterImage: ActivatefilterImage,\n              setActivatefilterImage: setActivatefilterImage,\n              getSliderWidthNew: getSliderWidth\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }, this) : /*#__PURE__*/_jsxDEV(TaskbarCrop, {\n            itemUploadRefSD: itemUploadRefSD,\n            itemUploadRef: itemUploadRef,\n            itemUploadRefThumb: itemUploadRefThumb,\n            hideCrop: hideCrop,\n            sethideCrop: sethideCrop,\n            ratiox: ratiox,\n            setratiox: setratiox,\n            showModalUploadTask: showModalUploadTask,\n            setHidecropper: setHidecropper,\n            uploadClose: uploadClose,\n            setfinalimage: setfinalimage,\n            finalImage: finalImage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true) : null, selectedImageReducer.map((picture, index) => /*#__PURE__*/_jsxDEV(TaskbarSuperphotoImageView, {\n          ratiox: ratiox,\n          Dimension: Dimension,\n          ActiveSlide: ActiveSlide,\n          callDrawSlider: callDrawSlider,\n          ShowText: ShowText,\n          activeItem: activeItem,\n          setactiveItem: setactiveItem,\n          setShowText: setShowText,\n          ratio: ratiox,\n          seeOriginal: seeOriginal,\n          Originalray: Originalray,\n          setOriginalRay: setOriginalRay,\n          ray: ray,\n          finalImage: finalImage,\n          AddMainImageRef: AddMainImageRef,\n          index: index,\n          MainImageFiltersRef: MainImageFiltersRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(Taskbarx, \"Z7Cq7/ioiEn0gerKjvw+ZJvYvXs=\", false, function () {\n  return [useDispatch, useSelector, useSpring, useSelector, useSpring];\n});\n\n_c = Taskbarx;\nexport const Taskbar = /*#__PURE__*/React.memo(Taskbarx);\n_c2 = Taskbar;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Taskbarx\");\n$RefreshReg$(_c2, \"Taskbar\");","map":{"version":3,"sources":["C:/Users/oghen/OneDrive/Documents/ClikBate/super/src/profile/Taskbar.tsx"],"names":["React","useRef","useEffect","useState","DialogContent","matchPc","useSpring","animated","useSelector","useDispatch","FilterMode","TaskbarCrop","Taskbarx","showModalUploadTask","uploadClose","getSliderWidth","dispatch","darkmode","state","GlobalReducer","darkmodeReducer","animation","config","duration","opacity","transform","padding","showAlll","setshowAlll","hidecropper","setHidecropper","finalImage","setfinalimage","hideCrop","sethideCrop","ratiox","setratiox","setTimeout","itemUploadRefSD","itemUploadRefThumb","itemUploadRef","ActivatefilterImage","setActivatefilterImage","activatefilterImage","activatecropImage","selectedImage","cropimage","GlobalNavuploadReducer","activatefilterImageReducer","activatecropImageReducer","selectedImageReducer","cropimageReducer","animationkk","width","height","position","top","zIndex","cursor","overflow","length","map","picture","index","Dimension","ActiveSlide","callDrawSlider","ShowText","activeItem","setactiveItem","setShowText","seeOriginal","Originalray","setOriginalRay","ray","AddMainImageRef","MainImageFiltersRef","Taskbar","memo"],"mappings":"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","sourcesContent":["import React, {\r\n  useRef,\r\n  useEffect,\r\n  useCallback,\r\n  useState,\r\n  useLayoutEffect,\r\n} from \"react\";\r\nimport ControlPointDuplicateIcon from \"@mui/icons-material/ControlPointDuplicate\";\r\nimport { Grid, Switch, DialogContent } from \"@material-ui/core\";\r\nimport { matchPc, matchTablet, matchMobile } from \"../DetectDevice\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport { OptionsSlider } from \"../profile/OptionsSlider\";\r\nimport { RootStateOrAny, useSelector, useDispatch } from \"react-redux\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport Axios from \"axios\";\r\nimport CheckIcon from \"@mui/icons-material/Check\";\r\nimport date from \"date-and-time\";\r\nimport { UserInfoUpdatePROFILE } from \"../log/actions/UserdataAction\";\r\nimport { UserInfoUpdateBILLBOARD } from \"../log/actions/UserdataAction\";\r\nimport { usePalette } from \"react-palette\";\r\nimport { UpdateColorAction } from \"../GlobalActions\";\r\nimport EditTwoToneIcon from \"@mui/icons-material/EditTwoTone\";\r\nimport DoneOutlineIcon from '@mui/icons-material/DoneOutline';\r\nimport { UpdateUploadData } from \"../GlobalActions\";\r\nimport DoneIcon from '@mui/icons-material/Done';\r\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\r\nimport { FilterMode } from \"../upload/FilterMode\";\r\nimport CropIcon from '@mui/icons-material/Crop';\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport { TaskbarCrop } from \"./TaskbarCrop\";\r\nimport { TaskbarSuperphoto } from \"./TaskbarSuperphoto\";\r\n\r\n\r\nfunction Taskbarx({\r\n  showModalUploadTask,\r\n  uploadClose,\r\n  getSliderWidth\r\n}: any): JSX.Element {\r\n  const dispatch = useDispatch();\r\n\r\n\r\n\r\n\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// INTERFACE/TYPES FOR SCREENHEIGHT AND DARKMODE\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n      screenHeight: number;\r\n    };\r\n  }\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// GET DARKMODE FROM REDUX STORE\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n  const darkmodeReducer = darkmode;\r\n\r\n\r\n  const animation = useSpring({\r\n    config: {\r\n      duration: 600,\r\n    },\r\n    opacity: showModalUploadTask ? 1 : 0,\r\n    transform: showModalUploadTask ? `translateX(0%)` : `translateX(-100%)`,\r\n    padding: \"0px\",\r\n\r\n  });\r\n\r\n\r\n  const [showAlll, setshowAlll] = useState(false);\r\n\r\n  const [hidecropper, setHidecropper] = useState(false);\r\n\r\n  const [finalImage, setfinalimage] = useState<any>([]);\r\n\r\n  const [hideCrop, sethideCrop] = useState(false);\r\n\r\n\r\n  const [ratiox, setratiox] = useState(1);\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if (showModalUploadTask) {\r\n      setHidecropper(false);\r\n      setratiox(1);\r\n      setTimeout(() => { setshowAlll(true) }, 600)\r\n    } else {\r\n      setshowAlll(false);\r\n\r\n    }\r\n\r\n  }, [showModalUploadTask]);\r\n\r\n  const itemUploadRefSD = useRef<any>([]);\r\n  const itemUploadRefThumb = useRef<any>([]);\r\n  const itemUploadRef = useRef<any>([]);\r\n\r\n\r\n\r\n  const [ActivatefilterImage, setActivatefilterImage] =\r\n    useState<boolean>(false);\r\n\r\n\r\n\r\n  const { activatefilterImage, activatecropImage, selectedImage, cropimage } = useSelector(\r\n    (state: RootStateOrAny) => ({\r\n      ...state.GlobalNavuploadReducer,\r\n    })\r\n  );\r\n  const activatefilterImageReducer = activatefilterImage;\r\n  const activatecropImageReducer = activatecropImage;\r\n  const selectedImageReducer = selectedImage;\r\n  const cropimageReducer = cropimage;\r\n\r\n  const animationkk = useSpring({\r\n    config: {\r\n      duration: 600,\r\n    },\r\n    opacity: activatefilterImageReducer ? 1 : 0,\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <animated.div\r\n\r\n        className={\r\n          matchPc\r\n            ? darkmodeReducer\r\n              ? \"postscroll-dark modal-containerDark\"\r\n              : \"postscroll-light modal-containerLight\"\r\n            : darkmodeReducer\r\n              ? \"postscroll-darkm modal-containerDark\"\r\n              : \"postscroll-lightm  modal-containerLight\"\r\n        }\r\n\r\n\r\n\r\n        style={{\r\n          ...animation, width: '94%',\r\n          height: \"100vh\",\r\n          position: \"fixed\",\r\n          top: '-0vh',\r\n          zIndex: 100,\r\n          cursor: \"default\",\r\n          overflow: hideCrop ? 'auto' : 'hidden',\r\n        }}>\r\n        <DialogContent\r\n          className=\"dontallowhighlighting\"\r\n          style={{\r\n            padding: \"0px\",\r\n\r\n          }}>\r\n\r\n\r\n\r\n\r\n\r\n          {showAlll ? <>   {hidecropper && selectedImageReducer.length === finalImage.length ?\r\n            <animated.div\r\n              style={{\r\n                ...animationkk,\r\n                position: activatefilterImageReducer ? \"relative\" : \"fixed\",\r\n                top: activatefilterImageReducer ? \"\" : \"-20vh\",\r\n                zIndex: activatefilterImageReducer ? 10 : 1,\r\n                padding: \"0px\",\r\n              }}\r\n            >\r\n              <FilterMode\r\n                closeUploadModal={null}\r\n                itemUploadRefThumb={itemUploadRefThumb}\r\n                itemUploadRefSD={itemUploadRefSD}\r\n                itemUploadRef={itemUploadRef}\r\n                filterImage={finalImage}\r\n                selectedImage={selectedImageReducer}\r\n                ActivatefilterImage={ActivatefilterImage}\r\n                setActivatefilterImage={setActivatefilterImage}\r\n                getSliderWidthNew={getSliderWidth}\r\n              />\r\n            </animated.div> :\r\n\r\n\r\n            <TaskbarCrop itemUploadRefSD={itemUploadRefSD} itemUploadRef={itemUploadRef} itemUploadRefThumb={itemUploadRefThumb} hideCrop={hideCrop} sethideCrop={sethideCrop} ratiox={ratiox} setratiox={setratiox}\r\n              showModalUploadTask={showModalUploadTask} setHidecropper={setHidecropper} uploadClose={uploadClose} setfinalimage={setfinalimage} finalImage={finalImage} />\r\n\r\n          }\r\n          </> :\r\n            null\r\n          }\r\n\r\n\r\n\r\n          {selectedImageReducer.map((picture: any, index: any) => (\r\n\r\n\r\n\r\n            <TaskbarSuperphotoImageView\r\n              ratiox={ratiox}\r\n              Dimension={Dimension}\r\n              ActiveSlide={ActiveSlide}\r\n              callDrawSlider={callDrawSlider}\r\n              ShowText={ShowText}\r\n              activeItem={activeItem}\r\n              setactiveItem={setactiveItem}\r\n              setShowText={setShowText}\r\n              ratio={ratiox}\r\n              seeOriginal={seeOriginal}\r\n              Originalray={Originalray}\r\n              setOriginalRay={setOriginalRay}\r\n              ray={ray}\r\n              finalImage={finalImage} AddMainImageRef={AddMainImageRef} index={index} MainImageFiltersRef={MainImageFiltersRef} />\r\n\r\n          ))}\r\n\r\n\r\n\r\n\r\n        </DialogContent> </animated.div>\r\n\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport const Taskbar = React.memo(Taskbarx);\r\n"]},"metadata":{},"sourceType":"module"}