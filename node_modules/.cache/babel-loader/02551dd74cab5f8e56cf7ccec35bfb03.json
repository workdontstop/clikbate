{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\upload\\\\PreviewCanvasCropAll.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useLayoutEffect } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction PreviewCanvasCropAllx({\n  setwaitONLOAD,\n  cropCanvasRef,\n  image,\n  getpreviewFixedWidth,\n  index,\n  CropImageHolder,\n  cropheight,\n  cropwidth,\n  BoxCropActivated,\n  hdcanvasvalue,\n  SourceWidthForCropX,\n  SourceWidthForCropY,\n  WideImageCheck,\n  crop,\n  getCropHeight,\n  canvasToimage,\n  refWithimageData,\n  addUploadItemsRef,\n  itemUploadRef,\n  setsuperCropLoadFade,\n  length,\n  filterImage,\n  setfilterImage,\n  setallowFilters,\n  allowCropAllCanvas\n}) {\n  _s();\n\n  ///\n  ///\n  ///DARKMODE FROM REDUX\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const canvasRef = useRef(null);\n  const [previewFilehold, setpreviewFilehold] = useState(null);\n  const [previewCSSHeight, setpreviewCSSHeight] = useState(null);\n  const [cropCanvasWidth, setcropCanvasWidth] = useState(null);\n  const [cropCanvasHeight, setcropCanvasHeight] = useState(null);\n  const [imageWidthWithAspectRatio, setimageWidthWithAspectRatio] = useState(null);\n  const [imageWidthWithAspectRatioxx, setimageWidthWithAspectRatioxx] = useState(null);\n  useLayoutEffect(() => {\n    const previewFileReadimage = new Image();\n    previewFileReadimage.src = image;\n\n    previewFileReadimage.onload = function () {\n      if (cropCanvasRef.current) {\n        setpreviewFilehold(previewFileReadimage);\n        var cropH, cropW;\n\n        if (CropImageHolder) {\n          cropW = cropCanvasRef.current.width;\n          cropH = cropCanvasRef.current.height;\n        } else {\n          cropW = previewFileReadimage.naturalWidth;\n          cropH = previewFileReadimage.naturalHeight;\n        }\n\n        if (cropW > cropH) {\n          var Ratio1500 = cropW / 1500;\n          var height1500 = cropH / Ratio1500;\n          setcropCanvasWidth(1500);\n          setcropCanvasHeight(height1500);\n        } else {\n          var Ratio1500 = cropH / 1500;\n          var width1500 = cropW / Ratio1500;\n          setcropCanvasWidth(width1500);\n          setcropCanvasHeight(1500);\n        }\n\n        let CropAspectRatio = cropwidth / cropheight;\n        let newheight = getpreviewFixedWidth / CropAspectRatio;\n        setpreviewCSSHeight(newheight);\n        let AspectRatioPrevHeightandWidth = previewFileReadimage.naturalHeight / previewFileReadimage.naturalWidth;\n        let newWidth = cropCanvasHeight / AspectRatioPrevHeightandWidth;\n        setimageWidthWithAspectRatio(newWidth);\n        let AspectRatioPrevHeightandWidthx = cropCanvasWidth / cropCanvasHeight;\n        let newWidthx = getpreviewFixedWidth / AspectRatioPrevHeightandWidthx;\n        setimageWidthWithAspectRatioxx(newWidthx);\n      }\n    };\n  }, [image, BoxCropActivated, previewCSSHeight, getpreviewFixedWidth, cropCanvasRef, CropImageHolder, cropwidth, cropheight, crop]);\n\n  const loader = () => {\n    if (allowCropAllCanvas) {\n      if (length - 1 === index) {\n        if (Timer1.current) {\n          clearTimeout(Timer1.current);\n        }\n\n        Timer1.current = setTimeout(function () {\n          setwaitONLOAD(false);\n          setsuperCropLoadFade(false);\n        }, length * 500);\n      }\n    }\n  };\n\n  useLayoutEffect(() => {\n    if (previewFilehold && canvasRef.current) {\n      const ctx = canvasRef.current.getContext(\"2d\");\n      canvasRef.current.height = cropCanvasHeight;\n      canvasRef.current.width = cropCanvasWidth;\n\n      if (BoxCropActivated) {\n        var CropAspectRatio = cropCanvasWidth / cropCanvasHeight;\n        var newheightq = getpreviewFixedWidth / CropAspectRatio;\n\n        if (previewFilehold.naturalWidth > previewFilehold.naturalHeight) {\n          var zoomINBOXWide = previewFilehold.naturalWidth / previewFilehold.naturalHeight;\n          let AspectRatioPrevHeightandWidthxWideCRop = previewFilehold.naturalWidth / previewFilehold.naturalHeight;\n          let boxWIDEheight = cropCanvasWidth * zoomINBOXWide / AspectRatioPrevHeightandWidthxWideCRop;\n          var centerpreview = canvasRef.current.width / 2 - cropCanvasWidth * zoomINBOXWide / 2;\n          var dragDistanceX = cropCanvasWidth * zoomINBOXWide - cropCanvasWidth;\n          var cropXprev = crop.x;\n          var RatiofromOriginalandfixedHeight = previewFilehold.naturalHeight / cropCanvasWidth * zoomINBOXWide;\n          var SourceWidthForCropXx = previewFilehold.naturalWidth / RatiofromOriginalandfixedHeight;\n          cropXprev = cropXprev * cropCanvasWidth * zoomINBOXWide / SourceWidthForCropX;\n\n          if (cropXprev < -dragDistanceX) {\n            cropXprev = -dragDistanceX;\n          } else if (cropXprev > 0) {\n            cropXprev = 0;\n          } else {} ////////////////////\n\n\n          requestAnimationFrame(() => {\n            ctx.drawImage(previewFilehold, WideImageCheck ? cropXprev : 0, 0, cropCanvasWidth * zoomINBOXWide, boxWIDEheight);\n          });\n          loader(); ////////////////////\n        } else {\n          let AspectRatioPrevHeightandWidthxBox = previewFilehold.naturalWidth / previewFilehold.naturalHeight;\n          let boxedHeight = cropCanvasWidth / AspectRatioPrevHeightandWidthxBox;\n          var dragDistanceY = boxedHeight - cropCanvasHeight;\n          var cropYprev = crop.y;\n          cropYprev = cropYprev * boxedHeight / SourceWidthForCropY;\n\n          if (cropYprev < -dragDistanceY) {\n            cropYprev = -dragDistanceY;\n          } else if (cropYprev > 0) {\n            cropYprev = 0;\n          } else {} ////////////////////\n\n\n          requestAnimationFrame(() => {\n            ctx.drawImage(previewFilehold, 0, WideImageCheck ? 0 : cropYprev, cropCanvasWidth, boxedHeight);\n          });\n          loader(); ////////////////////\n        }\n\n        canvasRef.current.style.width = `${getpreviewFixedWidth}px`;\n        canvasRef.current.style.height = `${newheightq}px`;\n      } else {\n        var xtraZoom = cropCanvasWidth / imageWidthWithAspectRatio;\n        var centerpreview = canvasRef.current.width / 2 - imageWidthWithAspectRatio / 2;\n        var centerpreview2 = canvasRef.current.height / 3 - cropCanvasHeight * xtraZoom / 3;\n\n        if (imageWidthWithAspectRatio < cropCanvasWidth) {\n          if (cropCanvasWidth > cropCanvasHeight) {\n            ////WIDE IMAGE SOURCE NOT PROPERLY FITTED\n            ////////////////////\n            requestAnimationFrame(() => {\n              ctx.drawImage(previewFilehold, 0, centerpreview2, imageWidthWithAspectRatio * xtraZoom, cropCanvasHeight * xtraZoom);\n            });\n            loader(); ////////////////////\n          } else {\n            ////LONG IMAGE SOURCE NOT PROPERLY FITTED\n            ////////////////////\n            requestAnimationFrame(() => {\n              ctx.drawImage(previewFilehold, 0, 0, imageWidthWithAspectRatio * xtraZoom, cropCanvasHeight * xtraZoom);\n            });\n            loader(); ////////////////////\n          }\n        } else {\n          ////////LONG IMAGE SOURCE WIDE IMAGE SOURCE\n          ////////////////////\n          requestAnimationFrame(() => {\n            ctx.drawImage(previewFilehold, centerpreview, 0, imageWidthWithAspectRatio, cropCanvasHeight);\n          });\n          loader(); ////////////////////\n        }\n\n        canvasRef.current.style.width = `${getpreviewFixedWidth}px`;\n        canvasRef.current.style.height = `${previewCSSHeight}px`;\n      }\n    }\n  }, [previewFilehold, canvasRef, CropImageHolder, cropCanvasWidth, cropCanvasHeight, imageWidthWithAspectRatio, WideImageCheck]);\n  const [callLayoutoNCE, setcallLayoutoNCE] = useState(true);\n  useLayoutEffect(() => {\n    if (canvasToimage && callLayoutoNCE && itemUploadRef.current[index] && canvasRef.current) {\n      itemUploadRef.current[index].src = canvasRef.current.toDataURL();\n      setcallLayoutoNCE(false);\n\n      if (length - 1 === index) {\n        setsuperCropLoadFade(false);\n        setallowFilters(true);\n      } ///////////////////////////////\n\n\n      const newArraa = [...filterImage];\n      newArraa[index] = canvasRef.current.toDataURL();\n      setfilterImage(newArraa); ///////////////////////////////\n    }\n  }, [canvasToimage, itemUploadRef, canvasRef]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        xs: 12,\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          ref: addUploadItemsRef,\n          style: {\n            width: \"100%\",\n            height: \"auto\",\n            position: \"relative\",\n            margin: \"auto\",\n            display: callLayoutoNCE ? \"none\" : \"block\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }, this), allowCropAllCanvas ? /*#__PURE__*/_jsxDEV(\"canvas\", {\n      className: darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\",\n      ref: canvasRef,\n      style: {\n        display: callLayoutoNCE ? \"block\" : \"none\",\n        padding: \"0px\",\n        marginTop: index === 0 || index === 1 || index === 2 ? \"0px\" : \"-5px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true);\n}\n\n_s(PreviewCanvasCropAllx, \"Y1+8UJXAjYTE4UUVQl0QtXSjnzo=\", false, function () {\n  return [useSelector];\n});\n\n_c = PreviewCanvasCropAllx;\nexport const PreviewCanvasCropAll = /*#__PURE__*/React.memo(PreviewCanvasCropAllx);\n_c2 = PreviewCanvasCropAll;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PreviewCanvasCropAllx\");\n$RefreshReg$(_c2, \"PreviewCanvasCropAll\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/upload/PreviewCanvasCropAll.tsx"],"names":["React","useRef","useState","useLayoutEffect","Grid","useSelector","PreviewCanvasCropAllx","setwaitONLOAD","cropCanvasRef","image","getpreviewFixedWidth","index","CropImageHolder","cropheight","cropwidth","BoxCropActivated","hdcanvasvalue","SourceWidthForCropX","SourceWidthForCropY","WideImageCheck","crop","getCropHeight","canvasToimage","refWithimageData","addUploadItemsRef","itemUploadRef","setsuperCropLoadFade","length","filterImage","setfilterImage","setallowFilters","allowCropAllCanvas","darkmode","state","GlobalReducer","darkmodeReducer","canvasRef","previewFilehold","setpreviewFilehold","previewCSSHeight","setpreviewCSSHeight","cropCanvasWidth","setcropCanvasWidth","cropCanvasHeight","setcropCanvasHeight","imageWidthWithAspectRatio","setimageWidthWithAspectRatio","imageWidthWithAspectRatioxx","setimageWidthWithAspectRatioxx","previewFileReadimage","Image","src","onload","current","cropH","cropW","width","height","naturalWidth","naturalHeight","Ratio1500","height1500","width1500","CropAspectRatio","newheight","AspectRatioPrevHeightandWidth","newWidth","AspectRatioPrevHeightandWidthx","newWidthx","loader","Timer1","clearTimeout","setTimeout","ctx","getContext","newheightq","zoomINBOXWide","AspectRatioPrevHeightandWidthxWideCRop","boxWIDEheight","centerpreview","dragDistanceX","cropXprev","x","RatiofromOriginalandfixedHeight","SourceWidthForCropXx","requestAnimationFrame","drawImage","AspectRatioPrevHeightandWidthxBox","boxedHeight","dragDistanceY","cropYprev","y","style","xtraZoom","centerpreview2","callLayoutoNCE","setcallLayoutoNCE","toDataURL","newArraa","position","margin","display","padding","marginTop","PreviewCanvasCropAll","memo"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect, useLayoutEffect } from \"react\";\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport Cropper from \"react-easy-crop\";\r\nimport MusicNoteIcon from \"@mui/icons-material/MusicNote\";\r\nimport PhotoIcon from \"@mui/icons-material/Photo\";\r\nimport GifIcon from \"@mui/icons-material/Gif\";\r\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\r\nimport Slider from \"@mui/material/Slider\";\r\nimport { AnySoaRecord } from \"dns\";\r\n\r\nfunction PreviewCanvasCropAllx({\r\n  setwaitONLOAD,\r\n  cropCanvasRef,\r\n  image,\r\n  getpreviewFixedWidth,\r\n  index,\r\n  CropImageHolder,\r\n  cropheight,\r\n  cropwidth,\r\n  BoxCropActivated,\r\n  hdcanvasvalue,\r\n  SourceWidthForCropX,\r\n  SourceWidthForCropY,\r\n  WideImageCheck,\r\n  crop,\r\n  getCropHeight,\r\n  canvasToimage,\r\n  refWithimageData,\r\n  addUploadItemsRef,\r\n  itemUploadRef,\r\n  setsuperCropLoadFade,\r\n  length,\r\n  filterImage,\r\n  setfilterImage,\r\n  setallowFilters,\r\n  allowCropAllCanvas,\r\n}: any): JSX.Element {\r\n  ///\r\n  ///\r\n  ///DARKMODE FROM REDUX\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n\r\n  const darkmodeReducer = darkmode;\r\n\r\n  const canvasRef: any = useRef(null);\r\n\r\n  const [previewFilehold, setpreviewFilehold] = useState<any>(null);\r\n\r\n  const [previewCSSHeight, setpreviewCSSHeight] = useState<any>(null);\r\n\r\n  const [cropCanvasWidth, setcropCanvasWidth] = useState<any>(null);\r\n\r\n  const [cropCanvasHeight, setcropCanvasHeight] = useState<any>(null);\r\n\r\n  const [imageWidthWithAspectRatio, setimageWidthWithAspectRatio] =\r\n    useState<any>(null);\r\n\r\n  const [imageWidthWithAspectRatioxx, setimageWidthWithAspectRatioxx] =\r\n    useState<any>(null);\r\n\r\n  useLayoutEffect(() => {\r\n    const previewFileReadimage = new Image();\r\n    previewFileReadimage.src = image;\r\n    previewFileReadimage.onload = function () {\r\n      if (cropCanvasRef.current) {\r\n        setpreviewFilehold(previewFileReadimage);\r\n\r\n        var cropH, cropW;\r\n        if (CropImageHolder) {\r\n          cropW = cropCanvasRef.current.width;\r\n          cropH = cropCanvasRef.current.height;\r\n        } else {\r\n          cropW = previewFileReadimage.naturalWidth;\r\n          cropH = previewFileReadimage.naturalHeight;\r\n        }\r\n\r\n        if (cropW > cropH) {\r\n          var Ratio1500 = cropW / 1500;\r\n          var height1500 = cropH / Ratio1500;\r\n\r\n          setcropCanvasWidth(1500);\r\n          setcropCanvasHeight(height1500);\r\n        } else {\r\n          var Ratio1500 = cropH / 1500;\r\n          var width1500 = cropW / Ratio1500;\r\n\r\n          setcropCanvasWidth(width1500);\r\n          setcropCanvasHeight(1500);\r\n        }\r\n\r\n        let CropAspectRatio = cropwidth / cropheight;\r\n        let newheight = getpreviewFixedWidth / CropAspectRatio;\r\n        setpreviewCSSHeight(newheight);\r\n\r\n        let AspectRatioPrevHeightandWidth =\r\n          previewFileReadimage.naturalHeight /\r\n          previewFileReadimage.naturalWidth;\r\n        let newWidth = cropCanvasHeight / AspectRatioPrevHeightandWidth;\r\n        setimageWidthWithAspectRatio(newWidth);\r\n\r\n        let AspectRatioPrevHeightandWidthx = cropCanvasWidth / cropCanvasHeight;\r\n        let newWidthx = getpreviewFixedWidth / AspectRatioPrevHeightandWidthx;\r\n        setimageWidthWithAspectRatioxx(newWidthx);\r\n      }\r\n    };\r\n  }, [\r\n    image,\r\n    BoxCropActivated,\r\n    previewCSSHeight,\r\n    getpreviewFixedWidth,\r\n    cropCanvasRef,\r\n    CropImageHolder,\r\n    cropwidth,\r\n    cropheight,\r\n    crop,\r\n  ]);\r\n\r\n  const loader = () => {\r\n    if (allowCropAllCanvas) {\r\n      if (length - 1 === index) {\r\n        if (Timer1.current) {\r\n          clearTimeout(Timer1.current);\r\n        }\r\n\r\n        Timer1.current = setTimeout(function () {\r\n          setwaitONLOAD(false);\r\n          setsuperCropLoadFade(false);\r\n        }, length * 500);\r\n      }\r\n    }\r\n  };\r\n\r\n  useLayoutEffect(() => {\r\n    if (previewFilehold && canvasRef.current) {\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n\r\n      canvasRef.current.height = cropCanvasHeight;\r\n      canvasRef.current.width = cropCanvasWidth;\r\n\r\n      if (BoxCropActivated) {\r\n        var CropAspectRatio = cropCanvasWidth / cropCanvasHeight;\r\n        var newheightq = getpreviewFixedWidth / CropAspectRatio;\r\n\r\n        if (previewFilehold.naturalWidth > previewFilehold.naturalHeight) {\r\n          var zoomINBOXWide =\r\n            previewFilehold.naturalWidth / previewFilehold.naturalHeight;\r\n\r\n          let AspectRatioPrevHeightandWidthxWideCRop =\r\n            previewFilehold.naturalWidth / previewFilehold.naturalHeight;\r\n          let boxWIDEheight =\r\n            (cropCanvasWidth * zoomINBOXWide) /\r\n            AspectRatioPrevHeightandWidthxWideCRop;\r\n\r\n          var centerpreview =\r\n            canvasRef.current.width / 2 - (cropCanvasWidth * zoomINBOXWide) / 2;\r\n\r\n          var dragDistanceX = cropCanvasWidth * zoomINBOXWide - cropCanvasWidth;\r\n          var cropXprev = crop.x;\r\n\r\n          var RatiofromOriginalandfixedHeight =\r\n            (previewFilehold.naturalHeight / cropCanvasWidth) * zoomINBOXWide;\r\n          var SourceWidthForCropXx =\r\n            previewFilehold.naturalWidth / RatiofromOriginalandfixedHeight;\r\n\r\n          cropXprev =\r\n            (cropXprev * cropCanvasWidth * zoomINBOXWide) / SourceWidthForCropX;\r\n\r\n          if (cropXprev < -dragDistanceX) {\r\n            cropXprev = -dragDistanceX;\r\n          } else if (cropXprev > 0) {\r\n            cropXprev = 0;\r\n          } else {\r\n          }\r\n\r\n          ////////////////////\r\n          requestAnimationFrame(() => {\r\n            ctx.drawImage(\r\n              previewFilehold,\r\n              WideImageCheck ? cropXprev : 0,\r\n              0,\r\n              cropCanvasWidth * zoomINBOXWide,\r\n              boxWIDEheight\r\n            );\r\n          });\r\n\r\n          loader();\r\n          ////////////////////\r\n        } else {\r\n          let AspectRatioPrevHeightandWidthxBox =\r\n            previewFilehold.naturalWidth / previewFilehold.naturalHeight;\r\n          let boxedHeight = cropCanvasWidth / AspectRatioPrevHeightandWidthxBox;\r\n\r\n          var dragDistanceY = boxedHeight - cropCanvasHeight;\r\n\r\n          var cropYprev = crop.y;\r\n\r\n          cropYprev = (cropYprev * boxedHeight) / SourceWidthForCropY;\r\n\r\n          if (cropYprev < -dragDistanceY) {\r\n            cropYprev = -dragDistanceY;\r\n          } else if (cropYprev > 0) {\r\n            cropYprev = 0;\r\n          } else {\r\n          }\r\n\r\n          ////////////////////\r\n          requestAnimationFrame(() => {\r\n            ctx.drawImage(\r\n              previewFilehold,\r\n              0,\r\n              WideImageCheck ? 0 : cropYprev,\r\n              cropCanvasWidth,\r\n              boxedHeight\r\n            );\r\n          });\r\n\r\n          loader();\r\n          ////////////////////\r\n        }\r\n\r\n        canvasRef.current.style.width = `${getpreviewFixedWidth}px`;\r\n        canvasRef.current.style.height = `${newheightq}px`;\r\n      } else {\r\n        var xtraZoom = cropCanvasWidth / imageWidthWithAspectRatio;\r\n\r\n        var centerpreview =\r\n          canvasRef.current.width / 2 - imageWidthWithAspectRatio / 2;\r\n\r\n        var centerpreview2 =\r\n          canvasRef.current.height / 3 - (cropCanvasHeight * xtraZoom) / 3;\r\n\r\n        if (imageWidthWithAspectRatio < cropCanvasWidth) {\r\n          if (cropCanvasWidth > cropCanvasHeight) {\r\n            ////WIDE IMAGE SOURCE NOT PROPERLY FITTED\r\n\r\n            ////////////////////\r\n            requestAnimationFrame(() => {\r\n              ctx.drawImage(\r\n                previewFilehold,\r\n                0,\r\n                centerpreview2,\r\n                imageWidthWithAspectRatio * xtraZoom,\r\n                cropCanvasHeight * xtraZoom\r\n              );\r\n            });\r\n\r\n            loader();\r\n            ////////////////////\r\n          } else {\r\n            ////LONG IMAGE SOURCE NOT PROPERLY FITTED\r\n\r\n            ////////////////////\r\n            requestAnimationFrame(() => {\r\n              ctx.drawImage(\r\n                previewFilehold,\r\n                0,\r\n                0,\r\n                imageWidthWithAspectRatio * xtraZoom,\r\n                cropCanvasHeight * xtraZoom\r\n              );\r\n            });\r\n\r\n            loader();\r\n            ////////////////////\r\n          }\r\n        } else {\r\n          ////////LONG IMAGE SOURCE WIDE IMAGE SOURCE\r\n\r\n          ////////////////////\r\n          requestAnimationFrame(() => {\r\n            ctx.drawImage(\r\n              previewFilehold,\r\n              centerpreview,\r\n              0,\r\n              imageWidthWithAspectRatio,\r\n              cropCanvasHeight\r\n            );\r\n          });\r\n\r\n          loader();\r\n          ////////////////////\r\n        }\r\n        canvasRef.current.style.width = `${getpreviewFixedWidth}px`;\r\n        canvasRef.current.style.height = `${previewCSSHeight}px`;\r\n      }\r\n    }\r\n  }, [\r\n    previewFilehold,\r\n    canvasRef,\r\n    CropImageHolder,\r\n    cropCanvasWidth,\r\n    cropCanvasHeight,\r\n    imageWidthWithAspectRatio,\r\n    WideImageCheck,\r\n  ]);\r\n\r\n  const [callLayoutoNCE, setcallLayoutoNCE] = useState<any>(true);\r\n\r\n  useLayoutEffect(() => {\r\n    if (\r\n      canvasToimage &&\r\n      callLayoutoNCE &&\r\n      itemUploadRef.current[index] &&\r\n      canvasRef.current\r\n    ) {\r\n      itemUploadRef.current[index].src = canvasRef.current.toDataURL();\r\n\r\n      setcallLayoutoNCE(false);\r\n\r\n      if (length - 1 === index) {\r\n        setsuperCropLoadFade(false);\r\n        setallowFilters(true);\r\n      }\r\n\r\n      ///////////////////////////////\r\n      const newArraa = [...filterImage];\r\n      newArraa[index] = canvasRef.current.toDataURL();\r\n      setfilterImage(newArraa);\r\n      ///////////////////////////////\r\n    }\r\n  }, [canvasToimage, itemUploadRef, canvasRef]);\r\n\r\n  return (\r\n    <>\r\n      <Grid container>\r\n        <Grid xs={12} item>\r\n          <img\r\n            ref={addUploadItemsRef}\r\n            style={{\r\n              width: \"100%\",\r\n              height: \"auto\",\r\n              position: \"relative\",\r\n              margin: \"auto\",\r\n              display: callLayoutoNCE ? \"none\" : \"block\",\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {allowCropAllCanvas ? (\r\n        <canvas\r\n          className={\r\n            darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\"\r\n          }\r\n          ref={canvasRef}\r\n          style={{\r\n            display: callLayoutoNCE ? \"block\" : \"none\",\r\n\r\n            padding: \"0px\",\r\n            marginTop:\r\n              index === 0 || index === 1 || index === 2 ? \"0px\" : \"-5px\",\r\n          }}\r\n        />\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport const PreviewCanvasCropAll = React.memo(PreviewCanvasCropAllx);\r\n"]},"metadata":{},"sourceType":"module"}