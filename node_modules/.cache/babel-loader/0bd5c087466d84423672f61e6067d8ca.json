{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\upload\\\\SuperCrop.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { matchPc } from \"../DetectDevice\";\nimport { Grid } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport Masonry from \"@mui/lab/Masonry\";\nimport Cropper from \"react-easy-crop\";\nimport Slider from \"@mui/material/Slider\";\nimport { PreviewCanvas } from \"./PreviewCanvas\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction SuperCropx({\n  cropimage,\n  selectedImage\n}) {\n  _s();\n\n  ///\n  ///\n  ///\n  ///\n  const [previmage, setprevimage] = useState([]);\n  const [image, setimage] = useState([]);\n  const [imageWidth, setimageWidth] = useState([]);\n  const [imageHeight, setimageHeight] = useState([]); ////\n  ////\n  ////\n\n  const [cropArea, setcropArea] = useState(null);\n  const [crop, setcrop] = useState({\n    x: 0,\n    y: 0\n  });\n  const [zoom, setzoom] = useState(1);\n\n  const onCropComplete = (croppedAreaPercentage, croppedAreaPixels) => {\n    setcropArea(croppedAreaPixels);\n    console.log(croppedAreaPercentage);\n  }; ///\n  ///\n  ///DARKMODE FROM REDUX\n\n\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const getSliderWidthRef = useRef(null);\n  const [getSliderWidth, setgetSliderWidth] = useState(0); ///\n  ///\n  ///\n  ///GET OPTIONS SLIDER IMAGE WIDTH FROM MATERIAL UI GRID\n\n  useEffect(() => {\n    if (getSliderWidthRef.current && getSliderWidthRef.current.clientWidth) {\n      setgetSliderWidth(getSliderWidthRef.current.clientWidth);\n    }\n  }, []); ///\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      style: {\n        position: \"relative\",\n        width: \"100%\",\n        height: \"70%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        className: \"container-cropper\",\n        children: [/*#__PURE__*/_jsxDEV(Cropper, {\n          image: cropimage,\n          crop: crop,\n          zoom: zoom,\n          aspect: 4 / 4,\n          onCropChange: setcrop,\n          onCropComplete: onCropComplete,\n          onZoomChange: setzoom\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Slider, {\n          min: 1,\n          max: 3,\n          step: 0.001,\n          value: zoom,\n          onChange: (e, zoom) => {\n            setzoom(zoom);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      style: {\n        padding: \"0px\",\n        backgroundColor: \"#00ccff\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        ref: getSliderWidthRef,\n        xs: 4,\n        style: {\n          padding: \"0px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Masonry, {\n      columns: matchPc ? 3 : 1,\n      spacing: 0,\n      children: [selectedImage ? selectedImage.map((photo, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(PreviewCanvas, {\n            image: photo,\n            getSliderWidth: getSliderWidth\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 19\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 17\n        }, this);\n      }) : null, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(SuperCropx, \"9A29m9WJ/VLLC9SWOHmzSq2hLwc=\", false, function () {\n  return [useSelector];\n});\n\n_c = SuperCropx;\nexport const SuperCrop = /*#__PURE__*/React.memo(SuperCropx);\n_c2 = SuperCrop;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SuperCropx\");\n$RefreshReg$(_c2, \"SuperCrop\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/upload/SuperCrop.tsx"],"names":["React","useRef","useState","useEffect","matchPc","Grid","useSelector","Masonry","Cropper","Slider","PreviewCanvas","SuperCropx","cropimage","selectedImage","previmage","setprevimage","image","setimage","imageWidth","setimageWidth","imageHeight","setimageHeight","cropArea","setcropArea","crop","setcrop","x","y","zoom","setzoom","onCropComplete","croppedAreaPercentage","croppedAreaPixels","console","log","darkmode","state","GlobalReducer","darkmodeReducer","getSliderWidthRef","getSliderWidth","setgetSliderWidth","current","clientWidth","position","width","height","e","padding","backgroundColor","map","photo","index","SuperCrop","memo"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport Cropper from \"react-easy-crop\";\r\nimport MusicNoteIcon from \"@mui/icons-material/MusicNote\";\r\nimport PhotoIcon from \"@mui/icons-material/Photo\";\r\nimport GifIcon from \"@mui/icons-material/Gif\";\r\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\r\nimport Slider from \"@mui/material/Slider\";\r\nimport { AnySoaRecord } from \"dns\";\r\nimport { PreviewCanvas } from \"./PreviewCanvas\";\r\n\r\nfunction SuperCropx({ cropimage, selectedImage }: any): JSX.Element {\r\n  ///\r\n  ///\r\n  ///\r\n  ///\r\n  const [previmage, setprevimage] = useState<Array<any>>([]);\r\n  const [image, setimage] = useState<Array<any>>([]);\r\n  const [imageWidth, setimageWidth] = useState<Array<any>>([]);\r\n  const [imageHeight, setimageHeight] = useState<Array<any>>([]);\r\n\r\n  ////\r\n  ////\r\n  ////\r\n  const [cropArea, setcropArea] = useState<any>(null);\r\n  const [crop, setcrop] = useState<any>({ x: 0, y: 0 });\r\n  const [zoom, setzoom] = useState(1);\r\n\r\n  const onCropComplete = (\r\n    croppedAreaPercentage: any,\r\n    croppedAreaPixels: any\r\n  ) => {\r\n    setcropArea(croppedAreaPixels);\r\n    console.log(croppedAreaPercentage);\r\n  };\r\n\r\n  ///\r\n  ///\r\n  ///DARKMODE FROM REDUX\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n\r\n  const darkmodeReducer = darkmode;\r\n\r\n  const getSliderWidthRef = useRef<HTMLDivElement>(null);\r\n  const [getSliderWidth, setgetSliderWidth] = useState(0);\r\n  ///\r\n  ///\r\n  ///\r\n  ///GET OPTIONS SLIDER IMAGE WIDTH FROM MATERIAL UI GRID\r\n  useEffect(() => {\r\n    if (getSliderWidthRef.current && getSliderWidthRef.current.clientWidth) {\r\n      setgetSliderWidth(getSliderWidthRef.current.clientWidth);\r\n    }\r\n  }, []);\r\n  ///\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        style={{ position: \"relative\", width: \"100%\", height: \"70%\" }}\r\n      >\r\n        <Grid item xs={12} className=\"container-cropper\">\r\n          <Cropper\r\n            image={cropimage}\r\n            crop={crop}\r\n            zoom={zoom}\r\n            aspect={4 / 4}\r\n            onCropChange={setcrop}\r\n            onCropComplete={onCropComplete}\r\n            onZoomChange={setzoom}\r\n          />\r\n\r\n          <Slider\r\n            min={1}\r\n            max={3}\r\n            step={0.001}\r\n            value={zoom}\r\n            onChange={(e: any, zoom: any) => {\r\n              setzoom(zoom);\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid\r\n        item\r\n        xs={12}\r\n        style={{\r\n          padding: \"0px\",\r\n          backgroundColor: \"#00ccff\",\r\n        }}\r\n      >\r\n        <Grid\r\n          item\r\n          ref={getSliderWidthRef}\r\n          xs={4}\r\n          style={{\r\n            padding: \"0px\",\r\n          }}\r\n        ></Grid>\r\n      </Grid>\r\n      <Masonry columns={matchPc ? 3 : 1} spacing={0}>\r\n        {selectedImage\r\n          ? selectedImage.map((photo: any, index: any) => {\r\n              return (\r\n                <div key={index}>\r\n                  <PreviewCanvas\r\n                    image={photo}\r\n                    getSliderWidth={getSliderWidth}\r\n                  />\r\n                </div>\r\n              );\r\n            })\r\n          : null}{\" \"}\r\n      </Masonry>\r\n    </>\r\n  );\r\n}\r\n\r\nexport const SuperCrop = React.memo(SuperCropx);\r\n"]},"metadata":{},"sourceType":"module"}