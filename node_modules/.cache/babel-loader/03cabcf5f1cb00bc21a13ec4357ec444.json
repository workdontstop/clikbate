{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\app-folder\\\\LogButtons.tsx\";\nimport React from \"react\";\nimport { Grid, Button } from \"@material-ui/core\";\nimport { isBrowser, isTablet } from \"react-device-detect\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction LoginButtonsx({\n  signupstyle,\n  match,\n  OpenModalForm\n}) {\n  var matchPc = isBrowser;\n  var matchTablet = isTablet;\n  var loginButtonStyle = \"\";\n  var signupButtonStyle = \"\"; ///\n  ///\n  ///\n  ///CONDITIONAL STATEMENT FOR DEVICE TYPE\n\n  if (matchPc) {\n    loginButtonStyle = \"containerapp\"; ///\n  } else if (matchTablet) {\n    loginButtonStyle = \"containerapp\"; ///\n  } else {\n    containerApp = \"containerappmobile\";\n    icon = \"iconMobile\";\n    littleText = \"littletext-Mobile\";\n    buttonFont = \"\";\n    buttonTransform = \"scale(0.95)\";\n  }\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    className: match ? \"containerloginpc\" : \"containerloginmobile \",\n    item: true,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      sm: 3,\n      md: 5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      className: \"buttonpad buttonshake\",\n      xs: 12,\n      sm: 6,\n      md: 2,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => OpenModalForm(1),\n        style: loginstyle,\n        fullWidth: true,\n        variant: \"outlined\",\n        size: \"large\",\n        color: \"primary\",\n        children: \"Log In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      sm: 12,\n      className: \"logbuttonspace\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      sm: 3,\n      md: 5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      className: \"buttonpad buttonshake\",\n      xs: 12,\n      sm: 6,\n      md: 2,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => OpenModalForm(0),\n        style: signupstyle,\n        fullWidth: true,\n        variant: \"contained\",\n        size: \"large\",\n        color: \"secondary\",\n        children: [\" \", \"Sign Up\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n\n_c = LoginButtonsx;\nexport const LoginButtons = /*#__PURE__*/React.memo(LoginButtonsx);\n_c2 = LoginButtons;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"LoginButtonsx\");\n$RefreshReg$(_c2, \"LoginButtons\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/app-folder/LogButtons.tsx"],"names":["React","Grid","Button","isBrowser","isTablet","LoginButtonsx","signupstyle","match","OpenModalForm","matchPc","matchTablet","loginButtonStyle","signupButtonStyle","containerApp","icon","littleText","buttonFont","buttonTransform","loginstyle","LoginButtons","memo"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Grid, Button } from \"@material-ui/core\";\r\nimport { ILogButtons } from \"./appFolder-Interfaces\";\r\nimport { isBrowser, isTablet } from \"react-device-detect\";\r\n\r\nfunction LoginButtonsx({ signupstyle, match, OpenModalForm }: ILogButtons) {\r\n  var matchPc = isBrowser;\r\n  var matchTablet = isTablet;\r\n\r\n  var loginButtonStyle = \"\";\r\n  var signupButtonStyle = \"\";\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  ///CONDITIONAL STATEMENT FOR DEVICE TYPE\r\n  if (matchPc) {\r\n    loginButtonStyle = \"containerapp\";\r\n\r\n    ///\r\n  } else if (matchTablet) {\r\n    loginButtonStyle = \"containerapp\";\r\n\r\n    ///\r\n  } else {\r\n    containerApp = \"containerappmobile\";\r\n    icon = \"iconMobile\";\r\n    littleText = \"littletext-Mobile\";\r\n    buttonFont = \"\";\r\n    buttonTransform = \"scale(0.95)\";\r\n  }\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      className={match ? \"containerloginpc\" : \"containerloginmobile \"}\r\n      item\r\n    >\r\n      <Grid item sm={3} md={5}></Grid>\r\n      <Grid item className=\"buttonpad buttonshake\" xs={12} sm={6} md={2}>\r\n        <Button\r\n          onClick={() => OpenModalForm(1)}\r\n          style={loginstyle}\r\n          fullWidth={true}\r\n          variant=\"outlined\"\r\n          size=\"large\"\r\n          color=\"primary\"\r\n        >\r\n          Log In\r\n        </Button>\r\n      </Grid>\r\n      <Grid item sm={12} className=\"logbuttonspace\"></Grid>\r\n\r\n      <Grid item sm={3} md={5}></Grid>\r\n      <Grid item className=\"buttonpad buttonshake\" xs={12} sm={6} md={2}>\r\n        <Button\r\n          onClick={() => OpenModalForm(0)}\r\n          style={signupstyle}\r\n          fullWidth={true}\r\n          variant=\"contained\"\r\n          size=\"large\"\r\n          color=\"secondary\"\r\n        >\r\n          {\" \"}\r\n          Sign Up\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport const LoginButtons = React.memo(LoginButtonsx);\r\n"]},"metadata":{},"sourceType":"module"}