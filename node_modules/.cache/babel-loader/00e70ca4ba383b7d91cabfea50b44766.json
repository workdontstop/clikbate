{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oghen\\\\OneDrive\\\\Documents\\\\ClikBate\\\\super\\\\src\\\\profile\\\\TaskbarCrop.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useCallback, useState } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Masonry from \"@mui/lab/Masonry\";\nimport DoneOutlineIcon from '@mui/icons-material/DoneOutline';\nimport CloseIcon from '@mui/icons-material/Close';\nimport AspectRatioIcon from '@mui/icons-material/AspectRatio';\nimport Cropper from \"react-easy-crop\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction TaskbarCropx({\n  showModalUploadTask,\n  uploadClose,\n  setfinalimage,\n  finalImage,\n  setHidecropper,\n  hideCrop,\n  sethideCrop\n}) {\n  _s();\n\n  const dispatch = useDispatch();\n  const canRef = useRef(null); ///\n  ///\n  ///\n  /// INTERFACE/TYPES FOR SCREENHEIGHT AND DARKMODE\n\n  ///\n  ///\n  ///\n  /// GET DARKMODE FROM REDUX STORE\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const {\n    activatefilterImage,\n    activatecropImage,\n    selectedImage,\n    cropimage\n  } = useSelector(state => ({ ...state.GlobalNavuploadReducer\n  }));\n  const activatefilterImageReducer = activatefilterImage;\n  const activatecropImageReducer = activatecropImage;\n  const selectedImageReducer = selectedImage;\n  const cropimageReducer = cropimage;\n  const cropCanvasRef = useRef(null);\n  const cropCanvasRefx = useRef(null);\n  const navRef = useRef(null);\n  const IconRef = useRef(null);\n  const IconRef2 = useRef(null);\n  const [allowCropAllCanvas, setallowCropAllCanvas] = useState(true);\n  const [CropImageHolder, setCropImageHolder] = useState(null);\n  const [FinalCropImageHolder, setFinalCropImageHolder] = useState(null);\n  const [imageHeight, setimageHeight] = useState(0);\n  const [imageWidth, setimageWidth] = useState(0);\n  const [Box, setBox] = useState(false);\n  const [final, setFinal] = useState(false);\n  const [cropInitial, setcropInitial] = useState({\n    x: 0,\n    y: 0\n  });\n  const [cropInitialx, setcropInitialx] = useState({\n    x: 0,\n    y: 0\n  });\n  const [cropOffset, setcropOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [Drag, setDrag] = useState(false);\n  const [cropx, setcropx] = useState({\n    x: 0,\n    y: 0\n  });\n  const allowscrolltimer = useRef(null);\n  var extendxy = 3.3;\n  const [allowOverflow, setallowOverflow] = useState(false);\n  const [optionscropshow, setoptionscropshow] = useState(true);\n  const [optionscropshow2, setoptionscropshow2] = useState(true);\n  const [SaveCropData, setSaveCropData] = useState(false);\n  const [CropImage, setcropImage] = useState(null);\n  const [multiPost, setmultiPost] = useState(false);\n  const [prevImage, setprevimage] = useState([]);\n  const menuTimer5 = useRef(null);\n  const [NewCanH, setNewCanH] = useState(0);\n  const [NewCanW, setNewCanW] = useState(0);\n  const [crop, setCrop] = useState({\n    x: 0,\n    y: 0\n  });\n  const [crop2, setCrop2] = useState({\n    x: 0,\n    y: 0\n  });\n  const [crop3, setCrop3] = useState({\n    x: 0,\n    y: 0\n  });\n  const [zoom, setZoom] = useState(1);\n  const [count, setcount] = useState(1);\n  useEffect(() => {\n    setprevimage(selectedImageReducer);\n    setcropImage(selectedImageReducer[0]);\n    sethideCrop(false);\n    setRay([]);\n    setcount(0);\n    setfinalimage([]);\n  }, [selectedImageReducer, showModalUploadTask]);\n  const [croppedImage, setCroppedImage] = useState(null);\n  const cropperRef = useRef(null);\n  const [ray, setRay] = useState([]);\n  const onCropComplete = useCallback(async (_, croppedAreaPixels) => {\n    const canvas = document.createElement('canvas');\n    const imageRef = document.createElement('img');\n    imageRef.src = CropImage;\n    const scaleX = imageRef.naturalWidth / imageRef.width;\n    const scaleY = imageRef.naturalHeight / imageRef.height;\n    canvas.width = croppedAreaPixels.width;\n    canvas.height = croppedAreaPixels.height;\n    const ctx = canvas.getContext('2d');\n\n    if (ctx) {\n      try {\n        imageRef.onload = () => {\n          requestAnimationFrame(() => {\n            ctx.drawImage(imageRef, croppedAreaPixels.x * scaleX, croppedAreaPixels.y * scaleY, croppedAreaPixels.width * scaleX, croppedAreaPixels.height * scaleY, 0, 0, croppedAreaPixels.width, croppedAreaPixels.height);\n\n            if (count > 0 && SaveCropData) {\n              const dataUrl = canvas.toDataURL('image/png');\n              const g = count - 1;\n\n              if (ray[g]) {// Do something if ray[g] already exists\n              } else {\n                const updatedRay = [...ray];\n                updatedRay[g] = dataUrl;\n\n                if (selectedImageReducer.length === count) {\n                  console.log(updatedRay);\n                  setfinalimage(updatedRay);\n                  setHidecropper(true);\n                } else {\n                  setRay(updatedRay);\n                }\n              }\n            }\n          });\n        };\n      } catch (error) {\n        console.error('Error while cropping the image:', error);\n      }\n    }\n  }, [CropImage, count, SaveCropData, ray]);\n  const [ratio, setratio] = useState(2);\n  const add = useCallback(() => {\n    setratio(ratio + 0.5);\n\n    if (ratio >= 4) {\n      setratio(2);\n    }\n  }, [ratio]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      style: {\n        padding: \"0px\",\n        width: '100%',\n        height: \"100%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        ref: navRef,\n        item: true,\n        xs: 12,\n        style: {\n          padding: \"0px\",\n          width: '94%',\n          height: multiPost ? \"80%\" : '100%',\n          position: 'fixed',\n          top: '-20000000000px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 17\n      }, this), croppedImage && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: croppedImage,\n        alt: \"Cropped Image\",\n        style: {\n          position: 'fixed',\n          top: '20vh',\n          zIndex: 30000000,\n          width: '20%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        style: {\n          padding: \"0px\",\n          filter: hideCrop ? SaveCropData ? 'brightness(0.8) blur(8px)' : 'brightness(1) blur(0px)' : 'brightness(0.8) blur(8px)'\n        },\n        children: prevImage.length > 1 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Masonry, {\n            columns: 3,\n            spacing: 0,\n            style: {\n              padding: \"0px\",\n              overflow: 'hidden'\n            },\n            children: prevImage.map((picture, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n              onClick: () => {\n                setcount(index + 1);\n                navRef.current.scrollIntoView({\n                  behavior: \"smooth\",\n                  block: \"start\"\n                });\n                setcropImage(picture);\n                sethideCrop(false);\n              },\n              style: {\n                width: '50%',\n                cursor: 'pointer'\n              },\n              src: picture,\n              alt: `Image ${index}`\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 29\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 47\n          }, this)\n        }, void 0, false) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canRef,\n          style: {\n            padding: \"0px\",\n            display: \"none\",\n            position: \"fixed\",\n            top: \"-400%\",\n            zIndex: 0,\n            visibility: \"hidden\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: hideCrop ? 'none' : 'block',\n            visibility: SaveCropData ? 'hidden' : 'visible'\n          },\n          children: /*#__PURE__*/_jsxDEV(Cropper, {\n            ref: cropperRef,\n            image: CropImage,\n            crop: crop,\n            zoom: zoom,\n            aspect: ratio / 2.8,\n            onCropChange: setCrop,\n            onCropComplete: onCropComplete,\n            onZoomChange: setZoom\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CloseIcon, {\n        onClick: () => {\n          sethideCrop(true);\n        },\n        className: darkmodeReducer ? \"make-small-icons-clickable-darkab dontallowhighlighting zuperkingIcon \" : \"make-small-icons-clickable-lightab  dontallowhighlighting zuperkingIcon  \",\n        style: {\n          color: \"#ffffff\",\n          fontSize: \"3.8vw\",\n          position: \"absolute\",\n          opacity: optionscropshow2 ? 0.94 : 0,\n          borderRadius: '70%',\n          top: '3.8vh',\n          left: '2%',\n          right: \"\",\n          display: optionscropshow ? hideCrop ? 'none' : SaveCropData ? 'none' : 'block' : 'none'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AspectRatioIcon, {\n        onClick: () => {\n          add();\n        },\n        className: darkmodeReducer ? \"make-small-icons-clickable-darkab dontallowhighlighting zuperkingIcon \" : \"make-small-icons-clickable-lightab  dontallowhighlighting zuperkingIcon  \",\n        style: {\n          color: \"#ffffff\",\n          fontSize: \"3.8vw\",\n          position: \"absolute\",\n          opacity: optionscropshow2 ? 0.94 : 0,\n          borderRadius: '70%',\n          top: '3.8vh',\n          left: '48%',\n          right: \"\",\n          display: optionscropshow ? hideCrop ? 'none' : SaveCropData ? 'none' : 'block' : 'none'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DoneOutlineIcon, {\n        onClick: () => {\n          setcropImage([]);\n          setSaveCropData(true);\n\n          for (let x = 0; x <= selectedImageReducer.length - 1; x++) {\n            var xy = x + 1;\n            var xx = xy * 1500;\n            setTimeout(() => {\n              setcount(x + 1);\n              setcropImage(selectedImageReducer[x]);\n            }, xx);\n          }\n        },\n        className: darkmodeReducer ? \"make-small-icons-clickable-darkab dontallowhighlighting zuperkingIcon \" : \"make-small-icons-clickable-lightab  dontallowhighlighting zuperkingIcon  \",\n        style: {\n          color: \"#ffffff\",\n          fontSize: \"3.8vw\",\n          position: \"absolute\",\n          opacity: optionscropshow2 ? 0.94 : 0,\n          borderRadius: '70%',\n          top: '3.8vh',\n          left: '94%',\n          right: \"\",\n          display: optionscropshow ? hideCrop ? 'none' : SaveCropData ? 'none' : 'block' : 'none'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(TaskbarCropx, \"T+3adom5v0efl22BCRhfd0Uof8w=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = TaskbarCropx;\nexport const TaskbarCrop = /*#__PURE__*/React.memo(TaskbarCropx);\n_c2 = TaskbarCrop;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TaskbarCropx\");\n$RefreshReg$(_c2, \"TaskbarCrop\");","map":{"version":3,"sources":["C:/Users/oghen/OneDrive/Documents/ClikBate/super/src/profile/TaskbarCrop.tsx"],"names":["React","useRef","useEffect","useCallback","useState","Grid","useSelector","useDispatch","Masonry","DoneOutlineIcon","CloseIcon","AspectRatioIcon","Cropper","TaskbarCropx","showModalUploadTask","uploadClose","setfinalimage","finalImage","setHidecropper","hideCrop","sethideCrop","dispatch","canRef","darkmode","state","GlobalReducer","darkmodeReducer","activatefilterImage","activatecropImage","selectedImage","cropimage","GlobalNavuploadReducer","activatefilterImageReducer","activatecropImageReducer","selectedImageReducer","cropimageReducer","cropCanvasRef","cropCanvasRefx","navRef","IconRef","IconRef2","allowCropAllCanvas","setallowCropAllCanvas","CropImageHolder","setCropImageHolder","FinalCropImageHolder","setFinalCropImageHolder","imageHeight","setimageHeight","imageWidth","setimageWidth","Box","setBox","final","setFinal","cropInitial","setcropInitial","x","y","cropInitialx","setcropInitialx","cropOffset","setcropOffset","Drag","setDrag","cropx","setcropx","allowscrolltimer","extendxy","allowOverflow","setallowOverflow","optionscropshow","setoptionscropshow","optionscropshow2","setoptionscropshow2","SaveCropData","setSaveCropData","CropImage","setcropImage","multiPost","setmultiPost","prevImage","setprevimage","menuTimer5","NewCanH","setNewCanH","NewCanW","setNewCanW","crop","setCrop","crop2","setCrop2","crop3","setCrop3","zoom","setZoom","count","setcount","setRay","croppedImage","setCroppedImage","cropperRef","ray","onCropComplete","_","croppedAreaPixels","canvas","document","createElement","imageRef","src","scaleX","naturalWidth","width","scaleY","naturalHeight","height","ctx","getContext","onload","requestAnimationFrame","drawImage","dataUrl","toDataURL","g","updatedRay","length","console","log","error","ratio","setratio","add","padding","position","top","zIndex","filter","overflow","map","picture","index","current","scrollIntoView","behavior","block","cursor","display","visibility","color","fontSize","opacity","borderRadius","left","right","xy","xx","setTimeout","TaskbarCrop","memo"],"mappings":";;;AAAA,OAAOA,KAAP,IACIC,MADJ,EAEIC,SAFJ,EAGIC,WAHJ,EAIIC,QAJJ,QAMO,OANP;AAQA,SAASC,IAAT,QAA4C,mBAA5C;AAIA,SAAyBC,WAAzB,EAAsCC,WAAtC,QAAyD,aAAzD;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,eAAP,MAA4B,iCAA5B;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AAIA,OAAOC,eAAP,MAA4B,iCAA5B;AAKA,OAAOC,OAAP,MAAoB,iBAApB;;;;AAKA,SAASC,YAAT,CAAsB;AAClBC,EAAAA,mBADkB;AAElBC,EAAAA,WAFkB;AAGlBC,EAAAA,aAHkB;AAIlBC,EAAAA,UAJkB;AAKlBC,EAAAA,cALkB;AAMlBC,EAAAA,QANkB;AAOlBC,EAAAA;AAPkB,CAAtB,EASqB;AAAA;;AACjB,QAAMC,QAAQ,GAAGd,WAAW,EAA5B;AAGA,QAAMe,MAAW,GAAGrB,MAAM,CAAC,IAAD,CAA1B,CAJiB,CAMjB;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;AACA,QAAM;AAAEsB,IAAAA;AAAF,MAAejB,WAAW,CAAEkB,KAAD,KAAoC,EACjE,GAAGA,KAAK,CAACC;AADwD,GAApC,CAAD,CAAhC;AAGA,QAAMC,eAAe,GAAGH,QAAxB;AAGA,QAAM;AAAEI,IAAAA,mBAAF;AAAuBC,IAAAA,iBAAvB;AAA0CC,IAAAA,aAA1C;AAAyDC,IAAAA;AAAzD,MAAuExB,WAAW,CACnFkB,KAAD,KAA4B,EACxB,GAAGA,KAAK,CAACO;AADe,GAA5B,CADoF,CAAxF;AAKA,QAAMC,0BAA0B,GAAGL,mBAAnC;AACA,QAAMM,wBAAwB,GAAGL,iBAAjC;AACA,QAAMM,oBAAoB,GAAGL,aAA7B;AACA,QAAMM,gBAAgB,GAAGL,SAAzB;AAIA,QAAMM,aAAkB,GAAGnC,MAAM,CAAC,IAAD,CAAjC;AAEA,QAAMoC,cAAmB,GAAGpC,MAAM,CAAC,IAAD,CAAlC;AAEA,QAAMqC,MAAW,GAAGrC,MAAM,CAAC,IAAD,CAA1B;AAEA,QAAMsC,OAAY,GAAGtC,MAAM,CAAC,IAAD,CAA3B;AAEA,QAAMuC,QAAa,GAAGvC,MAAM,CAAC,IAAD,CAA5B;AAEA,QAAM,CAACwC,kBAAD,EAAqBC,qBAArB,IAA8CtC,QAAQ,CAAU,IAAV,CAA5D;AAEA,QAAM,CAACuC,eAAD,EAAkBC,kBAAlB,IAAwCxC,QAAQ,CAAM,IAAN,CAAtD;AAEA,QAAM,CAACyC,oBAAD,EAAuBC,uBAAvB,IAAkD1C,QAAQ,CAAM,IAAN,CAAhE;AAEA,QAAM,CAAC2C,WAAD,EAAcC,cAAd,IAAgC5C,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAAC6C,UAAD,EAAaC,aAAb,IAA8B9C,QAAQ,CAAC,CAAD,CAA5C;AAEA,QAAM,CAAC+C,GAAD,EAAMC,MAAN,IAAgBhD,QAAQ,CAAU,KAAV,CAA9B;AAEA,QAAM,CAACiD,KAAD,EAAQC,QAAR,IAAoBlD,QAAQ,CAAU,KAAV,CAAlC;AAGA,QAAM,CAACmD,WAAD,EAAcC,cAAd,IAAgCpD,QAAQ,CAAM;AAAEqD,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE;AAAX,GAAN,CAA9C;AAEA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCxD,QAAQ,CAAM;AAAEqD,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE;AAAX,GAAN,CAAhD;AAEA,QAAM,CAACG,UAAD,EAAaC,aAAb,IAA8B1D,QAAQ,CAAM;AAAEqD,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE;AAAX,GAAN,CAA5C;AAEA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkB5D,QAAQ,CAAU,KAAV,CAAhC;AAIA,QAAM,CAAC6D,KAAD,EAAQC,QAAR,IAAoB9D,QAAQ,CAAM;AAAEqD,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE;AAAX,GAAN,CAAlC;AAEA,QAAMS,gBAAgB,GAAGlE,MAAM,CAAuC,IAAvC,CAA/B;AAEA,MAAImE,QAAQ,GAAG,GAAf;AAEA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoClE,QAAQ,CAAU,KAAV,CAAlD;AAEA,QAAM,CAACmE,eAAD,EAAkBC,kBAAlB,IAAwCpE,QAAQ,CAAU,IAAV,CAAtD;AAEA,QAAM,CAACqE,gBAAD,EAAmBC,mBAAnB,IAA0CtE,QAAQ,CAAU,IAAV,CAAxD;AAEA,QAAM,CAACuE,YAAD,EAAeC,eAAf,IAAkCxE,QAAQ,CAAU,KAAV,CAAhD;AAEA,QAAM,CAACyE,SAAD,EAAYC,YAAZ,IAA4B1E,QAAQ,CAAM,IAAN,CAA1C;AAEA,QAAM,CAAC2E,SAAD,EAAYC,YAAZ,IAA4B5E,QAAQ,CAAC,KAAD,CAA1C;AAGA,QAAM,CAAC6E,SAAD,EAAYC,YAAZ,IAA4B9E,QAAQ,CAAC,EAAD,CAA1C;AAEA,QAAM+E,UAAU,GAAGlF,MAAM,CAAuC,IAAvC,CAAzB;AAGA,QAAM,CAACmF,OAAD,EAAUC,UAAV,IAAwBjF,QAAQ,CAAC,CAAD,CAAtC;AAEA,QAAM,CAACkF,OAAD,EAAUC,UAAV,IAAwBnF,QAAQ,CAAC,CAAD,CAAtC;AAKA,QAAM,CAACoF,IAAD,EAAOC,OAAP,IAAkBrF,QAAQ,CAAQ;AAAEqD,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE;AAAX,GAAR,CAAhC;AACA,QAAM,CAACgC,KAAD,EAAQC,QAAR,IAAoBvF,QAAQ,CAAQ;AAAEqD,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE;AAAX,GAAR,CAAlC;AACA,QAAM,CAACkC,KAAD,EAAQC,QAAR,IAAoBzF,QAAQ,CAAQ;AAAEqD,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE;AAAX,GAAR,CAAlC;AAEA,QAAM,CAACoC,IAAD,EAAOC,OAAP,IAAkB3F,QAAQ,CAAC,CAAD,CAAhC;AAEA,QAAM,CAAC4F,KAAD,EAAQC,QAAR,IAAoB7F,QAAQ,CAAC,CAAD,CAAlC;AAMAF,EAAAA,SAAS,CAAC,MAAM;AACZgF,IAAAA,YAAY,CAAChD,oBAAD,CAAZ;AACA4C,IAAAA,YAAY,CAAC5C,oBAAoB,CAAC,CAAD,CAArB,CAAZ;AACAd,IAAAA,WAAW,CAAC,KAAD,CAAX;AACA8E,IAAAA,MAAM,CAAC,EAAD,CAAN;AACAD,IAAAA,QAAQ,CAAC,CAAD,CAAR;AACAjF,IAAAA,aAAa,CAAC,EAAD,CAAb;AAEH,GARQ,EAQN,CAACkB,oBAAD,EAAuBpB,mBAAvB,CARM,CAAT;AAcA,QAAM,CAACqF,YAAD,EAAeC,eAAf,IAAkChG,QAAQ,CAAgB,IAAhB,CAAhD;AAEA,QAAMiG,UAAU,GAAGpG,MAAM,CAAgB,IAAhB,CAAzB;AACA,QAAM,CAACqG,GAAD,EAAMJ,MAAN,IAAgB9F,QAAQ,CAAC,EAAD,CAA9B;AAEA,QAAMmG,cAAc,GAAGpG,WAAW,CAAC,OAAOqG,CAAP,EAAUC,iBAAV,KAAgC;AAE/D,UAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACA,UAAMC,QAAQ,GAAGF,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAjB;AACAC,IAAAA,QAAQ,CAACC,GAAT,GAAejC,SAAf;AAEA,UAAMkC,MAAM,GAAGF,QAAQ,CAACG,YAAT,GAAwBH,QAAQ,CAACI,KAAhD;AACA,UAAMC,MAAM,GAAGL,QAAQ,CAACM,aAAT,GAAyBN,QAAQ,CAACO,MAAjD;AAEAV,IAAAA,MAAM,CAACO,KAAP,GAAeR,iBAAiB,CAACQ,KAAjC;AACAP,IAAAA,MAAM,CAACU,MAAP,GAAgBX,iBAAiB,CAACW,MAAlC;AAEA,UAAMC,GAAG,GAAGX,MAAM,CAACY,UAAP,CAAkB,IAAlB,CAAZ;;AAGA,QAAID,GAAJ,EAAS;AACL,UAAI;AACAR,QAAAA,QAAQ,CAACU,MAAT,GAAkB,MAAM;AACpBC,UAAAA,qBAAqB,CAAC,MAAM;AACxBH,YAAAA,GAAG,CAACI,SAAJ,CACIZ,QADJ,EAEIJ,iBAAiB,CAAChD,CAAlB,GAAsBsD,MAF1B,EAGIN,iBAAiB,CAAC/C,CAAlB,GAAsBwD,MAH1B,EAIIT,iBAAiB,CAACQ,KAAlB,GAA0BF,MAJ9B,EAKIN,iBAAiB,CAACW,MAAlB,GAA2BF,MAL/B,EAMI,CANJ,EAOI,CAPJ,EAQIT,iBAAiB,CAACQ,KARtB,EASIR,iBAAiB,CAACW,MATtB;;AAcA,gBAAIpB,KAAK,GAAG,CAAR,IAAarB,YAAjB,EAA+B;AAC3B,oBAAM+C,OAAO,GAAGhB,MAAM,CAACiB,SAAP,CAAiB,WAAjB,CAAhB;AACA,oBAAMC,CAAC,GAAG5B,KAAK,GAAG,CAAlB;;AAEA,kBAAIM,GAAG,CAACsB,CAAD,CAAP,EAAY,CACR;AACH,eAFD,MAEO;AACH,sBAAMC,UAAe,GAAG,CAAC,GAAGvB,GAAJ,CAAxB;AACAuB,gBAAAA,UAAU,CAACD,CAAD,CAAV,GAAgBF,OAAhB;;AAEA,oBAAIxF,oBAAoB,CAAC4F,MAArB,KAAgC9B,KAApC,EAA2C;AAEvC+B,kBAAAA,OAAO,CAACC,GAAR,CAAYH,UAAZ;AACA7G,kBAAAA,aAAa,CAAC6G,UAAD,CAAb;AACA3G,kBAAAA,cAAc,CAAC,IAAD,CAAd;AACH,iBALD,MAKO;AACHgF,kBAAAA,MAAM,CAAC2B,UAAD,CAAN;AACH;AACJ;AACJ;AACJ,WAnCoB,CAArB;AAoCH,SArCD;AAyCH,OA1CD,CA0CE,OAAOI,KAAP,EAAc;AAEZF,QAAAA,OAAO,CAACE,KAAR,CAAc,iCAAd,EAAiDA,KAAjD;AACH;AAGJ;AAEJ,GAlEiC,EAkE/B,CAACpD,SAAD,EAAYmB,KAAZ,EAAmBrB,YAAnB,EAAiC2B,GAAjC,CAlE+B,CAAlC;AA0EA,QAAM,CAAC4B,KAAD,EAAQC,QAAR,IAAoB/H,QAAQ,CAAC,CAAD,CAAlC;AAGA,QAAMgI,GAAG,GAAGjI,WAAW,CAAC,MAAM;AAC1BgI,IAAAA,QAAQ,CAACD,KAAK,GAAG,GAAT,CAAR;;AACA,QAAIA,KAAK,IAAI,CAAb,EAAgB;AACZC,MAAAA,QAAQ,CAAC,CAAD,CAAR;AACH;AACJ,GALsB,EAKpB,CAACD,KAAD,CALoB,CAAvB;AASA,sBACI;AAAA,2BAII,QAAC,IAAD;AACI,MAAA,SAAS,MADb;AAEI,MAAA,KAAK,EAAE;AACHG,QAAAA,OAAO,EAAE,KADN;AACapB,QAAAA,KAAK,EAAE,MADpB;AAC4BG,QAAAA,MAAM,EAAE;AADpC,OAFX;AAAA,8BAQI,QAAC,IAAD;AAAM,QAAA,GAAG,EAAE9E,MAAX;AACI,QAAA,IAAI,MADR;AAEI,QAAA,EAAE,EAAE,EAFR;AAGI,QAAA,KAAK,EAAE;AACH+F,UAAAA,OAAO,EAAE,KADN;AACapB,UAAAA,KAAK,EAAE,KADpB;AAC2BG,UAAAA,MAAM,EAAErC,SAAS,GAAG,KAAH,GAAW,MADvD;AAC+DuD,UAAAA,QAAQ,EAAE,OADzE;AACkFC,UAAAA,GAAG,EAAE;AADvF;AAHX;AAAA;AAAA;AAAA;AAAA,cARJ,EAmBKpC,YAAY,iBACT;AAAK,QAAA,GAAG,EAAEA,YAAV;AAAwB,QAAA,GAAG,EAAC,eAA5B;AAA4C,QAAA,KAAK,EAAE;AAAEmC,UAAAA,QAAQ,EAAE,OAAZ;AAAqBC,UAAAA,GAAG,EAAE,MAA1B;AAAkCC,UAAAA,MAAM,EAAE,QAA1C;AAAoDvB,UAAAA,KAAK,EAAE;AAA3D;AAAnD;AAAA;AAAA;AAAA;AAAA,cApBR,eA4BI,QAAC,IAAD;AACI,QAAA,IAAI,MADR;AAEI,QAAA,EAAE,EAAE,EAFR;AAGI,QAAA,KAAK,EAAE;AACHoB,UAAAA,OAAO,EAAE,KADN;AAEHI,UAAAA,MAAM,EAAEtH,QAAQ,GAAGwD,YAAY,GAAG,2BAAH,GAAiC,yBAAhD,GAA4E;AAFzF,SAHX;AAAA,kBAWKM,SAAS,CAAC6C,MAAV,GAAmB,CAAnB,gBAAuB;AAAA,iCAAE,QAAC,OAAD;AACtB,YAAA,OAAO,EAAE,CADa;AAEtB,YAAA,OAAO,EAAE,CAFa;AAGtB,YAAA,KAAK,EAAE;AACHO,cAAAA,OAAO,EAAE,KADN;AAEHK,cAAAA,QAAQ,EAAE;AAFP,aAHe;AAAA,sBAUrBzD,SAAS,CAAC0D,GAAV,CAAc,CAACC,OAAD,EAAeC,KAAf,kBAEX;AAAK,cAAA,OAAO,EAAE,MAAM;AAEhB5C,gBAAAA,QAAQ,CAAC4C,KAAK,GAAG,CAAT,CAAR;AACAvG,gBAAAA,MAAM,CAACwG,OAAP,CAAeC,cAAf,CAA8B;AAC1BC,kBAAAA,QAAQ,EAAE,QADgB;AAE1BC,kBAAAA,KAAK,EAAE;AAFmB,iBAA9B;AAIAnE,gBAAAA,YAAY,CAAC8D,OAAD,CAAZ;AACAxH,gBAAAA,WAAW,CAAC,KAAD,CAAX;AACH,eATD;AAWgB,cAAA,KAAK,EAAE;AAAE6F,gBAAAA,KAAK,EAAE,KAAT;AAAgBiC,gBAAAA,MAAM,EAAE;AAAxB,eAXvB;AAW6D,cAAA,GAAG,EAAEN,OAXlE;AAW2E,cAAA,GAAG,EAAG,SAAQC,KAAM;AAX/F,eAWSA,KAXT;AAAA;AAAA;AAAA;AAAA,oBAFH;AAVqB;AAAA;AAAA;AAAA;AAAA;AAAF,yBAAvB,GA2BgB;AAtCrB;AAAA;AAAA;AAAA;AAAA,cA5BJ,eAuEI;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,gCAKI;AACI,UAAA,GAAG,EAAEvH,MADT;AAEI,UAAA,KAAK,EAAE;AACH+G,YAAAA,OAAO,EAAE,KADN;AAEHc,YAAAA,OAAO,EAAE,MAFN;AAGHb,YAAAA,QAAQ,EAAE,OAHP;AAIHC,YAAAA,GAAG,EAAE,OAJF;AAKHC,YAAAA,MAAM,EAAE,CALL;AAMHY,YAAAA,UAAU,EAAE;AANT;AAFX;AAAA;AAAA;AAAA;AAAA,gBALJ,eAiBI;AAAK,UAAA,KAAK,EAAE;AAAED,YAAAA,OAAO,EAAEhI,QAAQ,GAAG,MAAH,GAAY,OAA/B;AAAwCiI,YAAAA,UAAU,EAAEzE,YAAY,GAAG,QAAH,GAAc;AAA9E,WAAZ;AAAA,iCACI,QAAC,OAAD;AACI,YAAA,GAAG,EAAE0B,UADT;AAEI,YAAA,KAAK,EAAExB,SAFX;AAGI,YAAA,IAAI,EAAEW,IAHV;AAII,YAAA,IAAI,EAAEM,IAJV;AAKI,YAAA,MAAM,EAAEoC,KAAK,GAAG,GALpB;AAMI,YAAA,YAAY,EAAEzC,OANlB;AAOI,YAAA,cAAc,EAAEc,cAPpB;AAQI,YAAA,YAAY,EAAER;AARlB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAjBJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAvEJ,eA4GI,QAAC,SAAD;AACI,QAAA,OAAO,EAAE,MAAM;AACX3E,UAAAA,WAAW,CAAC,IAAD,CAAX;AACH,SAHL;AAKI,QAAA,SAAS,EACLM,eAAe,GACT,wEADS,GAET,2EARd;AAUI,QAAA,KAAK,EAAE;AAEH2H,UAAAA,KAAK,EAAE,SAFJ;AAGHC,UAAAA,QAAQ,EAAE,OAHP;AAIHhB,UAAAA,QAAQ,EAAE,UAJP;AAKHiB,UAAAA,OAAO,EAAE9E,gBAAgB,GAAG,IAAH,GAAU,CALhC;AAMH+E,UAAAA,YAAY,EAAE,KANX;AAOHjB,UAAAA,GAAG,EAAE,OAPF;AAQHkB,UAAAA,IAAI,EAAE,IARH;AASHC,UAAAA,KAAK,EAAE,EATJ;AAUHP,UAAAA,OAAO,EAAE5E,eAAe,GAAGpD,QAAQ,GAAG,MAAH,GAAYwD,YAAY,GAAG,MAAH,GAAY,OAA/C,GAAyD;AAV9E;AAVX;AAAA;AAAA;AAAA;AAAA,cA5GJ,eAqII,QAAC,eAAD;AACI,QAAA,OAAO,EAAE,MAAM;AACXyD,UAAAA,GAAG;AACN,SAHL;AAKI,QAAA,SAAS,EACL1G,eAAe,GACT,wEADS,GAET,2EARd;AAUI,QAAA,KAAK,EAAE;AACH2H,UAAAA,KAAK,EAAE,SADJ;AAEHC,UAAAA,QAAQ,EAAE,OAFP;AAGHhB,UAAAA,QAAQ,EAAE,UAHP;AAIHiB,UAAAA,OAAO,EAAE9E,gBAAgB,GAAG,IAAH,GAAU,CAJhC;AAKH+E,UAAAA,YAAY,EAAE,KALX;AAMHjB,UAAAA,GAAG,EAAE,OANF;AAOHkB,UAAAA,IAAI,EAAE,KAPH;AAQHC,UAAAA,KAAK,EAAE,EARJ;AASHP,UAAAA,OAAO,EAAE5E,eAAe,GAAGpD,QAAQ,GAAG,MAAH,GAAYwD,YAAY,GAAG,MAAH,GAAY,OAA/C,GAAyD;AAT9E;AAVX;AAAA;AAAA;AAAA;AAAA,cArIJ,eA6JI,QAAC,eAAD;AACI,QAAA,OAAO,EAAE,MAAM;AACXG,UAAAA,YAAY,CAAC,EAAD,CAAZ;AACAF,UAAAA,eAAe,CAAC,IAAD,CAAf;;AACA,eAAK,IAAInB,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIvB,oBAAoB,CAAC4F,MAArB,GAA8B,CAAnD,EAAsDrE,CAAC,EAAvD,EAA2D;AACvD,gBAAIkG,EAAE,GAAGlG,CAAC,GAAG,CAAb;AACA,gBAAImG,EAAE,GAAGD,EAAE,GAAG,IAAd;AACAE,YAAAA,UAAU,CAAC,MAAM;AAEb5D,cAAAA,QAAQ,CAACxC,CAAC,GAAG,CAAL,CAAR;AACAqB,cAAAA,YAAY,CAAC5C,oBAAoB,CAACuB,CAAD,CAArB,CAAZ;AACH,aAJS,EAIPmG,EAJO,CAAV;AAMH;AACJ,SAdL;AAgBI,QAAA,SAAS,EACLlI,eAAe,GACT,wEADS,GAET,2EAnBd;AAqBI,QAAA,KAAK,EAAE;AAEH2H,UAAAA,KAAK,EAAE,SAFJ;AAGHC,UAAAA,QAAQ,EAAE,OAHP;AAIHhB,UAAAA,QAAQ,EAAE,UAJP;AAKHiB,UAAAA,OAAO,EAAE9E,gBAAgB,GAAG,IAAH,GAAU,CALhC;AAMH+E,UAAAA,YAAY,EAAE,KANX;AAOHjB,UAAAA,GAAG,EAAE,OAPF;AAQHkB,UAAAA,IAAI,EAAE,KARH;AASHC,UAAAA,KAAK,EAAE,EATJ;AAUHP,UAAAA,OAAO,EAAE5E,eAAe,GAAGpD,QAAQ,GAAG,MAAH,GAAYwD,YAAY,GAAG,MAAH,GAAY,OAA/C,GAAyD;AAV9E;AArBX;AAAA;AAAA;AAAA;AAAA,cA7JJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAJJ,mBADJ;AA8MH;;GApbQ9D,Y;UAUYN,W,EAoBID,W,EAMwDA,W;;;KApCxEO,Y;AAsbT,OAAO,MAAMiJ,WAAW,gBAAG9J,KAAK,CAAC+J,IAAN,CAAWlJ,YAAX,CAApB;MAAMiJ,W","sourcesContent":["import React, {\r\n    useRef,\r\n    useEffect,\r\n    useCallback,\r\n    useState,\r\n    useLayoutEffect,\r\n} from \"react\";\r\nimport ControlPointDuplicateIcon from \"@mui/icons-material/ControlPointDuplicate\";\r\nimport { Grid, Switch, DialogContent } from \"@material-ui/core\";\r\nimport { matchPc, matchTablet, matchMobile } from \"../DetectDevice\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport { OptionsSlider } from \"../profile/OptionsSlider\";\r\nimport { RootStateOrAny, useSelector, useDispatch } from \"react-redux\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport DoneOutlineIcon from '@mui/icons-material/DoneOutline';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport { UpdateUploadData } from \"../GlobalActions\";\r\nimport DoneIcon from '@mui/icons-material/Done';\r\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\r\nimport AspectRatioIcon from '@mui/icons-material/AspectRatio';\r\n\r\nimport CropIcon from '@mui/icons-material/Crop';\r\nimport Slider from \"@material-ui/core/Slider\";\r\n\r\nimport Cropper from \"react-easy-crop\";\r\nimport { Point, Area } from \"react-easy-crop/types\";\r\n\r\n\r\n\r\nfunction TaskbarCropx({\r\n    showModalUploadTask,\r\n    uploadClose,\r\n    setfinalimage,\r\n    finalImage,\r\n    setHidecropper,\r\n    hideCrop,\r\n    sethideCrop\r\n\r\n}: any): JSX.Element {\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const canRef: any = useRef(null);\r\n\r\n    ///\r\n    ///\r\n    ///\r\n    /// INTERFACE/TYPES FOR SCREENHEIGHT AND DARKMODE\r\n    interface RootStateGlobalReducer {\r\n        GlobalReducer: {\r\n            darkmode: boolean;\r\n            screenHeight: number;\r\n        };\r\n    }\r\n\r\n    ///\r\n    ///\r\n    ///\r\n    /// GET DARKMODE FROM REDUX STORE\r\n    const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n        ...state.GlobalReducer,\r\n    }));\r\n    const darkmodeReducer = darkmode;\r\n\r\n\r\n    const { activatefilterImage, activatecropImage, selectedImage, cropimage } = useSelector(\r\n        (state: RootStateOrAny) => ({\r\n            ...state.GlobalNavuploadReducer,\r\n        })\r\n    );\r\n    const activatefilterImageReducer = activatefilterImage;\r\n    const activatecropImageReducer = activatecropImage;\r\n    const selectedImageReducer = selectedImage;\r\n    const cropimageReducer = cropimage;\r\n\r\n\r\n\r\n    const cropCanvasRef: any = useRef(null);\r\n\r\n    const cropCanvasRefx: any = useRef(null);\r\n\r\n    const navRef: any = useRef(null);\r\n\r\n    const IconRef: any = useRef(null);\r\n\r\n    const IconRef2: any = useRef(null);\r\n\r\n    const [allowCropAllCanvas, setallowCropAllCanvas] = useState<boolean>(true);\r\n\r\n    const [CropImageHolder, setCropImageHolder] = useState<any>(null);\r\n\r\n    const [FinalCropImageHolder, setFinalCropImageHolder] = useState<any>(null);\r\n\r\n    const [imageHeight, setimageHeight] = useState(0);\r\n    const [imageWidth, setimageWidth] = useState(0);\r\n\r\n    const [Box, setBox] = useState<boolean>(false);\r\n\r\n    const [final, setFinal] = useState<boolean>(false);\r\n\r\n\r\n    const [cropInitial, setcropInitial] = useState<any>({ x: 0, y: 0 });\r\n\r\n    const [cropInitialx, setcropInitialx] = useState<any>({ x: 0, y: 0 });\r\n\r\n    const [cropOffset, setcropOffset] = useState<any>({ x: 0, y: 0 });\r\n\r\n    const [Drag, setDrag] = useState<boolean>(false);\r\n\r\n\r\n\r\n    const [cropx, setcropx] = useState<any>({ x: 0, y: 0 });\r\n\r\n    const allowscrolltimer = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n\r\n    var extendxy = 3.3;\r\n\r\n    const [allowOverflow, setallowOverflow] = useState<boolean>(false);\r\n\r\n    const [optionscropshow, setoptionscropshow] = useState<boolean>(true);\r\n\r\n    const [optionscropshow2, setoptionscropshow2] = useState<boolean>(true);\r\n\r\n    const [SaveCropData, setSaveCropData] = useState<boolean>(false);\r\n\r\n    const [CropImage, setcropImage] = useState<any>(null);\r\n\r\n    const [multiPost, setmultiPost] = useState(false);\r\n\r\n\r\n    const [prevImage, setprevimage] = useState([]);\r\n\r\n    const menuTimer5 = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n\r\n\r\n    const [NewCanH, setNewCanH] = useState(0);\r\n\r\n    const [NewCanW, setNewCanW] = useState(0);\r\n\r\n\r\n\r\n\r\n    const [crop, setCrop] = useState<Point>({ x: 0, y: 0 });\r\n    const [crop2, setCrop2] = useState<Point>({ x: 0, y: 0 });\r\n    const [crop3, setCrop3] = useState<Point>({ x: 0, y: 0 });\r\n\r\n    const [zoom, setZoom] = useState(1);\r\n\r\n    const [count, setcount] = useState(1);\r\n\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        setprevimage(selectedImageReducer);\r\n        setcropImage(selectedImageReducer[0])\r\n        sethideCrop(false);\r\n        setRay([]);\r\n        setcount(0);\r\n        setfinalimage([])\r\n\r\n    }, [selectedImageReducer, showModalUploadTask]);\r\n\r\n\r\n\r\n\r\n\r\n    const [croppedImage, setCroppedImage] = useState<string | null>(null);\r\n\r\n    const cropperRef = useRef<Cropper | any>(null);\r\n    const [ray, setRay] = useState([]);\r\n\r\n    const onCropComplete = useCallback(async (_, croppedAreaPixels) => {\r\n\r\n        const canvas = document.createElement('canvas');\r\n        const imageRef = document.createElement('img');\r\n        imageRef.src = CropImage;\r\n\r\n        const scaleX = imageRef.naturalWidth / imageRef.width;\r\n        const scaleY = imageRef.naturalHeight / imageRef.height;\r\n\r\n        canvas.width = croppedAreaPixels.width;\r\n        canvas.height = croppedAreaPixels.height;\r\n\r\n        const ctx = canvas.getContext('2d');\r\n\r\n\r\n        if (ctx) {\r\n            try {\r\n                imageRef.onload = () => {\r\n                    requestAnimationFrame(() => {\r\n                        ctx.drawImage(\r\n                            imageRef,\r\n                            croppedAreaPixels.x * scaleX,\r\n                            croppedAreaPixels.y * scaleY,\r\n                            croppedAreaPixels.width * scaleX,\r\n                            croppedAreaPixels.height * scaleY,\r\n                            0,\r\n                            0,\r\n                            croppedAreaPixels.width,\r\n                            croppedAreaPixels.height\r\n                        );\r\n\r\n\r\n\r\n                        if (count > 0 && SaveCropData) {\r\n                            const dataUrl = canvas.toDataURL('image/png');\r\n                            const g = count - 1;\r\n\r\n                            if (ray[g]) {\r\n                                // Do something if ray[g] already exists\r\n                            } else {\r\n                                const updatedRay: any = [...ray];\r\n                                updatedRay[g] = dataUrl;\r\n\r\n                                if (selectedImageReducer.length === count) {\r\n\r\n                                    console.log(updatedRay)\r\n                                    setfinalimage(updatedRay);\r\n                                    setHidecropper(true);\r\n                                } else {\r\n                                    setRay(updatedRay);\r\n                                }\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n\r\n\r\n\r\n            } catch (error) {\r\n\r\n                console.error('Error while cropping the image:', error);\r\n            }\r\n\r\n\r\n        }\r\n\r\n    }, [CropImage, count, SaveCropData, ray]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const [ratio, setratio] = useState(2);\r\n\r\n\r\n    const add = useCallback(() => {\r\n        setratio(ratio + 0.5);\r\n        if (ratio >= 4) {\r\n            setratio(2);\r\n        }\r\n    }, [ratio])\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n\r\n\r\n            <Grid\r\n                container\r\n                style={{\r\n                    padding: \"0px\", width: '100%', height: \"100%\",\r\n\r\n                }}>\r\n\r\n\r\n                <Grid ref={navRef}\r\n                    item\r\n                    xs={12}\r\n                    style={{\r\n                        padding: \"0px\", width: '94%', height: multiPost ? \"80%\" : '100%', position: 'fixed', top: '-20000000000px',\r\n                    }}>\r\n\r\n                </Grid>\r\n\r\n\r\n\r\n                {croppedImage && (\r\n                    <img src={croppedImage} alt=\"Cropped Image\" style={{ position: 'fixed', top: '20vh', zIndex: 30000000, width: '20%' }} />\r\n                )}\r\n\r\n\r\n\r\n\r\n\r\n\r\n                <Grid\r\n                    item\r\n                    xs={12}\r\n                    style={{\r\n                        padding: \"0px\",\r\n                        filter: hideCrop ? SaveCropData ? 'brightness(0.8) blur(8px)' : 'brightness(1) blur(0px)' : 'brightness(0.8) blur(8px)'\r\n\r\n                    }}>\r\n\r\n\r\n\r\n                    {prevImage.length > 1 ? <><Masonry\r\n                        columns={3}\r\n                        spacing={0}\r\n                        style={{\r\n                            padding: \"0px\",\r\n                            overflow: 'hidden',\r\n\r\n                        }}\r\n                    >\r\n\r\n                        {prevImage.map((picture: any, index: any) => (\r\n\r\n                            <img onClick={() => {\r\n\r\n                                setcount(index + 1);\r\n                                navRef.current.scrollIntoView({\r\n                                    behavior: \"smooth\",\r\n                                    block: \"start\",\r\n                                });\r\n                                setcropImage(picture)\r\n                                sethideCrop(false)\r\n                            }}\r\n\r\n                                key={index} style={{ width: '50%', cursor: 'pointer', }} src={picture} alt={`Image ${index}`} />\r\n\r\n                        ))}\r\n\r\n                    </Masonry ></> : null}\r\n\r\n                </Grid>\r\n\r\n\r\n                <div className=\"App\">\r\n\r\n\r\n\r\n\r\n                    <canvas\r\n                        ref={canRef}\r\n                        style={{\r\n                            padding: \"0px\",\r\n                            display: \"none\",\r\n                            position: \"fixed\",\r\n                            top: \"-400%\",\r\n                            zIndex: 0,\r\n                            visibility: \"hidden\",\r\n                        }}\r\n                    />\r\n\r\n                    <div style={{ display: hideCrop ? 'none' : 'block', visibility: SaveCropData ? 'hidden' : 'visible' }}>\r\n                        <Cropper\r\n                            ref={cropperRef}\r\n                            image={CropImage}\r\n                            crop={crop}\r\n                            zoom={zoom}\r\n                            aspect={ratio / 2.8}\r\n                            onCropChange={setCrop}\r\n                            onCropComplete={onCropComplete}\r\n                            onZoomChange={setZoom}\r\n\r\n                        />\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n\r\n\r\n\r\n                <CloseIcon\r\n                    onClick={() => {\r\n                        sethideCrop(true);\r\n                    }}\r\n\r\n                    className={\r\n                        darkmodeReducer\r\n                            ? \"make-small-icons-clickable-darkab dontallowhighlighting zuperkingIcon \"\r\n                            : \"make-small-icons-clickable-lightab  dontallowhighlighting zuperkingIcon  \"\r\n                    }\r\n                    style={{\r\n\r\n                        color: \"#ffffff\",\r\n                        fontSize: \"3.8vw\",\r\n                        position: \"absolute\",\r\n                        opacity: optionscropshow2 ? 0.94 : 0,\r\n                        borderRadius: '70%',\r\n                        top: '3.8vh',\r\n                        left: '2%',\r\n                        right: \"\",\r\n                        display: optionscropshow ? hideCrop ? 'none' : SaveCropData ? 'none' : 'block' : 'none'\r\n                    }}\r\n                />\r\n\r\n\r\n                <AspectRatioIcon\r\n                    onClick={() => {\r\n                        add();\r\n                    }}\r\n\r\n                    className={\r\n                        darkmodeReducer\r\n                            ? \"make-small-icons-clickable-darkab dontallowhighlighting zuperkingIcon \"\r\n                            : \"make-small-icons-clickable-lightab  dontallowhighlighting zuperkingIcon  \"\r\n                    }\r\n                    style={{\r\n                        color: \"#ffffff\",\r\n                        fontSize: \"3.8vw\",\r\n                        position: \"absolute\",\r\n                        opacity: optionscropshow2 ? 0.94 : 0,\r\n                        borderRadius: '70%',\r\n                        top: '3.8vh',\r\n                        left: '48%',\r\n                        right: \"\",\r\n                        display: optionscropshow ? hideCrop ? 'none' : SaveCropData ? 'none' : 'block' : 'none'\r\n                    }}\r\n                />\r\n\r\n\r\n                <DoneOutlineIcon\r\n                    onClick={() => {\r\n                        setcropImage([]);\r\n                        setSaveCropData(true);\r\n                        for (let x = 0; x <= selectedImageReducer.length - 1; x++) {\r\n                            var xy = x + 1;\r\n                            var xx = xy * 1500\r\n                            setTimeout(() => {\r\n\r\n                                setcount(x + 1);\r\n                                setcropImage(selectedImageReducer[x])\r\n                            }, xx)\r\n\r\n                        }\r\n                    }}\r\n\r\n                    className={\r\n                        darkmodeReducer\r\n                            ? \"make-small-icons-clickable-darkab dontallowhighlighting zuperkingIcon \"\r\n                            : \"make-small-icons-clickable-lightab  dontallowhighlighting zuperkingIcon  \"\r\n                    }\r\n                    style={{\r\n\r\n                        color: \"#ffffff\",\r\n                        fontSize: \"3.8vw\",\r\n                        position: \"absolute\",\r\n                        opacity: optionscropshow2 ? 0.94 : 0,\r\n                        borderRadius: '70%',\r\n                        top: '3.8vh',\r\n                        left: '94%',\r\n                        right: \"\",\r\n                        display: optionscropshow ? hideCrop ? 'none' : SaveCropData ? 'none' : 'block' : 'none'\r\n                    }}\r\n                />\r\n\r\n            </Grid>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport const TaskbarCrop = React.memo(TaskbarCropx);\r\n"]},"metadata":{},"sourceType":"module"}