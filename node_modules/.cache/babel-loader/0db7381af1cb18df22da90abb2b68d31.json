{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oghen\\\\OneDrive\\\\Documents\\\\ClikBate\\\\super\\\\src\\\\profile\\\\TaskbarCrop.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Masonry from \"@mui/lab/Masonry\";\nimport DoneOutlineIcon from '@mui/icons-material/DoneOutline';\nimport { UpdateUploadData } from \"../GlobalActions\";\nimport CropIcon from '@mui/icons-material/Crop';\nimport Slider from \"@material-ui/core/Slider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction TaskbarCropx({\n  showModalUploadTask,\n  uploadClose,\n  setfinalimage,\n  finalImage,\n  setHidecrop\n}) {\n  _s();\n\n  const dispatch = useDispatch(); ///\n  ///\n  ///\n  /// INTERFACE/TYPES FOR SCREENHEIGHT AND DARKMODE\n\n  ///\n  ///\n  ///\n  /// GET DARKMODE FROM REDUX STORE\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const cropCanvasRef = useRef(null);\n  const cropCanvasRefx = useRef(null);\n  const navRef = useRef(null);\n  const IconRef = useRef(null);\n  const IconRef2 = useRef(null);\n  const [allowCropAllCanvas, setallowCropAllCanvas] = useState(true);\n  const [CropImageHolder, setCropImageHolder] = useState(null);\n  const [FinalCropImageHolder, setFinalCropImageHolder] = useState(null);\n  const [imageHeight, setimageHeight] = useState(0);\n  const [imageWidth, setimageWidth] = useState(0);\n  const [Box, setBox] = useState(false);\n  const [final, setFinal] = useState(false);\n  const [cropInitial, setcropInitial] = useState({\n    x: 0,\n    y: 0\n  });\n  const [cropInitialx, setcropInitialx] = useState({\n    x: 0,\n    y: 0\n  });\n  const [cropOffset, setcropOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [Drag, setDrag] = useState(false);\n  const [crop, setcrop] = useState({\n    x: 0,\n    y: 0\n  });\n  const [cropx, setcropx] = useState({\n    x: 0,\n    y: 0\n  });\n  const allowscrolltimer = useRef(null);\n  var extendxy = 3.3;\n  const [allowOverflow, setallowOverflow] = useState(false);\n  const [optionscropshow, setoptionscropshow] = useState(true);\n  const [optionscropshow2, setoptionscropshow2] = useState(true);\n  const [zoom, setzoom] = useState(1);\n  const [multiPost, setmultiPost] = useState(false);\n  const [prevImage, setprevimage] = useState([]);\n  const menuTimer5 = useRef(null);\n  const [NewCanH, setNewCanH] = useState(0);\n  const [NewCanW, setNewCanW] = useState(0);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      style: {\n        padding: \"0px\",\n        width: '100%',\n        height: \"100%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        ref: navRef,\n        item: true,\n        xs: 12,\n        style: {\n          padding: \"0px\",\n          width: '94%',\n          height: multiPost ? \"80%\" : '100%',\n          position: 'fixed',\n          top: '-20000000000px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this), optionscropshow ? /*#__PURE__*/_jsxDEV(Slider, {\n        value: zoom,\n        onChangeCommitted: () => {\n          setoptionscropshow2(true);\n        },\n        defaultValue: 1,\n        max: 5,\n        min: 0,\n        step: 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001,\n        style: {\n          opacity: optionscropshow2 ? 1 : 0.85,\n          width: '18%',\n          left: '40%',\n          top: '5vh',\n          position: 'fixed'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 36\n      }, this) : null, allowCropAllCanvas ? /*#__PURE__*/_jsxDEV(\"canvas\", {\n        onMouseOver: () => {///mouseover(0);\n        },\n        onMouseUp: e => {\n          handleTouchEnd();\n        },\n        onTouchEnd: e => {\n          handleTouchEnd();\n        },\n        onMouseDown: e => {\n          handleTouchStart(e, 0);\n        },\n        onTouchStart: e => {\n          handleTouchStart(e, 1);\n        },\n        onMouseMove: e => {\n          handleTouchDrag(e, 0);\n        },\n        onTouchMove: e => {\n          handleTouchDrag(e, 1);\n        },\n        ref: cropCanvasRef,\n        style: {\n          padding: \"0px\",\n          margin: \"auto\",\n          cursor: \"pointer\",\n          overflow: 'hidden'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 21\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: cropCanvasRefx,\n        style: {\n          padding: \"0px\",\n          margin: \"auto\",\n          cursor: \"pointer\",\n          overflow: 'hidden',\n          position: 'fixed',\n          top: '0vh'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DoneOutlineIcon, {\n        onClick: Done,\n        ref: IconRef,\n        className: darkmodeReducer ? \"make-small-icons-clickable-darkab dontallowhighlighting zuperkingIcon \" : \"make-small-icons-clickable-lightab  dontallowhighlighting zuperkingIcon  \",\n        style: {\n          color: \"#ffffff\",\n          fontSize: \"3.8vw\",\n          position: \"absolute\",\n          opacity: optionscropshow2 ? 0.94 : 0,\n          borderRadius: '70%',\n          left: '49%',\n          right: \"\",\n          display: optionscropshow ? 'block' : 'none'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CropIcon, {\n        onClick: () => {\n          if (Box) {\n            setBox(false);\n          } else {\n            setBox(true);\n          }\n        },\n        ref: IconRef2,\n        className: darkmodeReducer ? \"make-small-icons-clickable-darkab dontallowhighlighting zuperkingIcon \" : \"make-small-icons-clickable-lightab  dontallowhighlighting zuperkingIcon  \",\n        style: {\n          color: \"#ffffff\",\n          fontSize: \"2.9vw\",\n          position: \"absolute\",\n          bottom: '5vh',\n          opacity: optionscropshow2 ? 0.94 : 0,\n          right: '43%',\n          display: optionscropshow ? 'none' : 'none'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        style: {\n          padding: \"0px\"\n        },\n        children: prevImage.length > 1 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Masonry, {\n            columns: 2,\n            spacing: 0,\n            style: {\n              padding: \"0px\",\n              overflow: 'hidden'\n            },\n            children: prevImage.map((picture, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n              onClick: () => {\n                dispatch(UpdateUploadData(prevImage, picture));\n                navRef.current.scrollIntoView({\n                  behavior: \"smooth\",\n                  block: \"start\"\n                });\n              },\n              style: {\n                width: '50%',\n                cursor: 'pointer'\n              },\n              src: picture,\n              alt: `Image ${index}`\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 29\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 47\n          }, this)\n        }, void 0, false) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(TaskbarCropx, \"FRku9bJ3Tu75qSnBhysp9mmDBZw=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = TaskbarCropx;\nexport const TaskbarCrop = /*#__PURE__*/React.memo(TaskbarCropx);\n_c2 = TaskbarCrop;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TaskbarCropx\");\n$RefreshReg$(_c2, \"TaskbarCrop\");","map":{"version":3,"sources":["C:/Users/oghen/OneDrive/Documents/ClikBate/super/src/profile/TaskbarCrop.tsx"],"names":["React","useRef","useState","Grid","useSelector","useDispatch","Masonry","DoneOutlineIcon","UpdateUploadData","CropIcon","Slider","TaskbarCropx","showModalUploadTask","uploadClose","setfinalimage","finalImage","setHidecrop","dispatch","darkmode","state","GlobalReducer","darkmodeReducer","cropCanvasRef","cropCanvasRefx","navRef","IconRef","IconRef2","allowCropAllCanvas","setallowCropAllCanvas","CropImageHolder","setCropImageHolder","FinalCropImageHolder","setFinalCropImageHolder","imageHeight","setimageHeight","imageWidth","setimageWidth","Box","setBox","final","setFinal","cropInitial","setcropInitial","x","y","cropInitialx","setcropInitialx","cropOffset","setcropOffset","Drag","setDrag","crop","setcrop","cropx","setcropx","allowscrolltimer","extendxy","allowOverflow","setallowOverflow","optionscropshow","setoptionscropshow","optionscropshow2","setoptionscropshow2","zoom","setzoom","multiPost","setmultiPost","prevImage","setprevimage","menuTimer5","NewCanH","setNewCanH","NewCanW","setNewCanW","padding","width","height","position","top","opacity","left","e","handleTouchEnd","handleTouchStart","handleTouchDrag","margin","cursor","overflow","Done","color","fontSize","borderRadius","right","display","bottom","length","map","picture","index","current","scrollIntoView","behavior","block","TaskbarCrop","memo"],"mappings":"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","sourcesContent":["import React, {\r\n    useRef,\r\n    useEffect,\r\n    useCallback,\r\n    useState,\r\n    useLayoutEffect,\r\n} from \"react\";\r\nimport ControlPointDuplicateIcon from \"@mui/icons-material/ControlPointDuplicate\";\r\nimport { Grid, Switch, DialogContent } from \"@material-ui/core\";\r\nimport { matchPc, matchTablet, matchMobile } from \"../DetectDevice\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport { OptionsSlider } from \"../profile/OptionsSlider\";\r\nimport { RootStateOrAny, useSelector, useDispatch } from \"react-redux\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport DoneOutlineIcon from '@mui/icons-material/DoneOutline';\r\nimport { UpdateUploadData } from \"../GlobalActions\";\r\nimport DoneIcon from '@mui/icons-material/Done';\r\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\r\n\r\nimport CropIcon from '@mui/icons-material/Crop';\r\nimport Slider from \"@material-ui/core/Slider\";\r\n\r\n\r\nfunction TaskbarCropx({\r\n    showModalUploadTask,\r\n    uploadClose,\r\n    setfinalimage,\r\n    finalImage,\r\n    setHidecrop\r\n\r\n}: any): JSX.Element {\r\n    const dispatch = useDispatch();\r\n\r\n\r\n\r\n\r\n    ///\r\n    ///\r\n    ///\r\n    /// INTERFACE/TYPES FOR SCREENHEIGHT AND DARKMODE\r\n    interface RootStateGlobalReducer {\r\n        GlobalReducer: {\r\n            darkmode: boolean;\r\n            screenHeight: number;\r\n        };\r\n    }\r\n\r\n    ///\r\n    ///\r\n    ///\r\n    /// GET DARKMODE FROM REDUX STORE\r\n    const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n        ...state.GlobalReducer,\r\n    }));\r\n    const darkmodeReducer = darkmode;\r\n\r\n\r\n\r\n\r\n    const cropCanvasRef: any = useRef(null);\r\n\r\n    const cropCanvasRefx: any = useRef(null);\r\n\r\n    const navRef: any = useRef(null);\r\n\r\n    const IconRef: any = useRef(null);\r\n\r\n    const IconRef2: any = useRef(null);\r\n\r\n    const [allowCropAllCanvas, setallowCropAllCanvas] = useState<boolean>(true);\r\n\r\n    const [CropImageHolder, setCropImageHolder] = useState<any>(null);\r\n\r\n    const [FinalCropImageHolder, setFinalCropImageHolder] = useState<any>(null);\r\n\r\n    const [imageHeight, setimageHeight] = useState(0);\r\n    const [imageWidth, setimageWidth] = useState(0);\r\n\r\n    const [Box, setBox] = useState<boolean>(false);\r\n\r\n    const [final, setFinal] = useState<boolean>(false);\r\n\r\n\r\n    const [cropInitial, setcropInitial] = useState<any>({ x: 0, y: 0 });\r\n\r\n    const [cropInitialx, setcropInitialx] = useState<any>({ x: 0, y: 0 });\r\n\r\n    const [cropOffset, setcropOffset] = useState<any>({ x: 0, y: 0 });\r\n\r\n    const [Drag, setDrag] = useState<boolean>(false);\r\n\r\n    const [crop, setcrop] = useState<any>({ x: 0, y: 0 });\r\n\r\n    const [cropx, setcropx] = useState<any>({ x: 0, y: 0 });\r\n\r\n    const allowscrolltimer = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n\r\n    var extendxy = 3.3;\r\n\r\n    const [allowOverflow, setallowOverflow] = useState<boolean>(false);\r\n\r\n    const [optionscropshow, setoptionscropshow] = useState<boolean>(true);\r\n\r\n    const [optionscropshow2, setoptionscropshow2] = useState<boolean>(true);\r\n\r\n    const [zoom, setzoom] = useState<any>(1);\r\n\r\n    const [multiPost, setmultiPost] = useState(false);\r\n\r\n\r\n    const [prevImage, setprevimage] = useState([]);\r\n\r\n    const menuTimer5 = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n\r\n\r\n    const [NewCanH, setNewCanH] = useState(0);\r\n\r\n    const [NewCanW, setNewCanW] = useState(0);\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n\r\n\r\n            <Grid\r\n                container\r\n                style={{\r\n                    padding: \"0px\", width: '100%', height: \"100%\",\r\n                }}>\r\n\r\n\r\n                <Grid ref={navRef}\r\n                    item\r\n                    xs={12}\r\n                    style={{\r\n                        padding: \"0px\", width: '94%', height: multiPost ? \"80%\" : '100%', position: 'fixed', top: '-20000000000px'\r\n                    }}>\r\n\r\n                </Grid>\r\n\r\n\r\n\r\n                {optionscropshow ? <Slider\r\n                    value={zoom}\r\n\r\n                    onChangeCommitted={() => { setoptionscropshow2(true); }}\r\n                    defaultValue={1}\r\n                    max={5}\r\n                    min={0}\r\n                    step={0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001}\r\n                    style={{ opacity: optionscropshow2 ? 1 : 0.85, width: '18%', left: '40%', top: '5vh', position: 'fixed', }}\r\n                />\r\n                    : null}\r\n\r\n\r\n\r\n                {allowCropAllCanvas ? (\r\n\r\n                    <canvas\r\n                        onMouseOver={() => {\r\n                            ///mouseover(0);\r\n                        }}\r\n                        onMouseUp={(e: any) => {\r\n                            handleTouchEnd();\r\n                        }}\r\n                        onTouchEnd={(e: any) => {\r\n                            handleTouchEnd();\r\n                        }}\r\n                        onMouseDown={(e: any) => {\r\n                            handleTouchStart(e, 0);\r\n                        }}\r\n                        onTouchStart={(e: any) => {\r\n                            handleTouchStart(e, 1);\r\n                        }}\r\n                        onMouseMove={(e: any) => {\r\n                            handleTouchDrag(e, 0);\r\n                        }}\r\n                        onTouchMove={(e: any) => {\r\n                            handleTouchDrag(e, 1);\r\n                        }}\r\n                        ref={cropCanvasRef}\r\n                        style={{\r\n                            padding: \"0px\",\r\n                            margin: \"auto\",\r\n                            cursor: \"pointer\",\r\n                            overflow: 'hidden'\r\n                        }} />\r\n                ) : null}\r\n\r\n\r\n\r\n\r\n                <canvas\r\n                    ref={cropCanvasRefx}\r\n                    style={{\r\n                        padding: \"0px\",\r\n                        margin: \"auto\",\r\n                        cursor: \"pointer\",\r\n                        overflow: 'hidden',\r\n                        position: 'fixed',\r\n                        top: '0vh'\r\n                    }} />\r\n\r\n\r\n                <DoneOutlineIcon\r\n                    onClick={Done}\r\n                    ref={IconRef}\r\n                    className={\r\n                        darkmodeReducer\r\n                            ? \"make-small-icons-clickable-darkab dontallowhighlighting zuperkingIcon \"\r\n                            : \"make-small-icons-clickable-lightab  dontallowhighlighting zuperkingIcon  \"\r\n                    }\r\n                    style={{\r\n                        color: \"#ffffff\",\r\n                        fontSize: \"3.8vw\",\r\n                        position: \"absolute\",\r\n                        opacity: optionscropshow2 ? 0.94 : 0,\r\n                        borderRadius: '70%',\r\n                        left: '49%',\r\n                        right: \"\",\r\n                        display: optionscropshow ? 'block' : 'none'\r\n                    }}\r\n                />\r\n\r\n\r\n\r\n                <CropIcon\r\n                    onClick={() => {\r\n                        if (Box) {\r\n                            setBox(false);\r\n                        } else {\r\n                            setBox(true);\r\n                        }\r\n                    }}\r\n\r\n                    ref={IconRef2}\r\n                    className={\r\n                        darkmodeReducer\r\n                            ? \"make-small-icons-clickable-darkab dontallowhighlighting zuperkingIcon \"\r\n                            : \"make-small-icons-clickable-lightab  dontallowhighlighting zuperkingIcon  \"\r\n                    }\r\n                    style={{\r\n                        color: \"#ffffff\",\r\n                        fontSize: \"2.9vw\",\r\n                        position: \"absolute\",\r\n                        bottom: '5vh',\r\n                        opacity: optionscropshow2 ? 0.94 : 0,\r\n                        right: '43%',\r\n                        display: optionscropshow ? 'none' : 'none'\r\n                    }}\r\n                />\r\n\r\n\r\n                <Grid\r\n                    item\r\n                    xs={12}\r\n                    style={{\r\n                        padding: \"0px\",\r\n                    }}>\r\n\r\n\r\n\r\n                    {prevImage.length > 1 ? <><Masonry\r\n                        columns={2}\r\n                        spacing={0}\r\n                        style={{\r\n                            padding: \"0px\",\r\n                            overflow: 'hidden'\r\n                        }}\r\n                    >\r\n\r\n                        {prevImage.map((picture: any, index: any) => (\r\n\r\n                            <img onClick={() => {\r\n                                dispatch(UpdateUploadData(prevImage, picture));\r\n                                navRef.current.scrollIntoView({\r\n                                    behavior: \"smooth\",\r\n                                    block: \"start\",\r\n                                });\r\n                            }}\r\n\r\n                                key={index} style={{ width: '50%', cursor: 'pointer' }} src={picture} alt={`Image ${index}`} />\r\n\r\n                        ))}\r\n\r\n                    </Masonry ></> : null}\r\n\r\n                </Grid>\r\n\r\n\r\n\r\n            </Grid>\r\n\r\n\r\n\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport const TaskbarCrop = React.memo(TaskbarCropx);\r\n"]},"metadata":{},"sourceType":"module"}