{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\upload\\\\PreviewCanvas.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction PreviewCanvasx({\n  cropCanvasRef,\n  image,\n  getSliderWidth,\n  index,\n  CropImageHolder,\n  zoom\n}) {\n  _s();\n\n  ///\n  ///\n  ///DARKMODE FROM REDUX\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const canvasRef = useRef(null);\n  const [imagehold, setimagehold] = useState(null);\n  const [imageWidth, setimageWidth] = useState(null);\n  const [imageHeight, setimageHeight] = useState(null);\n  const [imageW, setimageW] = useState(null);\n  const [imageH, setimageH] = useState(null);\n  useEffect(() => {\n    const catimage = new Image();\n    catimage.src = image;\n\n    catimage.onload = function () {\n      setimagehold(catimage);\n      let nw = 0;\n      let nh = 0;\n\n      if (CropImageHolder) {\n        nw = cropCanvasRef.current.width;\n        nh = cropCanvasRef.current.height;\n        setimageW(cropCanvasRef.current.width * 1.5);\n        setimageH(cropCanvasRef.current.height * 1.5);\n      } else {\n        nw = catimage.naturalWidth;\n        nh = catimage.naturalHeight;\n        setimageW(catimage.naturalWidth * 1.5);\n        setimageH(catimage.naturalHeight * 1.5);\n      }\n\n      let aspectH = nw / nh;\n      let h = getSliderWidth / aspectH;\n      setimageHeight(h);\n    };\n  }, [image, imageHeight, getSliderWidth, cropCanvasRef, CropImageHolder]);\n  useEffect(() => {\n    if (imagehold && canvasRef.current) {\n      const ctx = canvasRef.current.getContext(\"2d\");\n      canvasRef.current.height = imageH;\n      canvasRef.current.width = imageW;\n      let aspectH = nw / nh;\n      let hw = imageW / aspectH;\n      ctx.drawImage(imagehold, 0, 0, hw * zoom, imageH * zoom);\n      canvasRef.current.style.width = `${getSliderWidth}px`;\n      canvasRef.current.style.height = `${imageHeight}px`;\n    }\n  }, [imagehold, canvasRef, CropImageHolder]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      className: darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\",\n      ref: canvasRef,\n      style: {\n        padding: \"0px\",\n        marginTop: index === 0 || index === 1 || index === 2 ? \"0px\" : \"-5px\"\n      }\n    }, image, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(PreviewCanvasx, \"E6oIUX3FGpVIwpHvk62Cd9EQmuo=\", false, function () {\n  return [useSelector];\n});\n\n_c = PreviewCanvasx;\nexport const PreviewCanvas = /*#__PURE__*/React.memo(PreviewCanvasx);\n_c2 = PreviewCanvas;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PreviewCanvasx\");\n$RefreshReg$(_c2, \"PreviewCanvas\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/upload/PreviewCanvas.tsx"],"names":["React","useRef","useState","useEffect","useSelector","PreviewCanvasx","cropCanvasRef","image","getSliderWidth","index","CropImageHolder","zoom","darkmode","state","GlobalReducer","darkmodeReducer","canvasRef","imagehold","setimagehold","imageWidth","setimageWidth","imageHeight","setimageHeight","imageW","setimageW","imageH","setimageH","catimage","Image","src","onload","nw","nh","current","width","height","naturalWidth","naturalHeight","aspectH","h","ctx","getContext","hw","drawImage","style","padding","marginTop","PreviewCanvas","memo"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport Cropper from \"react-easy-crop\";\r\nimport MusicNoteIcon from \"@mui/icons-material/MusicNote\";\r\nimport PhotoIcon from \"@mui/icons-material/Photo\";\r\nimport GifIcon from \"@mui/icons-material/Gif\";\r\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\r\nimport Slider from \"@mui/material/Slider\";\r\nimport { AnySoaRecord } from \"dns\";\r\n\r\nfunction PreviewCanvasx({\r\n  cropCanvasRef,\r\n  image,\r\n  getSliderWidth,\r\n  index,\r\n  CropImageHolder,\r\n  zoom,\r\n}: any): JSX.Element {\r\n  ///\r\n  ///\r\n  ///DARKMODE FROM REDUX\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n\r\n  const darkmodeReducer = darkmode;\r\n\r\n  const canvasRef: any = useRef(null);\r\n\r\n  const [imagehold, setimagehold] = useState<any>(null);\r\n  const [imageWidth, setimageWidth] = useState<any>(null);\r\n  const [imageHeight, setimageHeight] = useState<any>(null);\r\n\r\n  const [imageW, setimageW] = useState<any>(null);\r\n  const [imageH, setimageH] = useState<any>(null);\r\n\r\n  useEffect(() => {\r\n    const catimage = new Image();\r\n    catimage.src = image;\r\n    catimage.onload = function () {\r\n      setimagehold(catimage);\r\n\r\n      let nw = 0;\r\n      let nh = 0;\r\n\r\n      if (CropImageHolder) {\r\n        nw = cropCanvasRef.current.width;\r\n        nh = cropCanvasRef.current.height;\r\n        setimageW(cropCanvasRef.current.width * 1.5);\r\n        setimageH(cropCanvasRef.current.height * 1.5);\r\n      } else {\r\n        nw = catimage.naturalWidth;\r\n        nh = catimage.naturalHeight;\r\n        setimageW(catimage.naturalWidth * 1.5);\r\n        setimageH(catimage.naturalHeight * 1.5);\r\n      }\r\n\r\n      let aspectH = nw / nh;\r\n      let h = getSliderWidth / aspectH;\r\n      setimageHeight(h);\r\n    };\r\n  }, [image, imageHeight, getSliderWidth, cropCanvasRef, CropImageHolder]);\r\n\r\n  useEffect(() => {\r\n    if (imagehold && canvasRef.current) {\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n      canvasRef.current.height = imageH;\r\n      canvasRef.current.width = imageW;\r\n\r\n      let aspectH = nw / nh;\r\n      let hw = imageW / aspectH;\r\n\r\n      ctx.drawImage(imagehold, 0, 0, hw * zoom, imageH * zoom);\r\n\r\n      canvasRef.current.style.width = `${getSliderWidth}px`;\r\n      canvasRef.current.style.height = `${imageHeight}px`;\r\n    }\r\n  }, [imagehold, canvasRef, CropImageHolder]);\r\n\r\n  return (\r\n    <>\r\n      <canvas\r\n        className={darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\"}\r\n        ref={canvasRef}\r\n        key={image}\r\n        style={{\r\n          padding: \"0px\",\r\n          marginTop: index === 0 || index === 1 || index === 2 ? \"0px\" : \"-5px\",\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport const PreviewCanvas = React.memo(PreviewCanvasx);\r\n"]},"metadata":{},"sourceType":"module"}