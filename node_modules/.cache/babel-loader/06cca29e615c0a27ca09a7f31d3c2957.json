{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\upload\\\\PreviewCanvasCropAll.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect, useLayoutEffect, useCallback } from \"react\";\nimport { matchTablet, matchMobile } from \"../DetectDevice\";\nimport { Grid } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction PreviewCanvasCropAllx({\n  setwaitONLOAD,\n  cropCanvasRef,\n  image,\n  getpreviewFixedWidth,\n  index,\n  CropImageHolder,\n  cropheight,\n  cropwidth,\n  BoxCropActivated,\n  hdcanvasvalue,\n  SourceWidthForCropX,\n  SourceWidthForCropY,\n  WideImageCheck,\n  crop,\n  getCropHeight,\n  canvasToimage,\n  refWithimageData,\n  addUploadItemsRef,\n  itemUploadRef,\n  itemUploadRefThumb,\n  itemUploadRefSD,\n  setsuperCropLoadFade,\n  length,\n  filterImage,\n  setfilterImage,\n  setallowFilters,\n  allowCropAllCanvas,\n  cutOffLoader,\n  setcutOffLoader,\n  addUploadItemsRefThumb,\n  addUploadItemsRefSD,\n  zoom,\n  type\n}) {\n  _s();\n\n  ///\n  ///\n  ///DARKMODE FROM REDUX\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const [SDquality, setSDquality] = useState(0);\n  const canvasRef = useRef(null);\n  const [previewFilehold, setpreviewFilehold] = useState(null);\n  const [previewCSSHeight, setpreviewCSSHeight] = useState(null);\n  const [cropCanvasWidth, setcropCanvasWidth] = useState(null);\n  const [cropCanvasHeight, setcropCanvasHeight] = useState(null);\n  const Timer1 = useRef(null);\n  const Timer2 = useRef(null);\n  const [imageWidthWithAspectRatio, setimageWidthWithAspectRatio] = useState(null);\n  const [imageWidthWithAspectRatioxx, setimageWidthWithAspectRatioxx] = useState(null);\n  const getSDquality = useRef(null);\n  useEffect(() => {\n    if (getSDquality.current) {\n      if (matchTablet || matchMobile) {\n        setSDquality(getSDquality.current.clientWidth);\n      } else {\n        setSDquality(getSDquality.current.clientHeight);\n      }\n    }\n  }, []);\n  useLayoutEffect(() => {\n    const previewFileReadimage = new Image();\n    previewFileReadimage.src = image;\n\n    previewFileReadimage.onload = function () {\n      if (cropCanvasRef.current) {\n        setpreviewFilehold(previewFileReadimage);\n        var cropH, cropW;\n\n        if (CropImageHolder) {\n          cropW = cropCanvasRef.current.width;\n          cropH = cropCanvasRef.current.height;\n        } else {\n          cropW = previewFileReadimage.naturalWidth;\n          cropH = previewFileReadimage.naturalHeight;\n        }\n\n        var quality;\n        type == 1 ? quality = 1500 : quality = 500;\n\n        if (cropW > cropH) {\n          var Ratio1500 = cropW / quality;\n          var height1500 = cropH / Ratio1500;\n          setcropCanvasWidth(quality);\n          setcropCanvasHeight(height1500);\n        } else {\n          var Ratio1500 = cropH / quality;\n          var width1500 = cropW / Ratio1500;\n          setcropCanvasWidth(width1500);\n          setcropCanvasHeight(quality);\n        }\n\n        let CropAspectRatio = cropwidth / cropheight;\n        let newheight = getpreviewFixedWidth / CropAspectRatio;\n        setpreviewCSSHeight(newheight);\n        let AspectRatioPrevHeightandWidth = previewFileReadimage.naturalHeight / previewFileReadimage.naturalWidth;\n        let newWidth = cropCanvasHeight / AspectRatioPrevHeightandWidth;\n        setimageWidthWithAspectRatio(newWidth);\n        let AspectRatioPrevHeightandWidthx = cropCanvasWidth / cropCanvasHeight;\n        let newWidthx = getpreviewFixedWidth / AspectRatioPrevHeightandWidthx;\n        setimageWidthWithAspectRatioxx(newWidthx);\n      }\n    };\n  }, [image, BoxCropActivated, previewCSSHeight, getpreviewFixedWidth, cropCanvasRef, CropImageHolder, cropwidth, cropheight, crop]); ///\n  ///\n  ///\n  ///  CROPED CANVAS CONVER TO IMAGE\n\n  const convertCroppedCanvasToImage = useCallback(() => {\n    if (type == 1) {\n      itemUploadRef.current[index].src = canvasRef.current.toDataURL(); ///////////////////////////////\n\n      const newArraa = [...filterImage];\n      newArraa[index] = canvasRef.current.toDataURL();\n      setfilterImage(newArraa); ///////////////////////////////\n\n      if (length - 1 === index) {\n        setwaitONLOAD(false);\n        setsuperCropLoadFade(false);\n        setallowFilters(true);\n      }\n    } else {\n      itemUploadRefThumb.current[index].src = canvasRef.current.toDataURL();\n    }\n  }, [canvasToimage, itemUploadRef, itemUploadRefThumb, itemUploadRefSD, canvasRef]); ///\n  ///\n  ///\n  ///  DRAW CANVAS ON CROP COMPLETE CLICK\n\n  const drawcrop = useCallback(() => {\n    if (previewFilehold && canvasRef.current) {\n      const ctx = canvasRef.current.getContext(\"2d\");\n      canvasRef.current.height = cropCanvasHeight;\n      canvasRef.current.width = cropCanvasWidth;\n\n      if (BoxCropActivated) {\n        var CropAspectRatio = cropCanvasWidth / cropCanvasHeight;\n        var newheightq = getpreviewFixedWidth / CropAspectRatio;\n\n        if (previewFilehold.naturalWidth > previewFilehold.naturalHeight) {\n          var zoomINBOXWide = previewFilehold.naturalWidth / previewFilehold.naturalHeight;\n          let AspectRatioPrevHeightandWidthxWideCRop = previewFilehold.naturalWidth / previewFilehold.naturalHeight;\n          let boxWIDEheight = cropCanvasWidth * zoomINBOXWide / AspectRatioPrevHeightandWidthxWideCRop;\n          var centerpreview = canvasRef.current.width / 2 - cropCanvasWidth * zoomINBOXWide / 2;\n          var RatiofromOriginalandfixedHeight = previewFilehold.naturalHeight / cropCanvasWidth * zoomINBOXWide;\n          var SourceWidthForCropXx = previewFilehold.naturalWidth / RatiofromOriginalandfixedHeight;\n          var dragDistanceX = cropCanvasWidth * zoomINBOXWide * zoom - cropCanvasWidth;\n          let AspectRatioPrevHeightandWidthxWideCRopx = previewFilehold.naturalWidth / previewFilehold.naturalHeight;\n          let boxWIDEheightx = cropCanvasWidth * zoomINBOXWide * zoom / AspectRatioPrevHeightandWidthxWideCRopx;\n          var dragDistanceY = boxWIDEheightx - cropCanvasHeight;\n          var cropXprev = crop.x;\n          cropXprev = cropXprev * cropCanvasWidth * zoomINBOXWide / SourceWidthForCropX;\n\n          if (cropXprev < -dragDistanceX) {\n            cropXprev = -dragDistanceX;\n          } else if (cropXprev > 0) {\n            cropXprev = 0;\n          } else {}\n\n          var cropYprev = crop.y;\n          cropYprev = cropYprev * cropCanvasWidth * zoomINBOXWide / SourceWidthForCropX;\n\n          if (cropYprev < -dragDistanceY) {\n            cropYprev = -dragDistanceY;\n          } else if (cropYprev > 0) {\n            cropYprev = 0;\n          } else {} ////////////////////\n\n\n          requestAnimationFrame(async () => {\n            ctx.drawImage(previewFilehold, WideImageCheck ? cropXprev : 0, WideImageCheck ? cropYprev : 0, cropCanvasWidth * zoomINBOXWide * zoom, boxWIDEheight * zoom);\n\n            try {\n              convertCroppedCanvasToImage();\n            } catch {\n              console.log(\"previewcanvascropall cropper  error\");\n            }\n          }); ////////////////////\n        } else {\n          let AspectRatioPrevHeightandWidthxBox = previewFilehold.naturalWidth / previewFilehold.naturalHeight;\n          let boxedHeight = cropCanvasWidth / AspectRatioPrevHeightandWidthxBox;\n          let AspectRatioPrevHeightandWidthxBoxx = previewFilehold.naturalWidth / previewFilehold.naturalHeight;\n          let boxedHeightx = cropCanvasWidth * zoom / AspectRatioPrevHeightandWidthxBoxx;\n          var dragDistanceX = cropCanvasWidth * zoom - cropCanvasWidth;\n          var dragDistanceY = boxedHeightx - cropCanvasHeight;\n          var cropYprev = crop.y;\n          cropYprev = cropYprev * boxedHeight / SourceWidthForCropY;\n\n          if (cropYprev < -dragDistanceY) {\n            cropYprev = -dragDistanceY;\n          } else if (cropYprev > 0) {\n            cropYprev = 0;\n          } else {}\n\n          var cropXprev = crop.x;\n          cropXprev = cropXprev * boxedHeight / SourceWidthForCropY;\n\n          if (cropXprev < -dragDistanceX) {\n            cropXprev = -dragDistanceX;\n          } else if (cropXprev > 0) {\n            cropXprev = 0;\n          } else {} ////////////////////\n\n\n          requestAnimationFrame(async () => {\n            ctx.drawImage(previewFilehold, WideImageCheck ? 0 : cropXprev, WideImageCheck ? 0 : cropYprev, cropCanvasWidth * zoom, boxedHeight * zoom);\n\n            try {\n              convertCroppedCanvasToImage();\n            } catch {\n              console.log(\"previewcanvascropall cropper  error\");\n            }\n          }); ////////////////////\n        }\n\n        canvasRef.current.style.width = `${getpreviewFixedWidth}px`;\n        canvasRef.current.style.height = `${newheightq}px`;\n      } else {\n        var xtraZoom = cropCanvasWidth / imageWidthWithAspectRatio;\n        var centerpreview = canvasRef.current.width / 2 - imageWidthWithAspectRatio / 2;\n        var centerpreview2 = canvasRef.current.height / 3 - cropCanvasHeight * xtraZoom / 3;\n\n        if (imageWidthWithAspectRatio < cropCanvasWidth) {\n          if (cropCanvasWidth > cropCanvasHeight) {\n            ////WIDE IMAGE SOURCE NOT PROPERLY FITTED\n            ////////////////////\n            requestAnimationFrame(async () => {\n              ctx.drawImage(previewFilehold, 0, centerpreview2, imageWidthWithAspectRatio * xtraZoom, cropCanvasHeight * xtraZoom);\n\n              try {\n                convertCroppedCanvasToImage();\n              } catch {\n                console.log(\"previewcanvascropall cropper  error\");\n              }\n            }); ////////////////////\n          } else {\n            ////LONG IMAGE SOURCE NOT PROPERLY FITTED\n            ////////////////////\n            requestAnimationFrame(async () => {\n              ctx.drawImage(previewFilehold, 0, 0, imageWidthWithAspectRatio * xtraZoom, cropCanvasHeight * xtraZoom);\n\n              try {\n                convertCroppedCanvasToImage();\n              } catch {\n                console.log(\"previewcanvascropall cropper  error\");\n              }\n            }); ////////////////////\n          }\n        } else {\n          ////////LONG IMAGE SOURCE WIDE IMAGE SOURCE\n          requestAnimationFrame(async () => {\n            ctx.drawImage(previewFilehold, centerpreview, 0, imageWidthWithAspectRatio, cropCanvasHeight);\n\n            try {\n              convertCroppedCanvasToImage();\n            } catch {\n              console.log(\"previewcanvascropall cropper  error\");\n            }\n          }); ////////////////////\n        }\n\n        canvasRef.current.style.width = `${getpreviewFixedWidth}px`;\n        canvasRef.current.style.height = `${previewCSSHeight}px`;\n      }\n    }\n  }, [previewFilehold, canvasRef, CropImageHolder, cropCanvasWidth, cropCanvasHeight, imageWidthWithAspectRatio, WideImageCheck, zoom]);\n  const [callLayoutoNCE, setcallLayoutoNCE] = useState(true);\n  useLayoutEffect(() => {\n    if (canvasToimage && callLayoutoNCE && canvasRef.current) {\n      drawcrop();\n      setcallLayoutoNCE(false);\n    }\n  }, [canvasToimage, callLayoutoNCE, canvasRef]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        xs: 12,\n        item: true,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          ref: addUploadItemsRef,\n          style: {\n            width: \"100%\",\n            height: \"auto\",\n            position: \"relative\",\n            margin: \"auto\",\n            display: callLayoutoNCE ? \"none\" : \"none\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          ref: addUploadItemsRefThumb,\n          style: {\n            width: \"100%\",\n            height: \"auto\",\n            position: \"relative\",\n            margin: \"auto\",\n            display: callLayoutoNCE ? \"none\" : \"block\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          ref: addUploadItemsRefSD,\n          style: {\n            width: \"100%\",\n            height: \"auto\",\n            position: \"relative\",\n            margin: \"auto\",\n            display: callLayoutoNCE ? \"none\" : \"none\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        ref: getSDquality,\n        xs: 12,\n        style: {\n          width: \"100%\",\n          padding: \"0px\",\n          height: \"100%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 7\n    }, this), allowCropAllCanvas ? /*#__PURE__*/_jsxDEV(\"canvas\", {\n      className: darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\",\n      ref: canvasRef,\n      style: {\n        padding: \"0px\",\n        display: callLayoutoNCE ? \"block\" : \"none\",\n        marginTop: index === 0 || index === 1 || index === 2 ? \"0px\" : \"-5px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 475,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true);\n}\n\n_s(PreviewCanvasCropAllx, \"dddfyQ34FY7r6QxSdXVRdzRexT8=\", false, function () {\n  return [useSelector];\n});\n\n_c = PreviewCanvasCropAllx;\nexport const PreviewCanvasCropAll = /*#__PURE__*/React.memo(PreviewCanvasCropAllx);\n_c2 = PreviewCanvasCropAll;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PreviewCanvasCropAllx\");\n$RefreshReg$(_c2, \"PreviewCanvasCropAll\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/upload/PreviewCanvasCropAll.tsx"],"names":["React","useRef","useState","useEffect","useLayoutEffect","useCallback","matchTablet","matchMobile","Grid","useSelector","PreviewCanvasCropAllx","setwaitONLOAD","cropCanvasRef","image","getpreviewFixedWidth","index","CropImageHolder","cropheight","cropwidth","BoxCropActivated","hdcanvasvalue","SourceWidthForCropX","SourceWidthForCropY","WideImageCheck","crop","getCropHeight","canvasToimage","refWithimageData","addUploadItemsRef","itemUploadRef","itemUploadRefThumb","itemUploadRefSD","setsuperCropLoadFade","length","filterImage","setfilterImage","setallowFilters","allowCropAllCanvas","cutOffLoader","setcutOffLoader","addUploadItemsRefThumb","addUploadItemsRefSD","zoom","type","darkmode","state","GlobalReducer","darkmodeReducer","SDquality","setSDquality","canvasRef","previewFilehold","setpreviewFilehold","previewCSSHeight","setpreviewCSSHeight","cropCanvasWidth","setcropCanvasWidth","cropCanvasHeight","setcropCanvasHeight","Timer1","Timer2","imageWidthWithAspectRatio","setimageWidthWithAspectRatio","imageWidthWithAspectRatioxx","setimageWidthWithAspectRatioxx","getSDquality","current","clientWidth","clientHeight","previewFileReadimage","Image","src","onload","cropH","cropW","width","height","naturalWidth","naturalHeight","quality","Ratio1500","height1500","width1500","CropAspectRatio","newheight","AspectRatioPrevHeightandWidth","newWidth","AspectRatioPrevHeightandWidthx","newWidthx","convertCroppedCanvasToImage","toDataURL","newArraa","drawcrop","ctx","getContext","newheightq","zoomINBOXWide","AspectRatioPrevHeightandWidthxWideCRop","boxWIDEheight","centerpreview","RatiofromOriginalandfixedHeight","SourceWidthForCropXx","dragDistanceX","AspectRatioPrevHeightandWidthxWideCRopx","boxWIDEheightx","dragDistanceY","cropXprev","x","cropYprev","y","requestAnimationFrame","drawImage","console","log","AspectRatioPrevHeightandWidthxBox","boxedHeight","AspectRatioPrevHeightandWidthxBoxx","boxedHeightx","style","xtraZoom","centerpreview2","callLayoutoNCE","setcallLayoutoNCE","position","margin","display","padding","marginTop","PreviewCanvasCropAll","memo"],"mappings":"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","sourcesContent":["import React, {\r\n  useRef,\r\n  useState,\r\n  useEffect,\r\n  useLayoutEffect,\r\n  useCallback,\r\n} from \"react\";\r\nimport { matchPc, matchTablet, matchMobile } from \"../DetectDevice\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport Cropper from \"react-easy-crop\";\r\nimport MusicNoteIcon from \"@mui/icons-material/MusicNote\";\r\nimport PhotoIcon from \"@mui/icons-material/Photo\";\r\nimport GifIcon from \"@mui/icons-material/Gif\";\r\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\r\nimport Slider from \"@mui/material/Slider\";\r\nimport { AnySoaRecord } from \"dns\";\r\n\r\nfunction PreviewCanvasCropAllx({\r\n  setwaitONLOAD,\r\n  cropCanvasRef,\r\n  image,\r\n  getpreviewFixedWidth,\r\n  index,\r\n  CropImageHolder,\r\n  cropheight,\r\n  cropwidth,\r\n  BoxCropActivated,\r\n  hdcanvasvalue,\r\n  SourceWidthForCropX,\r\n  SourceWidthForCropY,\r\n  WideImageCheck,\r\n  crop,\r\n  getCropHeight,\r\n  canvasToimage,\r\n  refWithimageData,\r\n  addUploadItemsRef,\r\n  itemUploadRef,\r\n  itemUploadRefThumb,\r\n  itemUploadRefSD,\r\n  setsuperCropLoadFade,\r\n  length,\r\n  filterImage,\r\n  setfilterImage,\r\n  setallowFilters,\r\n  allowCropAllCanvas,\r\n  cutOffLoader,\r\n  setcutOffLoader,\r\n  addUploadItemsRefThumb,\r\n  addUploadItemsRefSD,\r\n  zoom,\r\n  type,\r\n}: any): JSX.Element {\r\n  ///\r\n  ///\r\n  ///DARKMODE FROM REDUX\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n\r\n  const darkmodeReducer = darkmode;\r\n\r\n\r\n  const [SDquality, setSDquality] = useState<number>(0);\r\n  \r\n  const canvasRef: any = useRef(null);\r\n\r\n  const [previewFilehold, setpreviewFilehold] = useState<any>(null);\r\n\r\n  const [previewCSSHeight, setpreviewCSSHeight] = useState<any>(null);\r\n\r\n  const [cropCanvasWidth, setcropCanvasWidth] = useState<any>(null);\r\n\r\n  const [cropCanvasHeight, setcropCanvasHeight] = useState<any>(null);\r\n\r\n  const Timer1 = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n\r\n  const Timer2 = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n\r\n  const [imageWidthWithAspectRatio, setimageWidthWithAspectRatio] =\r\n    useState<any>(null);\r\n\r\n  const [imageWidthWithAspectRatioxx, setimageWidthWithAspectRatioxx] =\r\n    useState<any>(null);\r\n\r\n  const getSDquality: any = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (getSDquality.current) {\r\n      if (matchTablet || matchMobile) {\r\n        setSDquality(getSDquality.current.clientWidth);\r\n      } else {\r\n        setSDquality(getSDquality.current.clientHeight);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  useLayoutEffect(() => {\r\n    const previewFileReadimage = new Image();\r\n    previewFileReadimage.src = image;\r\n    previewFileReadimage.onload = function () {\r\n      if (cropCanvasRef.current) {\r\n        setpreviewFilehold(previewFileReadimage);\r\n        var cropH, cropW;\r\n        if (CropImageHolder) {\r\n          cropW = cropCanvasRef.current.width;\r\n          cropH = cropCanvasRef.current.height;\r\n        } else {\r\n          cropW = previewFileReadimage.naturalWidth;\r\n          cropH = previewFileReadimage.naturalHeight;\r\n        }\r\n        var quality;\r\n        type == 1 ? (quality = 1500) : (quality = 500);\r\n        if (cropW > cropH) {\r\n          var Ratio1500 = cropW / quality;\r\n          var height1500 = cropH / Ratio1500;\r\n\r\n          setcropCanvasWidth(quality);\r\n          setcropCanvasHeight(height1500);\r\n        } else {\r\n          var Ratio1500 = cropH / quality;\r\n          var width1500 = cropW / Ratio1500;\r\n\r\n          setcropCanvasWidth(width1500);\r\n          setcropCanvasHeight(quality);\r\n        }\r\n\r\n        let CropAspectRatio = cropwidth / cropheight;\r\n        let newheight = getpreviewFixedWidth / CropAspectRatio;\r\n        setpreviewCSSHeight(newheight);\r\n\r\n        let AspectRatioPrevHeightandWidth =\r\n          previewFileReadimage.naturalHeight /\r\n          previewFileReadimage.naturalWidth;\r\n        let newWidth = cropCanvasHeight / AspectRatioPrevHeightandWidth;\r\n        setimageWidthWithAspectRatio(newWidth);\r\n\r\n        let AspectRatioPrevHeightandWidthx = cropCanvasWidth / cropCanvasHeight;\r\n        let newWidthx = getpreviewFixedWidth / AspectRatioPrevHeightandWidthx;\r\n        setimageWidthWithAspectRatioxx(newWidthx);\r\n      }\r\n    };\r\n  }, [\r\n    image,\r\n    BoxCropActivated,\r\n    previewCSSHeight,\r\n    getpreviewFixedWidth,\r\n    cropCanvasRef,\r\n    CropImageHolder,\r\n    cropwidth,\r\n    cropheight,\r\n    crop,\r\n  ]);\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  ///  CROPED CANVAS CONVER TO IMAGE\r\n  const convertCroppedCanvasToImage = useCallback(() => {\r\n    if (type == 1) {\r\n      itemUploadRef.current[index].src = canvasRef.current.toDataURL();\r\n      ///////////////////////////////\r\n      const newArraa = [...filterImage];\r\n      newArraa[index] = canvasRef.current.toDataURL();\r\n      setfilterImage(newArraa);\r\n      ///////////////////////////////\r\n      if (length - 1 === index) {\r\n        setwaitONLOAD(false);\r\n        setsuperCropLoadFade(false);\r\n        setallowFilters(true);\r\n      }\r\n    } else {\r\n      itemUploadRefThumb.current[index].src = canvasRef.current.toDataURL();\r\n    }\r\n  }, [\r\n    canvasToimage,\r\n    itemUploadRef,\r\n    itemUploadRefThumb,\r\n    itemUploadRefSD,\r\n    canvasRef,\r\n  ]);\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  ///  DRAW CANVAS ON CROP COMPLETE CLICK\r\n  const drawcrop = useCallback(() => {\r\n    if (previewFilehold && canvasRef.current) {\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n\r\n      canvasRef.current.height = cropCanvasHeight;\r\n      canvasRef.current.width = cropCanvasWidth;\r\n\r\n      if (BoxCropActivated) {\r\n        var CropAspectRatio = cropCanvasWidth / cropCanvasHeight;\r\n        var newheightq = getpreviewFixedWidth / CropAspectRatio;\r\n\r\n        if (previewFilehold.naturalWidth > previewFilehold.naturalHeight) {\r\n          var zoomINBOXWide =\r\n            previewFilehold.naturalWidth / previewFilehold.naturalHeight;\r\n\r\n          let AspectRatioPrevHeightandWidthxWideCRop =\r\n            previewFilehold.naturalWidth / previewFilehold.naturalHeight;\r\n          let boxWIDEheight =\r\n            (cropCanvasWidth * zoomINBOXWide) /\r\n            AspectRatioPrevHeightandWidthxWideCRop;\r\n\r\n          var centerpreview =\r\n            canvasRef.current.width / 2 - (cropCanvasWidth * zoomINBOXWide) / 2;\r\n\r\n          var RatiofromOriginalandfixedHeight =\r\n            (previewFilehold.naturalHeight / cropCanvasWidth) * zoomINBOXWide;\r\n          var SourceWidthForCropXx =\r\n            previewFilehold.naturalWidth / RatiofromOriginalandfixedHeight;\r\n\r\n          var dragDistanceX =\r\n            cropCanvasWidth * zoomINBOXWide * zoom - cropCanvasWidth;\r\n\r\n          let AspectRatioPrevHeightandWidthxWideCRopx =\r\n            previewFilehold.naturalWidth / previewFilehold.naturalHeight;\r\n          let boxWIDEheightx =\r\n            (cropCanvasWidth * zoomINBOXWide * zoom) /\r\n            AspectRatioPrevHeightandWidthxWideCRopx;\r\n\r\n          var dragDistanceY = boxWIDEheightx - cropCanvasHeight;\r\n\r\n          var cropXprev = crop.x;\r\n          cropXprev =\r\n            (cropXprev * cropCanvasWidth * zoomINBOXWide) / SourceWidthForCropX;\r\n\r\n          if (cropXprev < -dragDistanceX) {\r\n            cropXprev = -dragDistanceX;\r\n          } else if (cropXprev > 0) {\r\n            cropXprev = 0;\r\n          } else {\r\n          }\r\n\r\n          var cropYprev = crop.y;\r\n\r\n          cropYprev =\r\n            (cropYprev * cropCanvasWidth * zoomINBOXWide) / SourceWidthForCropX;\r\n\r\n          if (cropYprev < -dragDistanceY) {\r\n            cropYprev = -dragDistanceY;\r\n          } else if (cropYprev > 0) {\r\n            cropYprev = 0;\r\n          } else {\r\n          }\r\n          ////////////////////\r\n\r\n          requestAnimationFrame(async () => {\r\n            ctx.drawImage(\r\n              previewFilehold,\r\n              WideImageCheck ? cropXprev : 0,\r\n              WideImageCheck ? cropYprev : 0,\r\n              cropCanvasWidth * zoomINBOXWide * zoom,\r\n              boxWIDEheight * zoom\r\n            );\r\n            try {\r\n              convertCroppedCanvasToImage();\r\n            } catch {\r\n              console.log(\"previewcanvascropall cropper  error\");\r\n            }\r\n          });\r\n\r\n          ////////////////////\r\n        } else {\r\n          let AspectRatioPrevHeightandWidthxBox =\r\n            previewFilehold.naturalWidth / previewFilehold.naturalHeight;\r\n          let boxedHeight = cropCanvasWidth / AspectRatioPrevHeightandWidthxBox;\r\n\r\n          let AspectRatioPrevHeightandWidthxBoxx =\r\n            previewFilehold.naturalWidth / previewFilehold.naturalHeight;\r\n          let boxedHeightx =\r\n            (cropCanvasWidth * zoom) / AspectRatioPrevHeightandWidthxBoxx;\r\n\r\n          var dragDistanceX = cropCanvasWidth * zoom - cropCanvasWidth;\r\n          var dragDistanceY = boxedHeightx - cropCanvasHeight;\r\n\r\n          var cropYprev = crop.y;\r\n\r\n          cropYprev = (cropYprev * boxedHeight) / SourceWidthForCropY;\r\n\r\n          if (cropYprev < -dragDistanceY) {\r\n            cropYprev = -dragDistanceY;\r\n          } else if (cropYprev > 0) {\r\n            cropYprev = 0;\r\n          } else {\r\n          }\r\n\r\n          var cropXprev = crop.x;\r\n          cropXprev = (cropXprev * boxedHeight) / SourceWidthForCropY;\r\n          if (cropXprev < -dragDistanceX) {\r\n            cropXprev = -dragDistanceX;\r\n          } else if (cropXprev > 0) {\r\n            cropXprev = 0;\r\n          } else {\r\n          }\r\n\r\n          ////////////////////\r\n\r\n          requestAnimationFrame(async () => {\r\n            ctx.drawImage(\r\n              previewFilehold,\r\n              WideImageCheck ? 0 : cropXprev,\r\n              WideImageCheck ? 0 : cropYprev,\r\n              cropCanvasWidth * zoom,\r\n              boxedHeight * zoom\r\n            );\r\n            try {\r\n              convertCroppedCanvasToImage();\r\n            } catch {\r\n              console.log(\"previewcanvascropall cropper  error\");\r\n            }\r\n          });\r\n\r\n          ////////////////////\r\n        }\r\n\r\n        canvasRef.current.style.width = `${getpreviewFixedWidth}px`;\r\n        canvasRef.current.style.height = `${newheightq}px`;\r\n      } else {\r\n        var xtraZoom = cropCanvasWidth / imageWidthWithAspectRatio;\r\n\r\n        var centerpreview =\r\n          canvasRef.current.width / 2 - imageWidthWithAspectRatio / 2;\r\n\r\n        var centerpreview2 =\r\n          canvasRef.current.height / 3 - (cropCanvasHeight * xtraZoom) / 3;\r\n\r\n        if (imageWidthWithAspectRatio < cropCanvasWidth) {\r\n          if (cropCanvasWidth > cropCanvasHeight) {\r\n            ////WIDE IMAGE SOURCE NOT PROPERLY FITTED\r\n\r\n            ////////////////////\r\n\r\n            requestAnimationFrame(async () => {\r\n              ctx.drawImage(\r\n                previewFilehold,\r\n                0,\r\n                centerpreview2,\r\n                imageWidthWithAspectRatio * xtraZoom,\r\n                cropCanvasHeight * xtraZoom\r\n              );\r\n              try {\r\n                convertCroppedCanvasToImage();\r\n              } catch {\r\n                console.log(\"previewcanvascropall cropper  error\");\r\n              }\r\n            });\r\n\r\n            ////////////////////\r\n          } else {\r\n            ////LONG IMAGE SOURCE NOT PROPERLY FITTED\r\n\r\n            ////////////////////\r\n\r\n            requestAnimationFrame(async () => {\r\n              ctx.drawImage(\r\n                previewFilehold,\r\n                0,\r\n                0,\r\n                imageWidthWithAspectRatio * xtraZoom,\r\n                cropCanvasHeight * xtraZoom\r\n              );\r\n              try {\r\n                convertCroppedCanvasToImage();\r\n              } catch {\r\n                console.log(\"previewcanvascropall cropper  error\");\r\n              }\r\n            });\r\n\r\n            ////////////////////\r\n          }\r\n        } else {\r\n          ////////LONG IMAGE SOURCE WIDE IMAGE SOURCE\r\n\r\n          requestAnimationFrame(async () => {\r\n            ctx.drawImage(\r\n              previewFilehold,\r\n              centerpreview,\r\n              0,\r\n              imageWidthWithAspectRatio,\r\n              cropCanvasHeight\r\n            );\r\n            try {\r\n              convertCroppedCanvasToImage();\r\n            } catch {\r\n              console.log(\"previewcanvascropall cropper  error\");\r\n            }\r\n          });\r\n\r\n          ////////////////////\r\n        }\r\n        canvasRef.current.style.width = `${getpreviewFixedWidth}px`;\r\n        canvasRef.current.style.height = `${previewCSSHeight}px`;\r\n      }\r\n    }\r\n  }, [\r\n    previewFilehold,\r\n    canvasRef,\r\n    CropImageHolder,\r\n    cropCanvasWidth,\r\n    cropCanvasHeight,\r\n    imageWidthWithAspectRatio,\r\n    WideImageCheck,\r\n    zoom,\r\n  ]);\r\n\r\n  const [callLayoutoNCE, setcallLayoutoNCE] = useState<any>(true);\r\n\r\n  useLayoutEffect(() => {\r\n    if (canvasToimage && callLayoutoNCE && canvasRef.current) {\r\n      drawcrop();\r\n      setcallLayoutoNCE(false);\r\n    }\r\n  }, [canvasToimage, callLayoutoNCE, canvasRef]);\r\n\r\n  return (\r\n    <>\r\n      <Grid container>\r\n        <Grid xs={12} item>\r\n          <img\r\n            ref={addUploadItemsRef}\r\n            style={{\r\n              width: \"100%\",\r\n              height: \"auto\",\r\n              position: \"relative\",\r\n              margin: \"auto\",\r\n              display: callLayoutoNCE ? \"none\" : \"none\",\r\n            }}\r\n          />\r\n\r\n          <img\r\n            ref={addUploadItemsRefThumb}\r\n            style={{\r\n              width: \"100%\",\r\n              height: \"auto\",\r\n              position: \"relative\",\r\n              margin: \"auto\",\r\n              display: callLayoutoNCE ? \"none\" : \"block\",\r\n            }}\r\n          />\r\n\r\n          <img\r\n            ref={addUploadItemsRefSD}\r\n            style={{\r\n              width: \"100%\",\r\n              height: \"auto\",\r\n              position: \"relative\",\r\n              margin: \"auto\",\r\n              display: callLayoutoNCE ? \"none\" : \"none\",\r\n            }}\r\n          />\r\n        </Grid>\r\n\r\n        <Grid\r\n          item\r\n          ref={getSDquality}\r\n          xs={12}\r\n          style={{ width: \"100%\", padding: \"0px\", height: \"100%\" }}\r\n        ></Grid>\r\n      </Grid>\r\n\r\n      {allowCropAllCanvas ? (\r\n        <canvas\r\n          className={\r\n            darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\"\r\n          }\r\n          ref={canvasRef}\r\n          style={{\r\n            padding: \"0px\",\r\n            display: callLayoutoNCE ? \"block\" : \"none\",\r\n            marginTop:\r\n              index === 0 || index === 1 || index === 2 ? \"0px\" : \"-5px\",\r\n          }}\r\n        />\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport const PreviewCanvasCropAll = React.memo(PreviewCanvasCropAllx);\r\n"]},"metadata":{},"sourceType":"module"}