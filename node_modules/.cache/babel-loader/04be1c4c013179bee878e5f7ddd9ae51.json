{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\profile\\\\ProfileOutter.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect, useCallback } from \"react\";\nimport { Paper } from \"@material-ui/core\";\nimport { matchPc } from \"../DetectDevice\";\nimport { useSelector } from \"react-redux\";\nimport \"./profile.css\";\nimport { Profile } from \"./Profile\";\nimport Axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ProfileOutter() {\n  _s();\n\n  const getSliderWidthRef = useRef(null);\n  const [formtype] = useState(1);\n  const [showModalForm, setShowModalForm] = useState(false);\n  const [getSliderWidth, setgetSliderWidth] = useState(0);\n  const [aboutTemplateGo] = useState(true);\n  const [commentTemplateGo] = useState(false);\n  const [postData, setPostData] = useState([]);\n  const postDivRef = useRef([]);\n  const postItemsRef = useRef([]);\n  var postbackheighthold = document.documentElement.clientHeight * 0.3;\n  const [postbackheight] = useState(postbackheighthold); ///\n  ///\n  ///CLOSE LOG MODAL\n\n  const [OpenModalFormOnce, setOpenModalFormOnce] = useState(false);\n  const CloseModalForm = useCallback(DeviceBackButtonClicked => {\n    ///onpopstate fires when back and forward buttons used\n    if (DeviceBackButtonClicked === 1) {\n      window.onpopstate = () => {\n        setShowModalForm(false);\n        setOpenModalFormOnce(false);\n      };\n    } else {\n      setShowModalForm(false);\n      setOpenModalFormOnce(false); ///Replace modal history state with previous history state\n\n      window.history.back();\n    }\n  }, []);\n  const OpenModalForm = useCallback(formtypedata => {\n    setShowModalForm(true); ///Replace current history state (since opening a modal Level 2 grid)...\n    /// if this was a level 1 grid (profile-info page use Pushstate to create new history state)\n\n    let modalName = \"Biography\";\n\n    if (!OpenModalFormOnce) {\n      window.history.pushState(null, \"\", modalName);\n      setOpenModalFormOnce(true);\n      CloseModalForm(1);\n    }\n  }, [OpenModalFormOnce, CloseModalForm]); ///\n  ///\n  ///\n  ///GET OPTIONS SLIDER IMAGE WIDTH FROM MATERIAL UI GRID\n\n  useEffect(() => {\n    if (getSliderWidthRef.current && getSliderWidthRef.current.clientWidth) {\n      setgetSliderWidth(getSliderWidthRef.current.clientWidth);\n    }\n  }, []); ///\n  ///\n  ///\n  /// INTERFACE/TYPES FOR SCREENHEIGHT AND DARKMODE\n\n  ///\n  ///\n  ///\n  /// GET SCREENHEIGHT FROM REDUX STORE\n  const {\n    screenHeight,\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const screenHeightReducer = screenHeight;\n  const darkmodeReducer = darkmode; ///\n  ///\n  ///\n  ///MUI PAPER STYLES FROM REDUX\n\n  const {\n    PaperStyleLight,\n    PaperStyleDark\n  } = useSelector(state => ({ ...state.PaperReducerLightnDark\n  }));\n  var PaperStyleReducer = \"\";\n\n  if (darkmodeReducer) {\n    PaperStyleReducer = PaperStyleDark;\n  } else {\n    PaperStyleReducer = PaperStyleLight;\n  }\n\n  function percentage(num, per) {\n    return num / 100 * per;\n  } ////////////////////////////////////////////////////////////////////\n  ///\n  ///\n  ///\n  ///CREATE REFS FROM POSTS AND ADD THEM TO ARRAY\n\n\n  const addPostItemsRef = itemsRef => {\n    if (itemsRef && !postItemsRef.current.includes(itemsRef)) {\n      postItemsRef.current.push(itemsRef);\n    } ////console.log(postItemsRef.current[1]);\n\n  }; ///\n  ///\n  ///\n  ///CREATE div REFS FROM POSTS AND ADD THEM TO ARRAY\n\n\n  const addpostDivRef = divRef => {\n    if (divRef && !postDivRef.current.includes(divRef)) {\n      postDivRef.current.push(divRef);\n    } ////console.log(postItemsRef.current[1]);\n\n  }; ///\n  ///\n  ///\n  ///DOT ENV DATA\n\n\n  const {\n    REACT_APP_SUPERSTARZ_URL\n  } = process.env;\n  const [itemheight, setitemheight] = useState([]);\n  const [itemheighthold, setitemheighthold] = useState([]);\n  const [itemcroptype, setitemcroptype] = useState([]);\n  const [itemFinalPostHeight, setitemFinalPostHeight] = useState([]);\n  const [itemCLICKED, setitemCLICKED] = useState([]); ///\n  ///\n  ///MODAL ZOOMED STATE\n\n  useEffect(() => {\n    Axios.post(`http://${REACT_APP_SUPERSTARZ_URL}/feeds_chronological`, {\n      withCredentials: true\n    }).then(response => {\n      if (response.data.message === \"feeds fetched\") {\n        var postdataRep = response.data.payload;\n        postdataRep.forEach(obj => {\n          obj.itemheight = \"auto\";\n          obj.itemrealheighthold = \"0\";\n          obj.itemcroptype = \"0\";\n          obj.itemFinalPostHeight = \"0\";\n          obj.itemCLICKED = false;\n        });\n        setPostData(postdataRep);\n      } else if (response.data.message === \"error in fetching feeds\") {\n        alert(\"Connection malfunction\");\n      }\n    }).catch(function (error) {});\n  }, [REACT_APP_SUPERSTARZ_URL]);\n  useEffect(() => {\n    if (postData.length > 0) {\n      const initialItemheight = postData.map(obj => obj.itemheight);\n      setitemheight(initialItemheight);\n      const initialItemrealheighthold = postData.map(obj => obj.itemrealheighthold);\n      setitemheighthold(initialItemrealheighthold);\n      const initialtemcroptype = postData.map(obj => obj.itemcroptype);\n      setitemcroptype(initialtemcroptype);\n      const initialitemFinalPostHeight = postData.map(obj => obj.itemFinalPostHeight);\n      setitemFinalPostHeight(initialitemFinalPostHeight);\n      const initialitemCLICKED = postData.map(obj => obj.itemCLICKED);\n      setitemCLICKED(initialitemCLICKED);\n    }\n  }, [postData]); ///\n  ///\n\n  const onPostsItemload = useCallback((e, index) => {\n    if (postItemsRef.current[index]) {\n      var imageHeight = postItemsRef.current[index].clientHeight;\n      var imageWidth = postItemsRef.current[index].clientWidth; ///////////////////////////////\n\n      const newArrx = [...itemheighthold];\n      var newh = imageHeight / 1.042 - postbackheighthold;\n      newArrx[index] = `${newh}`;\n      setitemheighthold(newArrx); ///////////////////////////////\n\n      const newArrayFinalPostHeight = [...itemFinalPostHeight];\n      newArrayFinalPostHeight[index] = imageHeight;\n      setitemFinalPostHeight(newArrayFinalPostHeight); //console.log(screenHeightReducer);\n      ///console.log(\"jj\");\n      ///console.log(imageHeight);\n\n      var choppedHeight = percentage(screenHeightReducer, 100);\n      var choppedwidth = percentage(screenHeightReducer, 58);\n\n      if (imageHeight < choppedwidth) {\n        /////WIDE IMAGE SET\n        const newArr = [...itemheight];\n        newArr[index] = `${choppedwidth}px`;\n        setitemheight(newArr); ///////////////////////////////\n\n        const newArrx = [...itemheighthold];\n        var newh = choppedwidth / 1.055 - postbackheighthold;\n        newArrx[index] = `${newh}`;\n        setitemheighthold(newArrx); ////////////////////////////\n        ///////////////////////////////\n\n        const newArrxq = [...itemcroptype];\n        newArrxq[index] = 1;\n        setitemcroptype(newArrxq); ////////////////////////////\n        ///////////////////////////////\n\n        const newArrayFinalPostHeight = [...itemFinalPostHeight];\n        newArrayFinalPostHeight[index] = choppedwidth;\n        setitemFinalPostHeight(newArrayFinalPostHeight);\n      } else if (imageHeight > choppedHeight) {\n        /////LONG IMAGE SET\n        const newArr = [...itemheight];\n        newArr[index] = `${choppedHeight}px`;\n        setitemheight(newArr); ///////////////////////////////\n\n        const newArrx = [...itemheighthold];\n        var newh = choppedHeight / 1.032 - postbackheighthold;\n        newArrx[index] = `${newh}`;\n        setitemheighthold(newArrx); ////////////////////////////////\n        ///////////////////////////////\n\n        const newArrxq = [...itemcroptype];\n        newArrxq[index] = 2;\n        setitemcroptype(newArrxq); ///////////////////////////////\n\n        const newArrayFinalPostHeight = [...itemFinalPostHeight];\n        newArrayFinalPostHeight[index] = choppedHeight;\n        setitemFinalPostHeight(newArrayFinalPostHeight); ///////////////////////////////\n      } else if (imageWidth > imageHeight) {\n        ///////////////////////////////\n        const newArrx = [...itemheighthold];\n        var newh = imageHeight / 1.066 - postbackheighthold;\n        newArrx[index] = `${newh}`;\n        setitemheighthold(newArrx); ///////////////////////////////\n      } else {}\n    }\n  }, [screenHeightReducer, itemheight, itemheighthold, itemFinalPostHeight]);\n\n  const scrollToPost = index => {\n    postItemsRef.current[index].scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n\n  const postitemSHOWFULLHEIGHT = (index, type) => {\n    if (itemcroptype[index] === 1 || itemcroptype[index] === 2) {\n      if (type === 0) {\n        const newitemHeight = [...itemheight];\n        newitemHeight[index] = `auto`;\n        setitemheight(newitemHeight);\n        scrollToPost(index);\n      } else {\n        const newitemHeight = [...itemheight];\n        newitemHeight[index] = `${itemFinalPostHeight[index]}px`;\n        setitemheight(newitemHeight);\n        scrollToPost(index);\n      }\n    }\n  };\n\n  const onPostsItemClicked = index => {\n    if (itemCLICKED[index]) {\n      const newclickArray = [...itemCLICKED];\n      newclickArray[index] = false;\n      setitemCLICKED(newclickArray);\n      postitemSHOWFULLHEIGHT(index, 1);\n    } else {\n      const newclickArray = [...itemCLICKED];\n      newclickArray[index] = true;\n      setitemCLICKED(newclickArray);\n      postitemSHOWFULLHEIGHT(index, 0);\n    }\n  };\n\n  console.log(postData); /// {menu[i]}\n\n  const breakPoints = {\n    default: 2,\n    960: 2,\n    600: 1\n  }; ///\n  ///\n  ///TYPES FOR ISLOGGEDIN\n\n  ///\n  ///LOGGED IN DATA FROM REDUX\n  const {\n    loggedIn\n  } = useSelector(state => ({ ...state.IsLoggedReducer\n  }));\n  const loggedInReducer = loggedIn; ///\n  ///\n  ///\n  /// GET COLOR FROM REDUX STORE\n\n  const {\n    color,\n    colordark\n  } = useSelector(state => ({ ...state.GlobalReducerColor\n  }));\n  const colorReducer = color;\n  const colorReducerdark = colordark;\n  var g = \"\";\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loggedInReducer ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: matchPc ? /*#__PURE__*/_jsxDEV(Paper, {\n        className: darkmodeReducer ? \"postscroll-dark\" : \"postscroll-light\",\n        style: {\n          backgroundImage: PaperStyleReducer,\n          borderRadius: \"0px\",\n          height: \"100vh\",\n          overflowY: \"scroll\",\n          overflowX: \"hidden\",\n          scrollSnapType: g\n        },\n        children: /*#__PURE__*/_jsxDEV(Profile, {\n          getSliderWidthRef: getSliderWidthRef,\n          OpenModalForm: OpenModalForm,\n          getSliderWidth: getSliderWidth,\n          postData: postData,\n          addPostItemsRef: addPostItemsRef,\n          onPostsItemload: onPostsItemload,\n          itemheight: itemheight,\n          itemheighthold: itemheighthold,\n          postbackheight: postbackheight,\n          formtype: formtype,\n          showModalForm: showModalForm,\n          CloseModalForm: CloseModalForm,\n          aboutTemplateGo: aboutTemplateGo,\n          commentTemplateGo: commentTemplateGo,\n          itemcroptype: itemcroptype,\n          itemFinalPostHeight: itemFinalPostHeight,\n          onPostsItemClicked: onPostsItemClicked,\n          itemCLICKED: itemCLICKED,\n          addpostDivRef: addpostDivRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(Paper, {\n        style: {\n          backgroundImage: PaperStyleReducer,\n          borderRadius: \"0px\",\n          height: \"auto\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Profile, {\n          getSliderWidthRef: getSliderWidthRef,\n          OpenModalForm: OpenModalForm,\n          getSliderWidth: getSliderWidth,\n          postData: postData,\n          addPostItemsRef: addPostItemsRef,\n          onPostsItemload: onPostsItemload,\n          itemheight: itemheight,\n          itemheighthold: itemheighthold,\n          postbackheight: postbackheight,\n          formtype: formtype,\n          showModalForm: showModalForm,\n          CloseModalForm: CloseModalForm,\n          aboutTemplateGo: aboutTemplateGo,\n          commentTemplateGo: commentTemplateGo,\n          itemcroptype: itemcroptype,\n          itemFinalPostHeight: itemFinalPostHeight,\n          onPostsItemClicked: onPostsItemClicked,\n          itemCLICKED: itemCLICKED,\n          addpostDivRef: addpostDivRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 13\n      }, this)\n    }, void 0, false) : null\n  }, void 0, false);\n}\n\n_s(ProfileOutter, \"seO/rH2WMAzsOzdU7uZneIc5lwE=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = ProfileOutter;\nexport default ProfileOutter;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileOutter\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/profile/ProfileOutter.tsx"],"names":["React","useRef","useState","useEffect","useCallback","Paper","matchPc","useSelector","Profile","Axios","ProfileOutter","getSliderWidthRef","formtype","showModalForm","setShowModalForm","getSliderWidth","setgetSliderWidth","aboutTemplateGo","commentTemplateGo","postData","setPostData","postDivRef","postItemsRef","postbackheighthold","document","documentElement","clientHeight","postbackheight","OpenModalFormOnce","setOpenModalFormOnce","CloseModalForm","DeviceBackButtonClicked","window","onpopstate","history","back","OpenModalForm","formtypedata","modalName","pushState","current","clientWidth","screenHeight","darkmode","state","GlobalReducer","screenHeightReducer","darkmodeReducer","PaperStyleLight","PaperStyleDark","PaperReducerLightnDark","PaperStyleReducer","percentage","num","per","addPostItemsRef","itemsRef","includes","push","addpostDivRef","divRef","REACT_APP_SUPERSTARZ_URL","process","env","itemheight","setitemheight","itemheighthold","setitemheighthold","itemcroptype","setitemcroptype","itemFinalPostHeight","setitemFinalPostHeight","itemCLICKED","setitemCLICKED","post","withCredentials","then","response","data","message","postdataRep","payload","forEach","obj","itemrealheighthold","alert","catch","error","length","initialItemheight","map","initialItemrealheighthold","initialtemcroptype","initialitemFinalPostHeight","initialitemCLICKED","onPostsItemload","e","index","imageHeight","imageWidth","newArrx","newh","newArrayFinalPostHeight","choppedHeight","choppedwidth","newArr","newArrxq","scrollToPost","scrollIntoView","behavior","postitemSHOWFULLHEIGHT","type","newitemHeight","onPostsItemClicked","newclickArray","console","log","breakPoints","default","loggedIn","IsLoggedReducer","loggedInReducer","color","colordark","GlobalReducerColor","colorReducer","colorReducerdark","g","backgroundImage","borderRadius","height","overflowY","overflowX","scrollSnapType"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,SAAlC,EAA6CC,WAA7C,QAAgE,OAAhE;AACA,SAASC,KAAT,QAAiC,mBAAjC;AACA,SAASC,OAAT,QAAqC,iBAArC;AACA,SAAyBC,WAAzB,QAA4C,aAA5C;AACA,OAAO,eAAP;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;AAEA,SAASC,aAAT,GAAyB;AAAA;;AACvB,QAAMC,iBAAiB,GAAGV,MAAM,CAAiB,IAAjB,CAAhC;AAEA,QAAM,CAACW,QAAD,IAAaV,QAAQ,CAAS,CAAT,CAA3B;AACA,QAAM,CAACW,aAAD,EAAgBC,gBAAhB,IAAoCZ,QAAQ,CAAU,KAAV,CAAlD;AAEA,QAAM,CAACa,cAAD,EAAiBC,iBAAjB,IAAsCd,QAAQ,CAAC,CAAD,CAApD;AAEA,QAAM,CAACe,eAAD,IAAoBf,QAAQ,CAAU,IAAV,CAAlC;AACA,QAAM,CAACgB,iBAAD,IAAsBhB,QAAQ,CAAU,KAAV,CAApC;AAEA,QAAM,CAACiB,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAa,EAAb,CAAxC;AAEA,QAAMmB,UAAU,GAAGpB,MAAM,CAAM,EAAN,CAAzB;AAEA,QAAMqB,YAAY,GAAGrB,MAAM,CAAM,EAAN,CAA3B;AAEA,MAAIsB,kBAAkB,GAAGC,QAAQ,CAACC,eAAT,CAAyBC,YAAzB,GAAwC,GAAjE;AACA,QAAM,CAACC,cAAD,IAAmBzB,QAAQ,CAASqB,kBAAT,CAAjC,CAlBuB,CAoBvB;AACA;AACA;;AACA,QAAM,CAACK,iBAAD,EAAoBC,oBAApB,IAA4C3B,QAAQ,CAAU,KAAV,CAA1D;AACA,QAAM4B,cAAc,GAAG1B,WAAW,CAAE2B,uBAAD,IAAqC;AACtE;AACA,QAAIA,uBAAuB,KAAK,CAAhC,EAAmC;AACjCC,MAAAA,MAAM,CAACC,UAAP,GAAoB,MAAM;AACxBnB,QAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAe,QAAAA,oBAAoB,CAAC,KAAD,CAApB;AACD,OAHD;AAID,KALD,MAKO;AACLf,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAe,MAAAA,oBAAoB,CAAC,KAAD,CAApB,CAFK,CAGL;;AACAG,MAAAA,MAAM,CAACE,OAAP,CAAeC,IAAf;AACD;AACF,GAbiC,EAa/B,EAb+B,CAAlC;AAeA,QAAMC,aAAa,GAAGhC,WAAW,CAC9BiC,YAAD,IAA0B;AACxBvB,IAAAA,gBAAgB,CAAC,IAAD,CAAhB,CADwB,CAExB;AACA;;AACA,QAAIwB,SAAS,GAAG,WAAhB;;AAEA,QAAI,CAACV,iBAAL,EAAwB;AACtBI,MAAAA,MAAM,CAACE,OAAP,CAAeK,SAAf,CAAyB,IAAzB,EAA+B,EAA/B,EAAmCD,SAAnC;AACAT,MAAAA,oBAAoB,CAAC,IAAD,CAApB;AACAC,MAAAA,cAAc,CAAC,CAAD,CAAd;AACD;AACF,GAZ8B,EAa/B,CAACF,iBAAD,EAAoBE,cAApB,CAb+B,CAAjC,CAvCuB,CAuDvB;AACA;AACA;AACA;;AACA3B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,iBAAiB,CAAC6B,OAAlB,IAA6B7B,iBAAiB,CAAC6B,OAAlB,CAA0BC,WAA3D,EAAwE;AACtEzB,MAAAA,iBAAiB,CAACL,iBAAiB,CAAC6B,OAAlB,CAA0BC,WAA3B,CAAjB;AACD;AACF,GAJQ,EAIN,EAJM,CAAT,CA3DuB,CAgEvB;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;AACA,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAA6BpC,WAAW,CAC3CqC,KAAD,KAAoC,EAClC,GAAGA,KAAK,CAACC;AADyB,GAApC,CAD4C,CAA9C;AAKA,QAAMC,mBAAmB,GAAGJ,YAA5B;AACA,QAAMK,eAAe,GAAGJ,QAAxB,CArFuB,CAuFvB;AACA;AACA;AACA;;AACA,QAAM;AAAEK,IAAAA,eAAF;AAAmBC,IAAAA;AAAnB,MAAsC1C,WAAW,CACpDqC,KAAD,KAA4B,EAC1B,GAAGA,KAAK,CAACM;AADiB,GAA5B,CADqD,CAAvD;AAKA,MAAIC,iBAAiB,GAAG,EAAxB;;AAEA,MAAIJ,eAAJ,EAAqB;AACnBI,IAAAA,iBAAiB,GAAGF,cAApB;AACD,GAFD,MAEO;AACLE,IAAAA,iBAAiB,GAAGH,eAApB;AACD;;AAED,WAASI,UAAT,CAAoBC,GAApB,EAAiCC,GAAjC,EAA8C;AAC5C,WAAQD,GAAG,GAAG,GAAP,GAAcC,GAArB;AACD,GA1GsB,CA4GvB;AAEA;AACA;AACA;AACA;;;AACA,QAAMC,eAAe,GAAIC,QAAD,IAAmB;AACzC,QAAIA,QAAQ,IAAI,CAAClC,YAAY,CAACkB,OAAb,CAAqBiB,QAArB,CAA8BD,QAA9B,CAAjB,EAA0D;AACxDlC,MAAAA,YAAY,CAACkB,OAAb,CAAqBkB,IAArB,CAA0BF,QAA1B;AACD,KAHwC,CAIzC;;AACD,GALD,CAlHuB,CAyHvB;AACA;AACA;AACA;;;AACA,QAAMG,aAAa,GAAIC,MAAD,IAAiB;AACrC,QAAIA,MAAM,IAAI,CAACvC,UAAU,CAACmB,OAAX,CAAmBiB,QAAnB,CAA4BG,MAA5B,CAAf,EAAoD;AAClDvC,MAAAA,UAAU,CAACmB,OAAX,CAAmBkB,IAAnB,CAAwBE,MAAxB;AACD,KAHoC,CAIrC;;AACD,GALD,CA7HuB,CAoIvB;AACA;AACA;AACA;;;AACA,QAAM;AAAEC,IAAAA;AAAF,MAA+BC,OAAO,CAACC,GAA7C;AAEA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8B/D,QAAQ,CAAgB,EAAhB,CAA5C;AACA,QAAM,CAACgE,cAAD,EAAiBC,iBAAjB,IAAsCjE,QAAQ,CAAgB,EAAhB,CAApD;AACA,QAAM,CAACkE,YAAD,EAAeC,eAAf,IAAkCnE,QAAQ,CAAgB,EAAhB,CAAhD;AACA,QAAM,CAACoE,mBAAD,EAAsBC,sBAAtB,IAAgDrE,QAAQ,CAC5D,EAD4D,CAA9D;AAGA,QAAM,CAACsE,WAAD,EAAcC,cAAd,IAAgCvE,QAAQ,CAAiB,EAAjB,CAA9C,CAhJuB,CAkJvB;AACA;AACA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,KAAK,CAACiE,IAAN,CAAY,UAASb,wBAAyB,sBAA9C,EAAqE;AACnEc,MAAAA,eAAe,EAAE;AADkD,KAArE,EAGGC,IAHH,CAGSC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,IAAT,CAAcC,OAAd,KAA0B,eAA9B,EAA+C;AAC7C,YAAIC,WAAW,GAAGH,QAAQ,CAACC,IAAT,CAAcG,OAAhC;AAEAD,QAAAA,WAAW,CAACE,OAAZ,CAAqBC,GAAD,IAAc;AAChCA,UAAAA,GAAG,CAACnB,UAAJ,GAAiB,MAAjB;AACAmB,UAAAA,GAAG,CAACC,kBAAJ,GAAyB,GAAzB;AACAD,UAAAA,GAAG,CAACf,YAAJ,GAAmB,GAAnB;AACAe,UAAAA,GAAG,CAACb,mBAAJ,GAA0B,GAA1B;AACAa,UAAAA,GAAG,CAACX,WAAJ,GAAkB,KAAlB;AACD,SAND;AAQApD,QAAAA,WAAW,CAAC4D,WAAD,CAAX;AACD,OAZD,MAYO,IAAIH,QAAQ,CAACC,IAAT,CAAcC,OAAd,KAA0B,yBAA9B,EAAyD;AAC9DM,QAAAA,KAAK,CAAC,wBAAD,CAAL;AACD;AACF,KAnBH,EAoBGC,KApBH,CAoBS,UAAUC,KAAV,EAAiB,CAAE,CApB5B;AAqBD,GAtBQ,EAsBN,CAAC1B,wBAAD,CAtBM,CAAT;AAwBA1D,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,QAAQ,CAACqE,MAAT,GAAkB,CAAtB,EAAyB;AACvB,YAAMC,iBAAiB,GAAGtE,QAAQ,CAACuE,GAAT,CAAcP,GAAD,IAASA,GAAG,CAACnB,UAA1B,CAA1B;AACAC,MAAAA,aAAa,CAACwB,iBAAD,CAAb;AAEA,YAAME,yBAAyB,GAAGxE,QAAQ,CAACuE,GAAT,CAC/BP,GAAD,IAASA,GAAG,CAACC,kBADmB,CAAlC;AAGAjB,MAAAA,iBAAiB,CAACwB,yBAAD,CAAjB;AAEA,YAAMC,kBAAkB,GAAGzE,QAAQ,CAACuE,GAAT,CAAcP,GAAD,IAASA,GAAG,CAACf,YAA1B,CAA3B;AACAC,MAAAA,eAAe,CAACuB,kBAAD,CAAf;AAEA,YAAMC,0BAA0B,GAAG1E,QAAQ,CAACuE,GAAT,CAChCP,GAAD,IAASA,GAAG,CAACb,mBADoB,CAAnC;AAGAC,MAAAA,sBAAsB,CAACsB,0BAAD,CAAtB;AAEA,YAAMC,kBAAkB,GAAG3E,QAAQ,CAACuE,GAAT,CAAcP,GAAD,IAASA,GAAG,CAACX,WAA1B,CAA3B;AACAC,MAAAA,cAAc,CAACqB,kBAAD,CAAd;AACD;AACF,GArBQ,EAqBN,CAAC3E,QAAD,CArBM,CAAT,CA7KuB,CAoMvB;AACA;;AACA,QAAM4E,eAAe,GAAG3F,WAAW,CACjC,CAAC4F,CAAD,EAASC,KAAT,KAA2B;AACzB,QAAI3E,YAAY,CAACkB,OAAb,CAAqByD,KAArB,CAAJ,EAAiC;AAC/B,UAAIC,WAAW,GAAG5E,YAAY,CAACkB,OAAb,CAAqByD,KAArB,EAA4BvE,YAA9C;AACA,UAAIyE,UAAU,GAAG7E,YAAY,CAACkB,OAAb,CAAqByD,KAArB,EAA4BxD,WAA7C,CAF+B,CAG/B;;AACA,YAAM2D,OAAO,GAAG,CAAC,GAAGlC,cAAJ,CAAhB;AACA,UAAImC,IAAI,GAAGH,WAAW,GAAG,KAAd,GAAsB3E,kBAAjC;AACA6E,MAAAA,OAAO,CAACH,KAAD,CAAP,GAAkB,GAAEI,IAAK,EAAzB;AACAlC,MAAAA,iBAAiB,CAACiC,OAAD,CAAjB,CAP+B,CAQ/B;;AACA,YAAME,uBAAuB,GAAG,CAAC,GAAGhC,mBAAJ,CAAhC;AACAgC,MAAAA,uBAAuB,CAACL,KAAD,CAAvB,GAAiCC,WAAjC;AACA3B,MAAAA,sBAAsB,CAAC+B,uBAAD,CAAtB,CAX+B,CAa/B;AACA;AACA;;AAEA,UAAIC,aAAa,GAAGnD,UAAU,CAACN,mBAAD,EAAsB,GAAtB,CAA9B;AAEA,UAAI0D,YAAY,GAAGpD,UAAU,CAACN,mBAAD,EAAsB,EAAtB,CAA7B;;AAEA,UAAIoD,WAAW,GAAGM,YAAlB,EAAgC;AAC9B;AACA,cAAMC,MAAM,GAAG,CAAC,GAAGzC,UAAJ,CAAf;AACAyC,QAAAA,MAAM,CAACR,KAAD,CAAN,GAAiB,GAAEO,YAAa,IAAhC;AACAvC,QAAAA,aAAa,CAACwC,MAAD,CAAb,CAJ8B,CAK9B;;AACA,cAAML,OAAO,GAAG,CAAC,GAAGlC,cAAJ,CAAhB;AACA,YAAImC,IAAI,GAAGG,YAAY,GAAG,KAAf,GAAuBjF,kBAAlC;AACA6E,QAAAA,OAAO,CAACH,KAAD,CAAP,GAAkB,GAAEI,IAAK,EAAzB;AACAlC,QAAAA,iBAAiB,CAACiC,OAAD,CAAjB,CAT8B,CAU9B;AACA;;AACA,cAAMM,QAAQ,GAAG,CAAC,GAAGtC,YAAJ,CAAjB;AACAsC,QAAAA,QAAQ,CAACT,KAAD,CAAR,GAAkB,CAAlB;AACA5B,QAAAA,eAAe,CAACqC,QAAD,CAAf,CAd8B,CAe9B;AACA;;AACA,cAAMJ,uBAAuB,GAAG,CAAC,GAAGhC,mBAAJ,CAAhC;AACAgC,QAAAA,uBAAuB,CAACL,KAAD,CAAvB,GAAiCO,YAAjC;AACAjC,QAAAA,sBAAsB,CAAC+B,uBAAD,CAAtB;AACD,OApBD,MAoBO,IAAIJ,WAAW,GAAGK,aAAlB,EAAiC;AAEtC;AACA,cAAME,MAAM,GAAG,CAAC,GAAGzC,UAAJ,CAAf;AACAyC,QAAAA,MAAM,CAACR,KAAD,CAAN,GAAiB,GAAEM,aAAc,IAAjC;AACAtC,QAAAA,aAAa,CAACwC,MAAD,CAAb,CALsC,CAMtC;;AACA,cAAML,OAAO,GAAG,CAAC,GAAGlC,cAAJ,CAAhB;AACA,YAAImC,IAAI,GAAGE,aAAa,GAAG,KAAhB,GAAwBhF,kBAAnC;AACA6E,QAAAA,OAAO,CAACH,KAAD,CAAP,GAAkB,GAAEI,IAAK,EAAzB;AACAlC,QAAAA,iBAAiB,CAACiC,OAAD,CAAjB,CAVsC,CAWtC;AACA;;AACA,cAAMM,QAAQ,GAAG,CAAC,GAAGtC,YAAJ,CAAjB;AACAsC,QAAAA,QAAQ,CAACT,KAAD,CAAR,GAAkB,CAAlB;AACA5B,QAAAA,eAAe,CAACqC,QAAD,CAAf,CAfsC,CAgBtC;;AACA,cAAMJ,uBAAuB,GAAG,CAAC,GAAGhC,mBAAJ,CAAhC;AACAgC,QAAAA,uBAAuB,CAACL,KAAD,CAAvB,GAAiCM,aAAjC;AACAhC,QAAAA,sBAAsB,CAAC+B,uBAAD,CAAtB,CAnBsC,CAoBtC;AACD,OArBM,MAqBA,IAAIH,UAAU,GAAGD,WAAjB,EAA8B;AACnC;AACA,cAAME,OAAO,GAAG,CAAC,GAAGlC,cAAJ,CAAhB;AACA,YAAImC,IAAI,GAAGH,WAAW,GAAG,KAAd,GAAsB3E,kBAAjC;AACA6E,QAAAA,OAAO,CAACH,KAAD,CAAP,GAAkB,GAAEI,IAAK,EAAzB;AACAlC,QAAAA,iBAAiB,CAACiC,OAAD,CAAjB,CALmC,CAMnC;AACD,OAPM,MAOA,CACN;AACF;AACF,GA1EgC,EA2EjC,CAACtD,mBAAD,EAAsBkB,UAAtB,EAAkCE,cAAlC,EAAkDI,mBAAlD,CA3EiC,CAAnC;;AA8EA,QAAMqC,YAAY,GAAIV,KAAD,IAAgB;AACnC3E,IAAAA,YAAY,CAACkB,OAAb,CAAqByD,KAArB,EAA4BW,cAA5B,CAA2C;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAA3C;AACD,GAFD;;AAGA,QAAMC,sBAAsB,GAAG,CAACb,KAAD,EAAac,IAAb,KAA8B;AAC3D,QAAI3C,YAAY,CAAC6B,KAAD,CAAZ,KAAwB,CAAxB,IAA6B7B,YAAY,CAAC6B,KAAD,CAAZ,KAAwB,CAAzD,EAA4D;AAC1D,UAAIc,IAAI,KAAK,CAAb,EAAgB;AACd,cAAMC,aAAa,GAAG,CAAC,GAAGhD,UAAJ,CAAtB;AACAgD,QAAAA,aAAa,CAACf,KAAD,CAAb,GAAwB,MAAxB;AACAhC,QAAAA,aAAa,CAAC+C,aAAD,CAAb;AACAL,QAAAA,YAAY,CAACV,KAAD,CAAZ;AACD,OALD,MAKO;AACL,cAAMe,aAAa,GAAG,CAAC,GAAGhD,UAAJ,CAAtB;AACAgD,QAAAA,aAAa,CAACf,KAAD,CAAb,GAAwB,GAAE3B,mBAAmB,CAAC2B,KAAD,CAAQ,IAArD;AACAhC,QAAAA,aAAa,CAAC+C,aAAD,CAAb;AACAL,QAAAA,YAAY,CAACV,KAAD,CAAZ;AACD;AACF;AACF,GAdD;;AAgBA,QAAMgB,kBAAkB,GAAIhB,KAAD,IAAmB;AAC5C,QAAIzB,WAAW,CAACyB,KAAD,CAAf,EAAwB;AACtB,YAAMiB,aAAa,GAAG,CAAC,GAAG1C,WAAJ,CAAtB;AACA0C,MAAAA,aAAa,CAACjB,KAAD,CAAb,GAAuB,KAAvB;AACAxB,MAAAA,cAAc,CAACyC,aAAD,CAAd;AACAJ,MAAAA,sBAAsB,CAACb,KAAD,EAAQ,CAAR,CAAtB;AACD,KALD,MAKO;AACL,YAAMiB,aAAa,GAAG,CAAC,GAAG1C,WAAJ,CAAtB;AACA0C,MAAAA,aAAa,CAACjB,KAAD,CAAb,GAAuB,IAAvB;AACAxB,MAAAA,cAAc,CAACyC,aAAD,CAAd;AACAJ,MAAAA,sBAAsB,CAACb,KAAD,EAAQ,CAAR,CAAtB;AACD;AACF,GAZD;;AAcAkB,EAAAA,OAAO,CAACC,GAAR,CAAYjG,QAAZ,EArTuB,CAsTvB;;AAEA,QAAMkG,WAAW,GAAG;AAClBC,IAAAA,OAAO,EAAE,CADS;AAElB,SAAK,CAFa;AAGlB,SAAK;AAHa,GAApB,CAxTuB,CA8TvB;AACA;AACA;;AAOA;AACA;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAehH,WAAW,CAAEqC,KAAD,KAA+B,EAC9D,GAAGA,KAAK,CAAC4E;AADqD,GAA/B,CAAD,CAAhC;AAGA,QAAMC,eAAe,GAAGF,QAAxB,CA5UuB,CA8UvB;AACA;AACA;AACA;;AAOA,QAAM;AAAEG,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAuBpH,WAAW,CAAEqC,KAAD,KAAmC,EAC1E,GAAGA,KAAK,CAACgF;AADiE,GAAnC,CAAD,CAAxC;AAGA,QAAMC,YAAY,GAAGH,KAArB;AACA,QAAMI,gBAAgB,GAAGH,SAAzB;AAEA,MAAII,CAAC,GAAG,EAAR;AACA,sBACE;AAAA,cACGN,eAAe,gBACd;AAAA,gBACGnH,OAAO,gBACN,QAAC,KAAD;AACE,QAAA,SAAS,EACPyC,eAAe,GAAG,iBAAH,GAAuB,kBAF1C;AAIE,QAAA,KAAK,EAAE;AACLiF,UAAAA,eAAe,EAAE7E,iBADZ;AAEL8E,UAAAA,YAAY,EAAE,KAFT;AAGLC,UAAAA,MAAM,EAAE,OAHH;AAILC,UAAAA,SAAS,EAAE,QAJN;AAKLC,UAAAA,SAAS,EAAE,QALN;AAMLC,UAAAA,cAAc,EAAEN;AANX,SAJT;AAAA,+BAaE,QAAC,OAAD;AACE,UAAA,iBAAiB,EAAEpH,iBADrB;AAEE,UAAA,aAAa,EAAEyB,aAFjB;AAGE,UAAA,cAAc,EAAErB,cAHlB;AAIE,UAAA,QAAQ,EAAEI,QAJZ;AAKE,UAAA,eAAe,EAAEoC,eALnB;AAME,UAAA,eAAe,EAAEwC,eANnB;AAOE,UAAA,UAAU,EAAE/B,UAPd;AAQE,UAAA,cAAc,EAAEE,cARlB;AASE,UAAA,cAAc,EAAEvC,cATlB;AAUE,UAAA,QAAQ,EAAEf,QAVZ;AAWE,UAAA,aAAa,EAAEC,aAXjB;AAYE,UAAA,cAAc,EAAEiB,cAZlB;AAaE,UAAA,eAAe,EAAEb,eAbnB;AAcE,UAAA,iBAAiB,EAAEC,iBAdrB;AAeE,UAAA,YAAY,EAAEkD,YAfhB;AAgBE,UAAA,mBAAmB,EAAEE,mBAhBvB;AAiBE,UAAA,kBAAkB,EAAE2C,kBAjBtB;AAkBE,UAAA,WAAW,EAAEzC,WAlBf;AAmBE,UAAA,aAAa,EAAEb;AAnBjB;AAAA;AAAA;AAAA;AAAA;AAbF;AAAA;AAAA;AAAA;AAAA,cADM,gBAqCN,QAAC,KAAD;AACE,QAAA,KAAK,EAAE;AACLqE,UAAAA,eAAe,EAAE7E,iBADZ;AAEL8E,UAAAA,YAAY,EAAE,KAFT;AAGLC,UAAAA,MAAM,EAAE;AAHH,SADT;AAAA,+BAOE,QAAC,OAAD;AACE,UAAA,iBAAiB,EAAEvH,iBADrB;AAEE,UAAA,aAAa,EAAEyB,aAFjB;AAGE,UAAA,cAAc,EAAErB,cAHlB;AAIE,UAAA,QAAQ,EAAEI,QAJZ;AAKE,UAAA,eAAe,EAAEoC,eALnB;AAME,UAAA,eAAe,EAAEwC,eANnB;AAOE,UAAA,UAAU,EAAE/B,UAPd;AAQE,UAAA,cAAc,EAAEE,cARlB;AASE,UAAA,cAAc,EAAEvC,cATlB;AAUE,UAAA,QAAQ,EAAEf,QAVZ;AAWE,UAAA,aAAa,EAAEC,aAXjB;AAYE,UAAA,cAAc,EAAEiB,cAZlB;AAaE,UAAA,eAAe,EAAEb,eAbnB;AAcE,UAAA,iBAAiB,EAAEC,iBAdrB;AAeE,UAAA,YAAY,EAAEkD,YAfhB;AAgBE,UAAA,mBAAmB,EAAEE,mBAhBvB;AAiBE,UAAA,kBAAkB,EAAE2C,kBAjBtB;AAkBE,UAAA,WAAW,EAAEzC,WAlBf;AAmBE,UAAA,aAAa,EAAEb;AAnBjB;AAAA;AAAA;AAAA;AAAA;AAPF;AAAA;AAAA;AAAA;AAAA;AAtCJ,qBADc,GAsEZ;AAvEN,mBADF;AA2ED;;GA1aQjD,a;UA+E4BH,W,EAYSA,W,EA8OvBA,W,EAeQA,W;;;KAxVtBG,a;AA4aT,eAAeA,aAAf","sourcesContent":["import React, { useRef, useState, useEffect, useCallback } from \"react\";\r\nimport { Paper, Grid, Box } from \"@material-ui/core\";\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { RootStateOrAny, useSelector } from \"react-redux\";\r\nimport \"./profile.css\";\r\nimport { Profile } from \"./Profile\";\r\nimport Axios from \"axios\";\r\n\r\nfunction ProfileOutter() {\r\n  const getSliderWidthRef = useRef<HTMLDivElement>(null);\r\n\r\n  const [formtype] = useState<number>(1);\r\n  const [showModalForm, setShowModalForm] = useState<boolean>(false);\r\n\r\n  const [getSliderWidth, setgetSliderWidth] = useState(0);\r\n\r\n  const [aboutTemplateGo] = useState<boolean>(true);\r\n  const [commentTemplateGo] = useState<boolean>(false);\r\n\r\n  const [postData, setPostData] = useState<Array<any>>([]);\r\n\r\n  const postDivRef = useRef<any>([]);\r\n\r\n  const postItemsRef = useRef<any>([]);\r\n\r\n  var postbackheighthold = document.documentElement.clientHeight * 0.3;\r\n  const [postbackheight] = useState<number>(postbackheighthold);\r\n\r\n  ///\r\n  ///\r\n  ///CLOSE LOG MODAL\r\n  const [OpenModalFormOnce, setOpenModalFormOnce] = useState<boolean>(false);\r\n  const CloseModalForm = useCallback((DeviceBackButtonClicked: number) => {\r\n    ///onpopstate fires when back and forward buttons used\r\n    if (DeviceBackButtonClicked === 1) {\r\n      window.onpopstate = () => {\r\n        setShowModalForm(false);\r\n        setOpenModalFormOnce(false);\r\n      };\r\n    } else {\r\n      setShowModalForm(false);\r\n      setOpenModalFormOnce(false);\r\n      ///Replace modal history state with previous history state\r\n      window.history.back();\r\n    }\r\n  }, []);\r\n\r\n  const OpenModalForm = useCallback(\r\n    (formtypedata: number) => {\r\n      setShowModalForm(true);\r\n      ///Replace current history state (since opening a modal Level 2 grid)...\r\n      /// if this was a level 1 grid (profile-info page use Pushstate to create new history state)\r\n      let modalName = \"Biography\";\r\n\r\n      if (!OpenModalFormOnce) {\r\n        window.history.pushState(null, \"\", modalName);\r\n        setOpenModalFormOnce(true);\r\n        CloseModalForm(1);\r\n      }\r\n    },\r\n    [OpenModalFormOnce, CloseModalForm]\r\n  );\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  ///GET OPTIONS SLIDER IMAGE WIDTH FROM MATERIAL UI GRID\r\n  useEffect(() => {\r\n    if (getSliderWidthRef.current && getSliderWidthRef.current.clientWidth) {\r\n      setgetSliderWidth(getSliderWidthRef.current.clientWidth);\r\n    }\r\n  }, []);\r\n  ///\r\n  ///\r\n  ///\r\n  /// INTERFACE/TYPES FOR SCREENHEIGHT AND DARKMODE\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n      screenHeight: number;\r\n    };\r\n  }\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// GET SCREENHEIGHT FROM REDUX STORE\r\n  const { screenHeight, darkmode } = useSelector(\r\n    (state: RootStateGlobalReducer) => ({\r\n      ...state.GlobalReducer,\r\n    })\r\n  );\r\n  const screenHeightReducer = screenHeight;\r\n  const darkmodeReducer = darkmode;\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  ///MUI PAPER STYLES FROM REDUX\r\n  const { PaperStyleLight, PaperStyleDark } = useSelector(\r\n    (state: RootStateOrAny) => ({\r\n      ...state.PaperReducerLightnDark,\r\n    })\r\n  );\r\n  var PaperStyleReducer = \"\";\r\n\r\n  if (darkmodeReducer) {\r\n    PaperStyleReducer = PaperStyleDark;\r\n  } else {\r\n    PaperStyleReducer = PaperStyleLight;\r\n  }\r\n\r\n  function percentage(num: number, per: number) {\r\n    return (num / 100) * per;\r\n  }\r\n\r\n  ////////////////////////////////////////////////////////////////////\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  ///CREATE REFS FROM POSTS AND ADD THEM TO ARRAY\r\n  const addPostItemsRef = (itemsRef: any) => {\r\n    if (itemsRef && !postItemsRef.current.includes(itemsRef)) {\r\n      postItemsRef.current.push(itemsRef);\r\n    }\r\n    ////console.log(postItemsRef.current[1]);\r\n  };\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  ///CREATE div REFS FROM POSTS AND ADD THEM TO ARRAY\r\n  const addpostDivRef = (divRef: any) => {\r\n    if (divRef && !postDivRef.current.includes(divRef)) {\r\n      postDivRef.current.push(divRef);\r\n    }\r\n    ////console.log(postItemsRef.current[1]);\r\n  };\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  ///DOT ENV DATA\r\n  const { REACT_APP_SUPERSTARZ_URL } = process.env;\r\n\r\n  const [itemheight, setitemheight] = useState<Array<string>>([]);\r\n  const [itemheighthold, setitemheighthold] = useState<Array<string>>([]);\r\n  const [itemcroptype, setitemcroptype] = useState<Array<number>>([]);\r\n  const [itemFinalPostHeight, setitemFinalPostHeight] = useState<Array<number>>(\r\n    []\r\n  );\r\n  const [itemCLICKED, setitemCLICKED] = useState<Array<boolean>>([]);\r\n\r\n  ///\r\n  ///\r\n  ///MODAL ZOOMED STATE\r\n  useEffect(() => {\r\n    Axios.post(`http://${REACT_APP_SUPERSTARZ_URL}/feeds_chronological`, {\r\n      withCredentials: true,\r\n    })\r\n      .then((response) => {\r\n        if (response.data.message === \"feeds fetched\") {\r\n          var postdataRep = response.data.payload;\r\n\r\n          postdataRep.forEach((obj: any) => {\r\n            obj.itemheight = \"auto\";\r\n            obj.itemrealheighthold = \"0\";\r\n            obj.itemcroptype = \"0\";\r\n            obj.itemFinalPostHeight = \"0\";\r\n            obj.itemCLICKED = false;\r\n          });\r\n\r\n          setPostData(postdataRep);\r\n        } else if (response.data.message === \"error in fetching feeds\") {\r\n          alert(\"Connection malfunction\");\r\n        }\r\n      })\r\n      .catch(function (error) {});\r\n  }, [REACT_APP_SUPERSTARZ_URL]);\r\n\r\n  useEffect(() => {\r\n    if (postData.length > 0) {\r\n      const initialItemheight = postData.map((obj) => obj.itemheight);\r\n      setitemheight(initialItemheight);\r\n\r\n      const initialItemrealheighthold = postData.map(\r\n        (obj) => obj.itemrealheighthold\r\n      );\r\n      setitemheighthold(initialItemrealheighthold);\r\n\r\n      const initialtemcroptype = postData.map((obj) => obj.itemcroptype);\r\n      setitemcroptype(initialtemcroptype);\r\n\r\n      const initialitemFinalPostHeight = postData.map(\r\n        (obj) => obj.itemFinalPostHeight\r\n      );\r\n      setitemFinalPostHeight(initialitemFinalPostHeight);\r\n\r\n      const initialitemCLICKED = postData.map((obj) => obj.itemCLICKED);\r\n      setitemCLICKED(initialitemCLICKED);\r\n    }\r\n  }, [postData]);\r\n\r\n  ///\r\n  ///\r\n  const onPostsItemload = useCallback(\r\n    (e: any, index: number) => {\r\n      if (postItemsRef.current[index]) {\r\n        var imageHeight = postItemsRef.current[index].clientHeight;\r\n        var imageWidth = postItemsRef.current[index].clientWidth;\r\n        ///////////////////////////////\r\n        const newArrx = [...itemheighthold];\r\n        var newh = imageHeight / 1.042 - postbackheighthold;\r\n        newArrx[index] = `${newh}`;\r\n        setitemheighthold(newArrx);\r\n        ///////////////////////////////\r\n        const newArrayFinalPostHeight = [...itemFinalPostHeight];\r\n        newArrayFinalPostHeight[index] = imageHeight;\r\n        setitemFinalPostHeight(newArrayFinalPostHeight);\r\n\r\n        //console.log(screenHeightReducer);\r\n        ///console.log(\"jj\");\r\n        ///console.log(imageHeight);\r\n\r\n        var choppedHeight = percentage(screenHeightReducer, 100);\r\n\r\n        var choppedwidth = percentage(screenHeightReducer, 58);\r\n\r\n        if (imageHeight < choppedwidth) {\r\n          /////WIDE IMAGE SET\r\n          const newArr = [...itemheight];\r\n          newArr[index] = `${choppedwidth}px`;\r\n          setitemheight(newArr);\r\n          ///////////////////////////////\r\n          const newArrx = [...itemheighthold];\r\n          var newh = choppedwidth / 1.055 - postbackheighthold;\r\n          newArrx[index] = `${newh}`;\r\n          setitemheighthold(newArrx);\r\n          ////////////////////////////\r\n          ///////////////////////////////\r\n          const newArrxq = [...itemcroptype];\r\n          newArrxq[index] = 1;\r\n          setitemcroptype(newArrxq);\r\n          ////////////////////////////\r\n          ///////////////////////////////\r\n          const newArrayFinalPostHeight = [...itemFinalPostHeight];\r\n          newArrayFinalPostHeight[index] = choppedwidth;\r\n          setitemFinalPostHeight(newArrayFinalPostHeight);\r\n        } else if (imageHeight > choppedHeight) {\r\n         \r\n          /////LONG IMAGE SET\r\n          const newArr = [...itemheight];\r\n          newArr[index] = `${choppedHeight}px`;\r\n          setitemheight(newArr);\r\n          ///////////////////////////////\r\n          const newArrx = [...itemheighthold];\r\n          var newh = choppedHeight / 1.032 - postbackheighthold;\r\n          newArrx[index] = `${newh}`;\r\n          setitemheighthold(newArrx);\r\n          ////////////////////////////////\r\n          ///////////////////////////////\r\n          const newArrxq = [...itemcroptype];\r\n          newArrxq[index] = 2;\r\n          setitemcroptype(newArrxq);\r\n          ///////////////////////////////\r\n          const newArrayFinalPostHeight = [...itemFinalPostHeight];\r\n          newArrayFinalPostHeight[index] = choppedHeight;\r\n          setitemFinalPostHeight(newArrayFinalPostHeight);\r\n          ///////////////////////////////\r\n        } else if (imageWidth > imageHeight) {\r\n          ///////////////////////////////\r\n          const newArrx = [...itemheighthold];\r\n          var newh = imageHeight / 1.066 - postbackheighthold;\r\n          newArrx[index] = `${newh}`;\r\n          setitemheighthold(newArrx);\r\n          ///////////////////////////////\r\n        } else {\r\n        }\r\n      }\r\n    },\r\n    [screenHeightReducer, itemheight, itemheighthold, itemFinalPostHeight]\r\n  );\r\n\r\n  const scrollToPost = (index: any) => {\r\n    postItemsRef.current[index].scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n  const postitemSHOWFULLHEIGHT = (index: any, type: number) => {\r\n    if (itemcroptype[index] === 1 || itemcroptype[index] === 2) {\r\n      if (type === 0) {\r\n        const newitemHeight = [...itemheight];\r\n        newitemHeight[index] = `auto`;\r\n        setitemheight(newitemHeight);\r\n        scrollToPost(index);\r\n      } else {\r\n        const newitemHeight = [...itemheight];\r\n        newitemHeight[index] = `${itemFinalPostHeight[index]}px`;\r\n        setitemheight(newitemHeight);\r\n        scrollToPost(index);\r\n      }\r\n    }\r\n  };\r\n\r\n  const onPostsItemClicked = (index: number) => {\r\n    if (itemCLICKED[index]) {\r\n      const newclickArray = [...itemCLICKED];\r\n      newclickArray[index] = false;\r\n      setitemCLICKED(newclickArray);\r\n      postitemSHOWFULLHEIGHT(index, 1);\r\n    } else {\r\n      const newclickArray = [...itemCLICKED];\r\n      newclickArray[index] = true;\r\n      setitemCLICKED(newclickArray);\r\n      postitemSHOWFULLHEIGHT(index, 0);\r\n    }\r\n  };\r\n\r\n  console.log(postData);\r\n  /// {menu[i]}\r\n\r\n  const breakPoints = {\r\n    default: 2,\r\n    960: 2,\r\n    600: 1,\r\n  };\r\n\r\n  ///\r\n  ///\r\n  ///TYPES FOR ISLOGGEDIN\r\n  interface RootStateIsLogged {\r\n    IsLoggedReducer: {\r\n      loggedIn: boolean;\r\n    };\r\n  }\r\n\r\n  ///\r\n  ///LOGGED IN DATA FROM REDUX\r\n  const { loggedIn } = useSelector((state: RootStateIsLogged) => ({\r\n    ...state.IsLoggedReducer,\r\n  }));\r\n  const loggedInReducer = loggedIn;\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// GET COLOR FROM REDUX STORE\r\n  interface RootStateReducerColor {\r\n    GlobalReducerColor: {\r\n      color: string;\r\n      colordark: string;\r\n    };\r\n  }\r\n  const { color, colordark } = useSelector((state: RootStateReducerColor) => ({\r\n    ...state.GlobalReducerColor,\r\n  }));\r\n  const colorReducer = color;\r\n  const colorReducerdark = colordark;\r\n\r\n  var g = \"\";\r\n  return (\r\n    <>\r\n      {loggedInReducer ? (\r\n        <>\r\n          {matchPc ? (\r\n            <Paper\r\n              className={\r\n                darkmodeReducer ? \"postscroll-dark\" : \"postscroll-light\"\r\n              }\r\n              style={{\r\n                backgroundImage: PaperStyleReducer,\r\n                borderRadius: \"0px\",\r\n                height: \"100vh\",\r\n                overflowY: \"scroll\",\r\n                overflowX: \"hidden\",\r\n                scrollSnapType: g,\r\n              }}\r\n            >\r\n              <Profile\r\n                getSliderWidthRef={getSliderWidthRef}\r\n                OpenModalForm={OpenModalForm}\r\n                getSliderWidth={getSliderWidth}\r\n                postData={postData}\r\n                addPostItemsRef={addPostItemsRef}\r\n                onPostsItemload={onPostsItemload}\r\n                itemheight={itemheight}\r\n                itemheighthold={itemheighthold}\r\n                postbackheight={postbackheight}\r\n                formtype={formtype}\r\n                showModalForm={showModalForm}\r\n                CloseModalForm={CloseModalForm}\r\n                aboutTemplateGo={aboutTemplateGo}\r\n                commentTemplateGo={commentTemplateGo}\r\n                itemcroptype={itemcroptype}\r\n                itemFinalPostHeight={itemFinalPostHeight}\r\n                onPostsItemClicked={onPostsItemClicked}\r\n                itemCLICKED={itemCLICKED}\r\n                addpostDivRef={addpostDivRef}\r\n              />\r\n            </Paper>\r\n          ) : (\r\n            <Paper\r\n              style={{\r\n                backgroundImage: PaperStyleReducer,\r\n                borderRadius: \"0px\",\r\n                height: \"auto\",\r\n              }}\r\n            >\r\n              <Profile\r\n                getSliderWidthRef={getSliderWidthRef}\r\n                OpenModalForm={OpenModalForm}\r\n                getSliderWidth={getSliderWidth}\r\n                postData={postData}\r\n                addPostItemsRef={addPostItemsRef}\r\n                onPostsItemload={onPostsItemload}\r\n                itemheight={itemheight}\r\n                itemheighthold={itemheighthold}\r\n                postbackheight={postbackheight}\r\n                formtype={formtype}\r\n                showModalForm={showModalForm}\r\n                CloseModalForm={CloseModalForm}\r\n                aboutTemplateGo={aboutTemplateGo}\r\n                commentTemplateGo={commentTemplateGo}\r\n                itemcroptype={itemcroptype}\r\n                itemFinalPostHeight={itemFinalPostHeight}\r\n                onPostsItemClicked={onPostsItemClicked}\r\n                itemCLICKED={itemCLICKED}\r\n                addpostDivRef={addpostDivRef}\r\n              />\r\n            </Paper>\r\n          )}\r\n        </>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ProfileOutter;\r\n"]},"metadata":{},"sourceType":"module"}