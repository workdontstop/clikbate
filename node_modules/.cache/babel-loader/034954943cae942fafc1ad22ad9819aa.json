{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\upload\\\\ImageTobeFiltered.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ImageTobeFilteredx({\n  filterImage,\n  index,\n  itemUploadRef,\n  setActivatefilterImage\n}) {\n  _s();\n\n  ///\n  ///\n  ///\n  const filterbaseimageRef = useRef(null);\n\n  const closegate = () => {\n    if (index === 0) {\n      ////\n      addfilter();\n    } else {\n      setActivatefilterImage(false);\n    }\n  };\n\n  function blend(background, foreground, width, height, transform) {\n    // Side note: grabbing this data is the most expensive piece. For better\n    // performance, you could consider caching this data\n    var bottom = background.getImageData(0, 0, width, height);\n    var top = foreground.getImageData(0, 0, width, height);\n\n    for (var i = 0, size = top.data.length; i < size; i += 4) {\n      // red\n      top.data[i + 0] = transform(bottom.data[i + 0], top.data[i + 0]); // green\n\n      top.data[i + 1] = transform(bottom.data[i + 1], top.data[i + 1]); // blue\n\n      top.data[i + 2] = transform(bottom.data[i + 2], top.data[i + 2]); // the fourth slot is alpha. We don't need that (so skip by 4)\n    }\n\n    return top;\n  }\n\n  const addfilter = () => {\n    if (index === 0) {\n      const previewFileReadimage = new Image();\n      previewFileReadimage.src = itemUploadRef.current[index].src;\n\n      previewFileReadimage.onload = function () {\n        const ctx = canvasRef.current.getContext(\"2d\");\n        var width = window.innerWidth;\n        var scale = width / previewFileReadimage.naturalWidth;\n        var height = previewFileReadimage.naturalHeight * scale;\n        texture.width = width;\n        texture.height = height; // Fill a Radial Gradient\n        // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createRadialGradient\n\n        var gradient = ctx.createRadialGradient(width / 2, height / 2, 0, width / 2, height / 2, width * 0.6);\n        gradient.addColorStop(0, \"#804e0f\");\n        gradient.addColorStop(1, \"#3b003b\");\n        ctx.fillStyle = gradient;\n        ctx.fillRect(0, 0, width, height);\n        canvasRef.current.height = height;\n        canvasRef.current.width = width;\n        var gradient = toasterGradient(width, height); ////////////////////\n\n        requestAnimationFrame(() => {\n          if (gradient) {\n            ctx.drawImage(gradient.canvas, 0, 0, canvasRef.current.width, canvasRef.current.height);\n            var screen = blend(ctx, gradient, width, height, function (bottomPixel, topPixel) {\n              return 255 - (255 - topPixel) * (255 - bottomPixel) / 255;\n            }); // replace `ctx.drawImage(gradient.canvas, 0, 0)` with this:\n\n            ctx.putImageData(screen, 0, 0);\n          }\n        });\n      }; ////////////////////\n      ////\n\n    }\n  };\n\n  const canvasRef = useRef(null);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: itemUploadRef.current[index] ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"img\", {\n        id: itemUploadRef.current[index],\n        ref: filterbaseimageRef,\n        onClick: closegate,\n        src: itemUploadRef.current ? itemUploadRef.current[index].src : null,\n        style: {\n          width: \"30%\",\n          height: \"auto\",\n          position: \"relative\",\n          margin: \"auto\",\n          marginRight: index === 0 ? \"20px\" : \"0px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        style: {\n          padding: \"0px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : null\n  }, void 0, false);\n}\n\n_s(ImageTobeFilteredx, \"421XCWxdbTcozkStWIHC1ghw+iM=\");\n\n_c = ImageTobeFilteredx;\nexport const ImageTobeFiltered = /*#__PURE__*/React.memo(ImageTobeFilteredx);\n_c2 = ImageTobeFiltered;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ImageTobeFilteredx\");\n$RefreshReg$(_c2, \"ImageTobeFiltered\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/upload/ImageTobeFiltered.tsx"],"names":["React","useRef","ImageTobeFilteredx","filterImage","index","itemUploadRef","setActivatefilterImage","filterbaseimageRef","closegate","addfilter","blend","background","foreground","width","height","transform","bottom","getImageData","top","i","size","data","length","previewFileReadimage","Image","src","current","onload","ctx","canvasRef","getContext","window","innerWidth","scale","naturalWidth","naturalHeight","texture","gradient","createRadialGradient","addColorStop","fillStyle","fillRect","toasterGradient","requestAnimationFrame","drawImage","canvas","screen","bottomPixel","topPixel","putImageData","position","margin","marginRight","padding","ImageTobeFiltered","memo"],"mappings":"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","sourcesContent":["import React, {\r\n  useRef,\r\n  useState,\r\n  useCallback,\r\n  useEffect,\r\n  useLayoutEffect,\r\n} from \"react\";\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport { SuperCrop } from \"./SuperCrop\";\r\nimport MusicNoteIcon from \"@mui/icons-material/MusicNote\";\r\nimport PhotoIcon from \"@mui/icons-material/Photo\";\r\nimport GifIcon from \"@mui/icons-material/Gif\";\r\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\r\nimport Axios from \"axios\";\r\nimport CropIcon from \"@mui/icons-material/Crop\";\r\nimport CheckIcon from \"@mui/icons-material/Check\";\r\nimport { PreviewCanvasCropAll } from \"./PreviewCanvasCropAll\";\r\nimport { PreviewCanvas } from \"./PreviewCanvas\";\r\n\r\nfunction ImageTobeFilteredx({\r\n  filterImage,\r\n  index,\r\n  itemUploadRef,\r\n  setActivatefilterImage,\r\n}: any): JSX.Element {\r\n  ///\r\n  ///\r\n  ///\r\n  const filterbaseimageRef: any = useRef(null);\r\n\r\n  const closegate = () => {\r\n    if (index === 0) {\r\n      ////\r\n      addfilter();\r\n    } else {\r\n      setActivatefilterImage(false);\r\n    }\r\n  };\r\n\r\n  function blend(\r\n    background: any,\r\n    foreground: any,\r\n    width: any,\r\n    height: any,\r\n    transform: any\r\n  ) {\r\n    // Side note: grabbing this data is the most expensive piece. For better\r\n    // performance, you could consider caching this data\r\n    var bottom = background.getImageData(0, 0, width, height);\r\n    var top = foreground.getImageData(0, 0, width, height);\r\n\r\n    for (var i = 0, size = top.data.length; i < size; i += 4) {\r\n      // red\r\n      top.data[i + 0] = transform(bottom.data[i + 0], top.data[i + 0]);\r\n      // green\r\n      top.data[i + 1] = transform(bottom.data[i + 1], top.data[i + 1]);\r\n      // blue\r\n      top.data[i + 2] = transform(bottom.data[i + 2], top.data[i + 2]);\r\n      // the fourth slot is alpha. We don't need that (so skip by 4)\r\n    }\r\n\r\n    return top;\r\n  }\r\n\r\n  const addfilter = () => {\r\n    if (index === 0) {\r\n      const previewFileReadimage = new Image();\r\n      previewFileReadimage.src = itemUploadRef.current[index].src;\r\n      previewFileReadimage.onload = function () {\r\n        const ctx = canvasRef.current.getContext(\"2d\");\r\n\r\n        var width = window.innerWidth;\r\n        var scale = width / previewFileReadimage.naturalWidth;\r\n        var height = previewFileReadimage.naturalHeight * scale;\r\n\r\n        texture.width = width;\r\n        texture.height = height;\r\n\r\n        // Fill a Radial Gradient\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createRadialGradient\r\n\r\n        var gradient = ctx.createRadialGradient(\r\n          width / 2,\r\n          height / 2,\r\n          0,\r\n          width / 2,\r\n          height / 2,\r\n          width * 0.6\r\n        );\r\n\r\n        gradient.addColorStop(0, \"#804e0f\");\r\n        gradient.addColorStop(1, \"#3b003b\");\r\n\r\n        ctx.fillStyle = gradient;\r\n        ctx.fillRect(0, 0, width, height);\r\n\r\n        canvasRef.current.height = height;\r\n        canvasRef.current.width = width;\r\n\r\n        var gradient = toasterGradient(width, height);\r\n\r\n        ////////////////////\r\n        requestAnimationFrame(() => {\r\n          if (gradient) {\r\n            ctx.drawImage(\r\n              gradient.canvas,\r\n              0,\r\n              0,\r\n              canvasRef.current.width,\r\n              canvasRef.current.height\r\n            );\r\n\r\n            var screen = blend(\r\n              ctx,\r\n              gradient,\r\n              width,\r\n              height,\r\n              function (bottomPixel: any, topPixel: any) {\r\n                return 255 - ((255 - topPixel) * (255 - bottomPixel)) / 255;\r\n              }\r\n            );\r\n\r\n            // replace `ctx.drawImage(gradient.canvas, 0, 0)` with this:\r\n            ctx.putImageData(screen, 0, 0);\r\n          }\r\n        });\r\n      };\r\n\r\n      ////////////////////\r\n      ////\r\n    }\r\n  };\r\n\r\n  const canvasRef: any = useRef(null);\r\n\r\n  return (\r\n    <>\r\n      {itemUploadRef.current[index] ? (\r\n        <>\r\n          {\" \"}\r\n          <img\r\n            id={itemUploadRef.current[index]}\r\n            ref={filterbaseimageRef}\r\n            onClick={closegate}\r\n            src={\r\n              itemUploadRef.current ? itemUploadRef.current[index].src : null\r\n            }\r\n            style={{\r\n              width: \"30%\",\r\n              height: \"auto\",\r\n              position: \"relative\",\r\n              margin: \"auto\",\r\n              marginRight: index === 0 ? \"20px\" : \"0px\",\r\n            }}\r\n          />\r\n          <canvas\r\n            ref={canvasRef}\r\n            style={{\r\n              padding: \"0px\",\r\n            }}\r\n          />\r\n        </>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport const ImageTobeFiltered = React.memo(ImageTobeFilteredx);\r\n"]},"metadata":{},"sourceType":"module"}