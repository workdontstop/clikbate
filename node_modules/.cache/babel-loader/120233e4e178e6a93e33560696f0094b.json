{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\upload\\\\SuperCrop.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { matchPc } from \"../DetectDevice\";\nimport { Grid } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport Masonry from \"@mui/lab/Masonry\";\nimport { PreviewCanvas } from \"./PreviewCanvas\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction SuperCropx({\n  cropimage,\n  selectedImage\n}) {\n  _s();\n\n  const cropCanvasRef = useRef(null); ////\n  ////\n  ////\n\n  const [cropArea, setcropArea] = useState(null);\n  const [crop, setcrop] = useState({\n    x: 300,\n    y: 0\n  });\n  const [zoom, setzoom] = useState(1);\n  const [bp, setbp] = useState(1);\n  const [cropwidth, setcropwidth] = useState(0);\n  const [cropheight, setcropheight] = useState(0); ///\n  ///\n  ///DARKMODE FROM REDUX\n\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const getpreviewFixedWidthRef = useRef(null);\n  const getCropHeightRef = useRef(null);\n  const getFixedCropWidthRef = useRef(null);\n  const [getCropHeight, setgetCropHeight] = useState(0);\n  const [getCropHeightRealImageRatio, setgetCropHeightRealImageRatio] = useState(0);\n  const [getFixedCropWidth, setgetFixedCropWidth] = useState(0);\n  const [getpreviewFixedWidth, setgetpreviewFixedWidth] = useState(0);\n  const [CropImageHolder, setCropImageHolder] = useState(null);\n  const [OriginalImageWidth, setOriginalImageWidth] = useState(0);\n  const [OriginalImageHeight, setOriginalImageHeight] = useState(0);\n  const [BoxCropActivated, setBoxCropActivated] = useState(true);\n  const hdcanvasvalue = 2; ///\n  ///\n  ///\n  ///GET OPTIONS SLIDER IMAGE WIDTH FROM MATERIAL UI GRID\n\n  useEffect(() => {\n    if (getpreviewFixedWidthRef.current && getpreviewFixedWidthRef.current.clientWidth) {\n      setgetpreviewFixedWidth(getpreviewFixedWidthRef.current.clientWidth);\n    }\n\n    if (getCropHeightRef.current && getCropHeightRef.current.clientWidth) {\n      setgetCropHeight(getCropHeightRef.current.clientHeight * hdcanvasvalue);\n      setgetCropHeightRealImageRatio(getCropHeightRef.current.clientHeight);\n    }\n\n    if (getFixedCropWidthRef.current && getFixedCropWidthRef.current.clientWidth) {\n      setgetFixedCropWidth(getFixedCropWidthRef.current.clientWidth);\n    }\n  }, []); ///\n\n  useEffect(() => {\n    const Newcropimage = new Image();\n    Newcropimage.src = cropimage;\n\n    Newcropimage.onload = function () {\n      setCropImageHolder(Newcropimage);\n      var data1 = Newcropimage.naturalWidth;\n      var data2 = Newcropimage.naturalHeight;\n      setOriginalImageWidth(data1);\n      setOriginalImageHeight(data2);\n      setcropwidth(data1);\n      setcropheight(data2);\n    };\n  }, [cropimage]);\n  useEffect(() => {\n    if (CropImageHolder && cropCanvasRef.current) {\n      const ctx = cropCanvasRef.current.getContext(\"2d\");\n      var RatiofromOriginalandfixedHeight = OriginalImageHeight / getCropHeight;\n      var NewBoxRatioWidth_WIDEIMAGE = OriginalImageWidth / RatiofromOriginalandfixedHeight;\n      setbp(NewBoxRatioWidth_WIDEIMAGE);\n      var RatiofromOriginalandfixedHeightx = OriginalImageWidth / getCropHeight;\n      var NewBoxRatioWidth_LONGIMAGE = OriginalImageHeight / RatiofromOriginalandfixedHeightx;\n      var ratioh = OriginalImageWidth * 3 / OriginalImageWidth;\n      var ratiow = OriginalImageHeight * 3 / OriginalImageHeight;\n\n      if (BoxCropActivated) {\n        cropCanvasRef.current.width = getCropHeight;\n        cropCanvasRef.current.height = getCropHeight;\n      } else {\n        cropCanvasRef.current.width = OriginalImageWidth;\n        cropCanvasRef.current.height = OriginalImageHeight;\n      }\n\n      var centerpreview = cropCanvasRef.current.width / 1.5 - NewBoxRatioWidth_LONGIMAGE / 1.5;\n      var xtraZoom = getCropHeight / NewBoxRatioWidth_WIDEIMAGE;\n      var centerCropCanvas = cropCanvasRef.current.width / 2 - NewBoxRatioWidth_WIDEIMAGE / 2;\n      var RatiofromOriginalandfixedHeight = OriginalImageHeight / getCropHeightRealImageRatio;\n      var newcropCSSWidth = OriginalImageWidth / RatiofromOriginalandfixedHeight;\n\n      if (BoxCropActivated) {\n        if (OriginalImageWidth > OriginalImageHeight) {\n          ctx.drawImage(CropImageHolder, crop.x, crop.y, NewBoxRatioWidth_WIDEIMAGE * zoom, getCropHeight * zoom);\n        } else {\n          ctx.drawImage(CropImageHolder, crop.x, crop.y, getCropHeight * zoom, NewBoxRatioWidth_LONGIMAGE * zoom);\n        }\n\n        cropCanvasRef.current.style.width = `${getCropHeight / hdcanvasvalue}px`;\n        cropCanvasRef.current.style.height = `${getCropHeight / hdcanvasvalue}px`;\n      } else {\n        ctx.drawImage(CropImageHolder, 0, 0, OriginalImageWidth * zoom, OriginalImageHeight * zoom);\n        cropCanvasRef.current.style.width = `${newcropCSSWidth}px`;\n        cropCanvasRef.current.style.height = `${getCropHeightRealImageRatio}px`;\n      }\n    }\n  }, [CropImageHolder, cropCanvasRef, OriginalImageWidth, OriginalImageHeight]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      ref: getCropHeightRef,\n      style: {\n        position: \"relative\",\n        width: \"100%\",\n        height: \"70%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          ref: getFixedCropWidthRef,\n          xs: 4\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\",\n        ref: cropCanvasRef,\n        style: {\n          padding: \"0px\",\n          backgroundColor: \"#00ccff\",\n          margin: \"auto\"\n        }\n      }, cropimage, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      style: {\n        padding: \"0px\",\n        backgroundColor: \"#00ccff\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        ref: getpreviewFixedWidthRef,\n        xs: 5,\n        style: {\n          padding: \"0px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Masonry, {\n      columns: matchPc ? 3 : 1,\n      spacing: 0,\n      style: {\n        overflowX: \"hidden\"\n      },\n      children: [selectedImage ? selectedImage.map((photo, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(PreviewCanvas, {\n            NewBoxRatioWidth_WIDEIMAGE: bp,\n            hdcanvasvalue: hdcanvasvalue,\n            BoxCropActivated: BoxCropActivated,\n            cropheight: cropheight,\n            cropwidth: cropwidth,\n            CropImageHolder: CropImageHolder,\n            cropCanvasRef: cropCanvasRef,\n            crop: crop,\n            zoom: zoom,\n            index: index,\n            image: photo,\n            getpreviewFixedWidth: getpreviewFixedWidth\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 19\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 17\n        }, this);\n      }) : null, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(SuperCropx, \"a21rOwAUWqSDTUn/6tjEi/Rl634=\", false, function () {\n  return [useSelector];\n});\n\n_c = SuperCropx;\nexport const SuperCrop = /*#__PURE__*/React.memo(SuperCropx);\n_c2 = SuperCrop;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SuperCropx\");\n$RefreshReg$(_c2, \"SuperCrop\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/upload/SuperCrop.tsx"],"names":["React","useRef","useState","useEffect","matchPc","Grid","useSelector","Masonry","PreviewCanvas","SuperCropx","cropimage","selectedImage","cropCanvasRef","cropArea","setcropArea","crop","setcrop","x","y","zoom","setzoom","bp","setbp","cropwidth","setcropwidth","cropheight","setcropheight","darkmode","state","GlobalReducer","darkmodeReducer","getpreviewFixedWidthRef","getCropHeightRef","getFixedCropWidthRef","getCropHeight","setgetCropHeight","getCropHeightRealImageRatio","setgetCropHeightRealImageRatio","getFixedCropWidth","setgetFixedCropWidth","getpreviewFixedWidth","setgetpreviewFixedWidth","CropImageHolder","setCropImageHolder","OriginalImageWidth","setOriginalImageWidth","OriginalImageHeight","setOriginalImageHeight","BoxCropActivated","setBoxCropActivated","hdcanvasvalue","current","clientWidth","clientHeight","Newcropimage","Image","src","onload","data1","naturalWidth","data2","naturalHeight","ctx","getContext","RatiofromOriginalandfixedHeight","NewBoxRatioWidth_WIDEIMAGE","RatiofromOriginalandfixedHeightx","NewBoxRatioWidth_LONGIMAGE","ratioh","ratiow","width","height","centerpreview","xtraZoom","centerCropCanvas","newcropCSSWidth","drawImage","style","position","padding","backgroundColor","margin","overflowX","map","photo","index","SuperCrop","memo"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport Cropper from \"react-easy-crop\";\r\nimport MusicNoteIcon from \"@mui/icons-material/MusicNote\";\r\nimport PhotoIcon from \"@mui/icons-material/Photo\";\r\nimport GifIcon from \"@mui/icons-material/Gif\";\r\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\r\nimport Slider from \"@mui/material/Slider\";\r\nimport { AnySoaRecord } from \"dns\";\r\nimport { PreviewCanvas } from \"./PreviewCanvas\";\r\n\r\nfunction SuperCropx({ cropimage, selectedImage }: any): JSX.Element {\r\n  const cropCanvasRef: any = useRef(null);\r\n\r\n  ////\r\n  ////\r\n  ////\r\n  const [cropArea, setcropArea] = useState<any>(null);\r\n  const [crop, setcrop] = useState<any>({ x: 300, y: 0 });\r\n  const [zoom, setzoom] = useState(1);\r\n\r\n  const [bp, setbp] = useState(1);\r\n\r\n  const [cropwidth, setcropwidth] = useState(0);\r\n  const [cropheight, setcropheight] = useState(0);\r\n\r\n  ///\r\n  ///\r\n  ///DARKMODE FROM REDUX\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n\r\n  const darkmodeReducer = darkmode;\r\n\r\n  const getpreviewFixedWidthRef = useRef<HTMLDivElement>(null);\r\n\r\n  const getCropHeightRef: any = useRef<HTMLDivElement>(null);\r\n\r\n  const getFixedCropWidthRef: any = useRef<HTMLDivElement>(null);\r\n\r\n  const [getCropHeight, setgetCropHeight] = useState(0);\r\n\r\n  const [getCropHeightRealImageRatio, setgetCropHeightRealImageRatio] =\r\n    useState(0);\r\n\r\n  const [getFixedCropWidth, setgetFixedCropWidth] = useState(0);\r\n\r\n  const [getpreviewFixedWidth, setgetpreviewFixedWidth] = useState(0);\r\n\r\n  const [CropImageHolder, setCropImageHolder] = useState<any>(null);\r\n\r\n  const [OriginalImageWidth, setOriginalImageWidth] = useState<number>(0);\r\n  const [OriginalImageHeight, setOriginalImageHeight] = useState<number>(0);\r\n\r\n  const [BoxCropActivated, setBoxCropActivated] = useState<boolean>(true);\r\n\r\n  const hdcanvasvalue = 2;\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  ///GET OPTIONS SLIDER IMAGE WIDTH FROM MATERIAL UI GRID\r\n  useEffect(() => {\r\n    if (\r\n      getpreviewFixedWidthRef.current &&\r\n      getpreviewFixedWidthRef.current.clientWidth\r\n    ) {\r\n      setgetpreviewFixedWidth(getpreviewFixedWidthRef.current.clientWidth);\r\n    }\r\n\r\n    if (getCropHeightRef.current && getCropHeightRef.current.clientWidth) {\r\n      setgetCropHeight(getCropHeightRef.current.clientHeight * hdcanvasvalue);\r\n      setgetCropHeightRealImageRatio(getCropHeightRef.current.clientHeight);\r\n    }\r\n\r\n    if (\r\n      getFixedCropWidthRef.current &&\r\n      getFixedCropWidthRef.current.clientWidth\r\n    ) {\r\n      setgetFixedCropWidth(getFixedCropWidthRef.current.clientWidth);\r\n    }\r\n  }, []);\r\n  ///\r\n\r\n  useEffect(() => {\r\n    const Newcropimage = new Image();\r\n    Newcropimage.src = cropimage;\r\n    Newcropimage.onload = function () {\r\n      setCropImageHolder(Newcropimage);\r\n\r\n      var data1 = Newcropimage.naturalWidth;\r\n      var data2 = Newcropimage.naturalHeight;\r\n      setOriginalImageWidth(data1);\r\n      setOriginalImageHeight(data2);\r\n\r\n      setcropwidth(data1);\r\n      setcropheight(data2);\r\n    };\r\n  }, [cropimage]);\r\n\r\n  useEffect(() => {\r\n    if (CropImageHolder && cropCanvasRef.current) {\r\n      const ctx = cropCanvasRef.current.getContext(\"2d\");\r\n\r\n      var RatiofromOriginalandfixedHeight = OriginalImageHeight / getCropHeight;\r\n      var NewBoxRatioWidth_WIDEIMAGE =\r\n        OriginalImageWidth / RatiofromOriginalandfixedHeight;\r\n\r\n      setbp(NewBoxRatioWidth_WIDEIMAGE);\r\n\r\n      var RatiofromOriginalandfixedHeightx = OriginalImageWidth / getCropHeight;\r\n      var NewBoxRatioWidth_LONGIMAGE =\r\n        OriginalImageHeight / RatiofromOriginalandfixedHeightx;\r\n\r\n      var ratioh = (OriginalImageWidth * 3) / OriginalImageWidth;\r\n      var ratiow = (OriginalImageHeight * 3) / OriginalImageHeight;\r\n\r\n      if (BoxCropActivated) {\r\n        cropCanvasRef.current.width = getCropHeight;\r\n        cropCanvasRef.current.height = getCropHeight;\r\n      } else {\r\n        cropCanvasRef.current.width = OriginalImageWidth;\r\n        cropCanvasRef.current.height = OriginalImageHeight;\r\n      }\r\n\r\n      var centerpreview =\r\n        cropCanvasRef.current.width / 1.5 - NewBoxRatioWidth_LONGIMAGE / 1.5;\r\n\r\n      var xtraZoom = getCropHeight / NewBoxRatioWidth_WIDEIMAGE;\r\n\r\n      var centerCropCanvas =\r\n        cropCanvasRef.current.width / 2 - NewBoxRatioWidth_WIDEIMAGE / 2;\r\n\r\n      var RatiofromOriginalandfixedHeight =\r\n        OriginalImageHeight / getCropHeightRealImageRatio;\r\n      var newcropCSSWidth =\r\n        OriginalImageWidth / RatiofromOriginalandfixedHeight;\r\n\r\n      if (BoxCropActivated) {\r\n        if (OriginalImageWidth > OriginalImageHeight) {\r\n          ctx.drawImage(\r\n            CropImageHolder,\r\n            crop.x,\r\n            crop.y,\r\n            NewBoxRatioWidth_WIDEIMAGE * zoom,\r\n            getCropHeight * zoom\r\n          );\r\n        } else {\r\n          ctx.drawImage(\r\n            CropImageHolder,\r\n            crop.x,\r\n            crop.y,\r\n            getCropHeight * zoom,\r\n            NewBoxRatioWidth_LONGIMAGE * zoom\r\n          );\r\n        }\r\n\r\n        cropCanvasRef.current.style.width = `${\r\n          getCropHeight / hdcanvasvalue\r\n        }px`;\r\n        cropCanvasRef.current.style.height = `${\r\n          getCropHeight / hdcanvasvalue\r\n        }px`;\r\n      } else {\r\n        ctx.drawImage(\r\n          CropImageHolder,\r\n          0,\r\n          0,\r\n          OriginalImageWidth * zoom,\r\n          OriginalImageHeight * zoom\r\n        );\r\n\r\n        cropCanvasRef.current.style.width = `${newcropCSSWidth}px`;\r\n        cropCanvasRef.current.style.height = `${getCropHeightRealImageRatio}px`;\r\n      }\r\n    }\r\n  }, [CropImageHolder, cropCanvasRef, OriginalImageWidth, OriginalImageHeight]);\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        ref={getCropHeightRef}\r\n        style={{\r\n          position: \"relative\",\r\n          width: \"100%\",\r\n          height: \"70%\",\r\n        }}\r\n      >\r\n        <Grid item xs={12}>\r\n          <Grid item ref={getFixedCropWidthRef} xs={4}></Grid>\r\n        </Grid>\r\n\r\n        <canvas\r\n          className={\r\n            darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\"\r\n          }\r\n          ref={cropCanvasRef}\r\n          key={cropimage}\r\n          style={{\r\n            padding: \"0px\",\r\n            backgroundColor: \"#00ccff\",\r\n            margin: \"auto\",\r\n          }}\r\n        />\r\n      </Grid>\r\n\r\n      <Grid\r\n        item\r\n        xs={12}\r\n        style={{\r\n          padding: \"0px\",\r\n          backgroundColor: \"#00ccff\",\r\n        }}\r\n      >\r\n        <Grid\r\n          item\r\n          ref={getpreviewFixedWidthRef}\r\n          xs={5}\r\n          style={{\r\n            padding: \"0px\",\r\n          }}\r\n        ></Grid>\r\n      </Grid>\r\n      <Masonry\r\n        columns={matchPc ? 3 : 1}\r\n        spacing={0}\r\n        style={{ overflowX: \"hidden\" }}\r\n      >\r\n        {selectedImage\r\n          ? selectedImage.map((photo: any, index: any) => {\r\n              return (\r\n                <div key={index}>\r\n                  <PreviewCanvas\r\n                    NewBoxRatioWidth_WIDEIMAGE={bp}\r\n                    hdcanvasvalue={hdcanvasvalue}\r\n                    BoxCropActivated={BoxCropActivated}\r\n                    cropheight={cropheight}\r\n                    cropwidth={cropwidth}\r\n                    CropImageHolder={CropImageHolder}\r\n                    cropCanvasRef={cropCanvasRef}\r\n                    crop={crop}\r\n                    zoom={zoom}\r\n                    index={index}\r\n                    image={photo}\r\n                    getpreviewFixedWidth={getpreviewFixedWidth}\r\n                  />\r\n                </div>\r\n              );\r\n            })\r\n          : null}{\" \"}\r\n      </Masonry>\r\n    </>\r\n  );\r\n}\r\n\r\nexport const SuperCrop = React.memo(SuperCropx);\r\n"]},"metadata":{},"sourceType":"module"}