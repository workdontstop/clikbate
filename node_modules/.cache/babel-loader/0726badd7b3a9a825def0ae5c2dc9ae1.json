{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oghen\\\\OneDrive\\\\Documents\\\\ClikBate\\\\super\\\\src\\\\profile\\\\TaskbarText.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction TaskbarTextx({\n  setShowText\n}) {\n  _s();\n\n  ///\n  ///\n  ///\n  /// INTERFACE/TYPES FOR SCREENHEIGHT AND DARKMODE\n  ///\n  ///\n  ///\n  /// GET DARKMODE FROM REDUX STORE\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        style: {\n          height: '200vh',\n          width: '100%',\n          position: 'fixed',\n          top: '0vh',\n          zIndex: 2000,\n          backgroundColor: darkmodeReducer ? \"rgb(255,255,255,0.5)\" : \"rgb(255,255,255,0.5)\"\n        },\n        children: \"kjhjk\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(TaskbarTextx, \"pyUiayCCYEIzD5+dG/9/J7hvlxI=\", false, function () {\n  return [useSelector];\n});\n\n_c = TaskbarTextx;\nexport const TaskbarText = /*#__PURE__*/React.memo(TaskbarTextx);\n_c2 = TaskbarText;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TaskbarTextx\");\n$RefreshReg$(_c2, \"TaskbarText\");","map":{"version":3,"sources":["C:/Users/oghen/OneDrive/Documents/ClikBate/super/src/profile/TaskbarText.tsx"],"names":["React","Grid","useSelector","TaskbarTextx","setShowText","darkmode","state","GlobalReducer","darkmodeReducer","height","width","position","top","zIndex","backgroundColor","TaskbarText","memo"],"mappings":";;;AAAA,OAAOA,KAAP,MAMO,OANP;AAQA,SAASC,IAAT,QAA4C,mBAA5C;AAIA,SAAyBC,WAAzB,QAAyD,aAAzD;;;;AA8BA,SAASC,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAyD;AAAA;;AAIrD;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAeH,WAAW,CAAEI,KAAD,KAAoC,EACjE,GAAGA,KAAK,CAACC;AADwD,GAApC,CAAD,CAAhC;AAGA,QAAMC,eAAe,GAAGH,QAAxB;AAIA,sBACI;AAAA,2BACI,QAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAA,6BAEI,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,EAAf;AAAmB,QAAA,KAAK,EAAE;AACtBI,UAAAA,MAAM,EAAE,OADc;AACLC,UAAAA,KAAK,EAAE,MADF;AACUC,UAAAA,QAAQ,EAAE,OADpB;AAC6BC,UAAAA,GAAG,EAAE,KADlC;AACyCC,UAAAA,MAAM,EAAE,IADjD;AACuDC,UAAAA,eAAe,EAAEN,eAAe,GACvG,sBADuG,GAEvG;AAHgB,SAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAmBH;;GA7CQL,Y;UAmBgBD,W;;;KAnBhBC,Y;AA+CT,OAAO,MAAMY,WAAW,gBAAGf,KAAK,CAACgB,IAAN,CAAWb,YAAX,CAApB;MAAMY,W","sourcesContent":["import React, {\r\n    useRef,\r\n    useEffect,\r\n    useCallback,\r\n    useState,\r\n    useLayoutEffect,\r\n} from \"react\";\r\nimport ControlPointDuplicateIcon from \"@mui/icons-material/ControlPointDuplicate\";\r\nimport { Grid, Switch, DialogContent } from \"@material-ui/core\";\r\nimport { matchPc, matchTablet, matchMobile } from \"../DetectDevice\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport { OptionsSlider } from \"../profile/OptionsSlider\";\r\nimport { RootStateOrAny, useSelector, useDispatch } from \"react-redux\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport Axios from \"axios\";\r\nimport CheckIcon from \"@mui/icons-material/Check\";\r\nimport date from \"date-and-time\";\r\nimport { UserInfoUpdatePROFILE } from \"../log/actions/UserdataAction\";\r\nimport { UserInfoUpdateBILLBOARD } from \"../log/actions/UserdataAction\";\r\nimport { usePalette } from \"react-palette\";\r\nimport { UpdateColorAction } from \"../GlobalActions\";\r\nimport EditTwoToneIcon from \"@mui/icons-material/EditTwoTone\";\r\nimport DoneOutlineIcon from '@mui/icons-material/DoneOutline';\r\nimport { UpdateUploadData } from \"../GlobalActions\";\r\nimport DoneIcon from '@mui/icons-material/Done';\r\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport CropIcon from '@mui/icons-material/Crop';\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport { TaskbarCrop } from \"./TaskbarCrop\";\r\nimport set from \"date-fns/set/index.js\";\r\nimport TitleIcon from '@mui/icons-material/Title';\r\nimport TouchAppIcon from '@mui/icons-material/TouchApp';\r\nimport InsertPhotoIcon from '@material-ui/icons/InsertPhoto';\r\nimport RestoreIcon from '@material-ui/icons/Restore';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction TaskbarTextx({ setShowText }: any): JSX.Element {\r\n\r\n\r\n\r\n    ///\r\n    ///\r\n    ///\r\n    /// INTERFACE/TYPES FOR SCREENHEIGHT AND DARKMODE\r\n    interface RootStateGlobalReducer {\r\n        GlobalReducer: {\r\n            darkmode: boolean;\r\n            screenHeight: number;\r\n        };\r\n    }\r\n\r\n    ///\r\n    ///\r\n    ///\r\n    /// GET DARKMODE FROM REDUX STORE\r\n    const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n        ...state.GlobalReducer,\r\n    }));\r\n    const darkmodeReducer = darkmode;\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <Grid container>\r\n\r\n                <Grid item xs={12} style={{\r\n                    height: '200vh', width: '100%', position: 'fixed', top: '0vh', zIndex: 2000, backgroundColor: darkmodeReducer\r\n                        ? \"rgb(255,255,255,0.5)\"\r\n                        : \"rgb(255,255,255,0.5)\"\r\n                }}>\r\n\r\n\r\n                    kjhjk\r\n                </Grid>\r\n\r\n\r\n            </Grid>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport const TaskbarText = React.memo(TaskbarTextx);\r\n"]},"metadata":{},"sourceType":"module"}