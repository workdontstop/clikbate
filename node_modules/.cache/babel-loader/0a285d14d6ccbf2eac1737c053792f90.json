{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\upload\\\\PreviewCanvas.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction PreviewCanvasx({\n  image\n}) {\n  _s();\n\n  ///\n  ///\n  ///DARKMODE FROM REDUX\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const canvasRef = useRef(null);\n  const [imagehold, setimagehold] = useState(null);\n  const [imageWidth, setimageWidth] = useState(null);\n  const [imageHeight, setimageHeight] = useState(null);\n  useEffect(() => {\n    const catimage = new Image();\n    catimage.src = image;\n\n    catimage.onload = function () {\n      setimagehold(catimage);\n      setimageWidth(catimage.naturalWidth);\n      setimageHeight(catimage.naturalHeight);\n    };\n  }, [image]);\n  useEffect(() => {\n    if (imagehold && canvasRef.current) {\n      var sourceX = 150;\n      var sourceY = 0;\n      var sourceW = imageWidth;\n      var sourceH = imageHeight;\n      var destW = sourceW;\n      var destH = sourceH;\n      var destX = canvasRef.width / 2 - destW / 2;\n      var destY = canvasRef.height / 2 - destH / 2;\n      const ctx = canvasRef.current.getContext(\"2d\");\n      ctx.drawImage(imagehold, 0, 0);\n    }\n  }, [imagehold, canvasRef, imageWidth, imageHeight]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      className: darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\",\n      ref: canvasRef,\n      width: imageWidth,\n      height: 800\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(PreviewCanvasx, \"ii5IVNQ43VsGVaIx3fMivnWoiQQ=\", false, function () {\n  return [useSelector];\n});\n\n_c = PreviewCanvasx;\nexport const PreviewCanvas = /*#__PURE__*/React.memo(PreviewCanvasx);\n_c2 = PreviewCanvas;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PreviewCanvasx\");\n$RefreshReg$(_c2, \"PreviewCanvas\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/upload/PreviewCanvas.tsx"],"names":["React","useRef","useState","useEffect","useSelector","PreviewCanvasx","image","darkmode","state","GlobalReducer","darkmodeReducer","canvasRef","imagehold","setimagehold","imageWidth","setimageWidth","imageHeight","setimageHeight","catimage","Image","src","onload","naturalWidth","naturalHeight","current","sourceX","sourceY","sourceW","sourceH","destW","destH","destX","width","destY","height","ctx","getContext","drawImage","PreviewCanvas","memo"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AAIA,SAASC,WAAT,QAAyC,aAAzC;;;;AAYA,SAASC,cAAT,CAAwB;AAAEC,EAAAA;AAAF,CAAxB,EAAqD;AAAA;;AACnD;AACA;AACA;AAMA,QAAM;AAAEC,IAAAA;AAAF,MAAeH,WAAW,CAAEI,KAAD,KAAoC,EACnE,GAAGA,KAAK,CAACC;AAD0D,GAApC,CAAD,CAAhC;AAIA,QAAMC,eAAe,GAAGH,QAAxB;AAEA,QAAMI,SAAc,GAAGV,MAAM,CAAC,IAAD,CAA7B;AAEA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAM,IAAN,CAA1C;AACA,QAAM,CAACY,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAM,IAAN,CAA5C;AACA,QAAM,CAACc,WAAD,EAAcC,cAAd,IAAgCf,QAAQ,CAAM,IAAN,CAA9C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMe,QAAQ,GAAG,IAAIC,KAAJ,EAAjB;AACAD,IAAAA,QAAQ,CAACE,GAAT,GAAed,KAAf;;AACAY,IAAAA,QAAQ,CAACG,MAAT,GAAkB,YAAY;AAC5BR,MAAAA,YAAY,CAACK,QAAD,CAAZ;AACAH,MAAAA,aAAa,CAACG,QAAQ,CAACI,YAAV,CAAb;AACAL,MAAAA,cAAc,CAACC,QAAQ,CAACK,aAAV,CAAd;AACD,KAJD;AAKD,GARQ,EAQN,CAACjB,KAAD,CARM,CAAT;AAUAH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,SAAS,IAAID,SAAS,CAACa,OAA3B,EAAoC;AAClC,UAAIC,OAAO,GAAG,GAAd;AACA,UAAIC,OAAO,GAAG,CAAd;AACA,UAAIC,OAAO,GAAGb,UAAd;AACA,UAAIc,OAAO,GAAGZ,WAAd;AACA,UAAIa,KAAK,GAAGF,OAAZ;AACA,UAAIG,KAAK,GAAGF,OAAZ;AACA,UAAIG,KAAK,GAAGpB,SAAS,CAACqB,KAAV,GAAkB,CAAlB,GAAsBH,KAAK,GAAG,CAA1C;AACA,UAAII,KAAK,GAAGtB,SAAS,CAACuB,MAAV,GAAmB,CAAnB,GAAuBJ,KAAK,GAAG,CAA3C;AACA,YAAMK,GAAG,GAAGxB,SAAS,CAACa,OAAV,CAAkBY,UAAlB,CAA6B,IAA7B,CAAZ;AAEAD,MAAAA,GAAG,CAACE,SAAJ,CAAczB,SAAd,EAAyB,CAAzB,EAA4B,CAA5B;AACD;AACF,GAdQ,EAcN,CAACA,SAAD,EAAYD,SAAZ,EAAuBG,UAAvB,EAAmCE,WAAnC,CAdM,CAAT;AAgBA,sBACE;AAAA,2BACE;AACE,MAAA,SAAS,EAAEN,eAAe,GAAG,mBAAH,GAAyB,oBADrD;AAEE,MAAA,GAAG,EAAEC,SAFP;AAGE,MAAA,KAAK,EAAEG,UAHT;AAIE,MAAA,MAAM,EAAE;AAJV;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAUD;;GAzDQT,c;UAScD,W;;;KATdC,c;AA2DT,OAAO,MAAMiC,aAAa,gBAAGtC,KAAK,CAACuC,IAAN,CAAWlC,cAAX,CAAtB;MAAMiC,a","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport Cropper from \"react-easy-crop\";\r\nimport MusicNoteIcon from \"@mui/icons-material/MusicNote\";\r\nimport PhotoIcon from \"@mui/icons-material/Photo\";\r\nimport GifIcon from \"@mui/icons-material/Gif\";\r\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\r\nimport Slider from \"@mui/material/Slider\";\r\nimport { AnySoaRecord } from \"dns\";\r\n\r\nfunction PreviewCanvasx({ image }: any): JSX.Element {\r\n  ///\r\n  ///\r\n  ///DARKMODE FROM REDUX\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n\r\n  const darkmodeReducer = darkmode;\r\n\r\n  const canvasRef: any = useRef(null);\r\n\r\n  const [imagehold, setimagehold] = useState<any>(null);\r\n  const [imageWidth, setimageWidth] = useState<any>(null);\r\n  const [imageHeight, setimageHeight] = useState<any>(null);\r\n\r\n  useEffect(() => {\r\n    const catimage = new Image();\r\n    catimage.src = image;\r\n    catimage.onload = function () {\r\n      setimagehold(catimage);\r\n      setimageWidth(catimage.naturalWidth);\r\n      setimageHeight(catimage.naturalHeight);\r\n    };\r\n  }, [image]);\r\n\r\n  useEffect(() => {\r\n    if (imagehold && canvasRef.current) {\r\n      var sourceX = 150;\r\n      var sourceY = 0;\r\n      var sourceW = imageWidth;\r\n      var sourceH = imageHeight;\r\n      var destW = sourceW;\r\n      var destH = sourceH;\r\n      var destX = canvasRef.width / 2 - destW / 2;\r\n      var destY = canvasRef.height / 2 - destH / 2;\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n\r\n      ctx.drawImage(imagehold, 0, 0);\r\n    }\r\n  }, [imagehold, canvasRef, imageWidth, imageHeight]);\r\n\r\n  return (\r\n    <>\r\n      <canvas\r\n        className={darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\"}\r\n        ref={canvasRef}\r\n        width={imageWidth}\r\n        height={800}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport const PreviewCanvas = React.memo(PreviewCanvasx);\r\n"]},"metadata":{},"sourceType":"module"}