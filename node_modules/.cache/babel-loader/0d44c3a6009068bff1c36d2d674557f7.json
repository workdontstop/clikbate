{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\upload\\\\PreviewCanvas.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction PreviewCanvasx({\n  image,\n  getSliderWidth\n}) {\n  _s();\n\n  ///\n  ///\n  ///DARKMODE FROM REDUX\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const canvasRef = useRef(null);\n  const [imagehold, setimagehold] = useState(null);\n  const [imageWidth, setimageWidth] = useState(null);\n  const [imageHeight, setimageHeight] = useState(null);\n  const [imageW, setimageW] = useState(null);\n  const [imageH, setimageH] = useState(null);\n  useEffect(() => {\n    const catimage = new Image();\n    catimage.src = image;\n\n    catimage.onload = function () {\n      setimagehold(catimage);\n      let nw = catimage.naturalWidth;\n      let nh = catimage.naturalHeight;\n      setimageW(catimage.naturalWidth);\n      setimageH(catimage.naturalHeight);\n      let aspectH = nw / nh;\n      let h = getSliderWidth / aspectH;\n      setimageHeight(h);\n    };\n  }, [image, imageHeight, getSliderWidth]);\n  useEffect(() => {\n    if (imagehold && canvasRef.current) {\n      var sourceX = 150;\n      var sourceY = 0;\n      var sourceW = imageWidth;\n      var sourceH = imageHeight;\n      var destW = sourceW;\n      var destH = sourceH;\n      var destX = canvasRef.width / 2 - destW / 2;\n      var destY = canvasRef.height / 2 - destH / 2;\n      const ctx = canvasRef.current.getContext(\"2d\");\n      canvasRef.current.height = imageH;\n      canvasRef.current.width = imageW;\n      ctx.drawImage(imagehold, 0, 0, imageW, imageH);\n    }\n  }, [imagehold, canvasRef]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      className: darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\",\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(PreviewCanvasx, \"E6oIUX3FGpVIwpHvk62Cd9EQmuo=\", false, function () {\n  return [useSelector];\n});\n\n_c = PreviewCanvasx;\nexport const PreviewCanvas = /*#__PURE__*/React.memo(PreviewCanvasx);\n_c2 = PreviewCanvas;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PreviewCanvasx\");\n$RefreshReg$(_c2, \"PreviewCanvas\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/upload/PreviewCanvas.tsx"],"names":["React","useRef","useState","useEffect","useSelector","PreviewCanvasx","image","getSliderWidth","darkmode","state","GlobalReducer","darkmodeReducer","canvasRef","imagehold","setimagehold","imageWidth","setimageWidth","imageHeight","setimageHeight","imageW","setimageW","imageH","setimageH","catimage","Image","src","onload","nw","naturalWidth","nh","naturalHeight","aspectH","h","current","sourceX","sourceY","sourceW","sourceH","destW","destH","destX","width","destY","height","ctx","getContext","drawImage","PreviewCanvas","memo"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport Cropper from \"react-easy-crop\";\r\nimport MusicNoteIcon from \"@mui/icons-material/MusicNote\";\r\nimport PhotoIcon from \"@mui/icons-material/Photo\";\r\nimport GifIcon from \"@mui/icons-material/Gif\";\r\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\r\nimport Slider from \"@mui/material/Slider\";\r\nimport { AnySoaRecord } from \"dns\";\r\n\r\nfunction PreviewCanvasx({ image, getSliderWidth }: any): JSX.Element {\r\n  ///\r\n  ///\r\n  ///DARKMODE FROM REDUX\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n\r\n  const darkmodeReducer = darkmode;\r\n\r\n  const canvasRef: any = useRef(null);\r\n\r\n  const [imagehold, setimagehold] = useState<any>(null);\r\n  const [imageWidth, setimageWidth] = useState<any>(null);\r\n  const [imageHeight, setimageHeight] = useState<any>(null);\r\n\r\n  const [imageW, setimageW] = useState<any>(null);\r\n  const [imageH, setimageH] = useState<any>(null);\r\n\r\n  useEffect(() => {\r\n    const catimage = new Image();\r\n    catimage.src = image;\r\n    catimage.onload = function () {\r\n      setimagehold(catimage);\r\n\r\n      let nw = catimage.naturalWidth;\r\n      let nh = catimage.naturalHeight;\r\n\r\n      setimageW(catimage.naturalWidth);\r\n      setimageH(catimage.naturalHeight);\r\n\r\n      let aspectH = nw / nh;\r\n      let h = getSliderWidth / aspectH;\r\n      setimageHeight(h);\r\n    };\r\n  }, [image, imageHeight, getSliderWidth]);\r\n\r\n  useEffect(() => {\r\n    if (imagehold && canvasRef.current) {\r\n      var sourceX = 150;\r\n      var sourceY = 0;\r\n      var sourceW = imageWidth;\r\n      var sourceH = imageHeight;\r\n      var destW = sourceW;\r\n      var destH = sourceH;\r\n      var destX = canvasRef.width / 2 - destW / 2;\r\n      var destY = canvasRef.height / 2 - destH / 2;\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n      canvasRef.current.height = imageH;\r\n      canvasRef.current.width = imageW;\r\n      ctx.drawImage(imagehold, 0, 0, imageW, imageH);\r\n    }\r\n  }, [imagehold, canvasRef]);\r\n\r\n  return (\r\n    <>\r\n      <canvas\r\n        className={darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\"}\r\n        ref={canvasRef}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport const PreviewCanvas = React.memo(PreviewCanvasx);\r\n"]},"metadata":{},"sourceType":"module"}