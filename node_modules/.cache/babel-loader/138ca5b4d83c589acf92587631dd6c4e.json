{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\log\\\\TextFieldLogin.tsx\";\nimport React from \"react\";\nimport { IconButton, InputAdornment, TextField } from \"@material-ui/core\";\nimport VisibilityOffIcon from \"@material-ui/icons/VisibilityOff\";\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\nimport { isTablet } from \"react-device-detect\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction TextFieldLoginx({\n  updateLoginvalues,\n  rawLoginValues,\n  ShowLoginPasswordForaWhile,\n  loginShowPassword,\n  size,\n  passwordType,\n  withHolder\n}) {\n  const matchTablet = isTablet;\n  var widthTrue = \"\";\n  var width = \" \";\n\n  switch (size) {\n    case \"small\":\n      width = \"99%\";\n      var transform = \"scale(0.93)\";\n      var zIndex = 0;\n      var font1 = \"\";\n      var font2 = \"\";\n      break;\n\n    default:\n      width = withHolder;\n      var transform = \"scale(1)\";\n      var zIndex = 1;\n      var font1 = \"2.7vh\";\n      var font2 = \"1.9vh\";\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: passwordType ? /*#__PURE__*/_jsxDEV(TextField, {\n      size: size,\n      inputProps: {\n        style: {\n          fontSize: font1\n        }\n      },\n      InputLabelProps: {\n        style: {\n          fontSize: font2\n        }\n      },\n      style: {\n        transform: transform,\n        width: width,\n        paddingBottom: \"40px\",\n        zIndex: zIndex\n      },\n      label: \"Password\",\n      onChange: updateLoginvalues,\n      type: loginShowPassword ? \"text\" : \"password\",\n      name: \"inputedPassword\",\n      value: rawLoginValues.inputedPassword,\n      variant: \"standard\",\n      InputProps: {\n        endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"end\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            onMouseDown: ShowLoginPasswordForaWhile,\n            \"aria-label\": \"toggle password visibility\",\n            children: loginShowPassword ? /*#__PURE__*/_jsxDEV(VisibilityIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(VisibilityOffIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 15\n        }, this)\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(TextField, {\n      size: size,\n      inputProps: {\n        style: {\n          fontSize: font1\n        }\n      },\n      InputLabelProps: {\n        style: {\n          fontSize: font2\n        }\n      },\n      style: {\n        transform: transform,\n        width: width,\n        paddingBottom: \"70px\"\n      },\n      label: \"Username\",\n      margin: \"normal\",\n      type: \"text\",\n      onChange: updateLoginvalues,\n      name: \"inputedUsername\",\n      value: rawLoginValues.inputedUsername,\n      variant: \"standard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_c = TextFieldLoginx;\nexport const TextFieldLogin = /*#__PURE__*/React.memo(TextFieldLoginx);\n_c2 = TextFieldLogin;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TextFieldLoginx\");\n$RefreshReg$(_c2, \"TextFieldLogin\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/log/TextFieldLogin.tsx"],"names":["React","IconButton","InputAdornment","TextField","VisibilityOffIcon","VisibilityIcon","isTablet","TextFieldLoginx","updateLoginvalues","rawLoginValues","ShowLoginPasswordForaWhile","loginShowPassword","size","passwordType","withHolder","matchTablet","widthTrue","width","transform","zIndex","font1","font2","style","fontSize","paddingBottom","inputedPassword","endAdornment","inputedUsername","TextFieldLogin","memo"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n\r\nimport { IconButton, InputAdornment, TextField } from \"@material-ui/core\";\r\nimport VisibilityOffIcon from \"@material-ui/icons/VisibilityOff\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\nimport { ItextfIeldLogin } from \"./log-Interfaces\";\r\nimport { isTablet } from \"react-device-detect\";\r\n\r\nfunction TextFieldLoginx({\r\n  updateLoginvalues,\r\n  rawLoginValues,\r\n  ShowLoginPasswordForaWhile,\r\n  loginShowPassword,\r\n  size,\r\n  passwordType,\r\n  withHolder,\r\n}: ItextfIeldLogin): JSX.Element {\r\n  const matchTablet = isTablet;\r\n\r\n  var widthTrue = \"\";\r\n  var width = \" \";\r\n\r\n  switch (size) {\r\n    case \"small\":\r\n      width = \"99%\";\r\n      var transform = \"scale(0.93)\";\r\n      var zIndex = 0;\r\n      var font1 = \"\";\r\n      var font2 = \"\";\r\n      break;\r\n    default:\r\n      width = withHolder;\r\n      var transform = \"scale(1)\";\r\n      var zIndex = 1;\r\n      var font1 = \"2.7vh\";\r\n      var font2 = \"1.9vh\";\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {passwordType ? (\r\n        <TextField\r\n          size={size}\r\n          inputProps={{ style: { fontSize: font1 } }}\r\n          InputLabelProps={{ style: { fontSize: font2 } }}\r\n          style={{\r\n            transform: transform,\r\n            width: width,\r\n            paddingBottom: \"40px\",\r\n            zIndex: zIndex,\r\n          }}\r\n          label=\"Password\"\r\n          onChange={updateLoginvalues}\r\n          type={loginShowPassword ? \"text\" : \"password\"}\r\n          name=\"inputedPassword\"\r\n          value={rawLoginValues.inputedPassword}\r\n          variant=\"standard\"\r\n          InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment position=\"end\">\r\n                <IconButton\r\n                  onMouseDown={ShowLoginPasswordForaWhile}\r\n                  aria-label=\"toggle password visibility\"\r\n                >\r\n                  {loginShowPassword ? (\r\n                    <VisibilityIcon />\r\n                  ) : (\r\n                    <VisibilityOffIcon />\r\n                  )}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n      ) : (\r\n        <TextField\r\n          size={size}\r\n          inputProps={{ style: { fontSize: font1 } }}\r\n          InputLabelProps={{ style: { fontSize: font2 } }}\r\n          style={{\r\n            transform: transform,\r\n            width: width,\r\n            paddingBottom: \"70px\",\r\n          }}\r\n          label=\"Username\"\r\n          margin=\"normal\"\r\n          type=\"text\"\r\n          onChange={updateLoginvalues}\r\n          name=\"inputedUsername\"\r\n          value={rawLoginValues.inputedUsername}\r\n          variant=\"standard\"\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport const TextFieldLogin = React.memo(TextFieldLoginx);\r\n"]},"metadata":{},"sourceType":"module"}