{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\app-folder\\\\LogButtons.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Grid, Button } from \"@material-ui/core\";\nimport { isBrowser } from \"react-device-detect\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction LoginButtonsx({\n  loginstyle,\n  signupstyle\n}) {\n  _s();\n\n  var matchPc = isBrowser; ///\n  ///\n  ///\n  ///CLOSE LOG MODAL\n\n  const [OpenModalFormOnce, setOpenModalFormOnce] = useState(false);\n  const CloseModalForm = useCallback(DeviceBackButtonClicked => {\n    ///onpopstate fires when back and forward buttons used\n    if (DeviceBackButtonClicked === 1) {\n      window.onpopstate = () => {\n        setShowModalForm(false);\n        setOpenModalFormOnce(false);\n      };\n    } else {\n      setShowModalForm(false);\n      setOpenModalFormOnce(false); ///Replace modal history state with previous history state\n\n      window.history.back();\n    }\n  }, [showModalForm, OpenModalFormOnce]); ///\n  ///\n  ///\n  ///OPEN LOG MODAL\n\n  const [formtype, setFormtype] = useState(1);\n  const OpenModalForm = useCallback(formtypedata => {\n    setFormtype(formtypedata);\n    setShowModalForm(true); ///Replace current history state (since opening a modal Level 2 grid)...\n    /// if this was a level 1 grid (profile-info page use Pushstate to create new history state)\n\n    let modalName;\n\n    if (formtypedata === 0) {\n      modalName = \"SignUp\";\n    } else {\n      modalName = \"LogIn\";\n    }\n\n    if (!OpenModalFormOnce) {\n      window.history.pushState(null, \"\", modalName);\n      setOpenModalFormOnce(true);\n      CloseModalForm(1);\n    }\n  }, [showModalForm, OpenModalFormOnce, CloseModalForm]);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    className: matchPc ? \"containerloginpc\" : \"containerloginmobile \",\n    item: true,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      sm: 3,\n      md: 5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      className: \"buttonpad buttonshake\",\n      xs: 12,\n      sm: 6,\n      md: 2,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => OpenModalForm(1),\n        style: loginstyle,\n        fullWidth: true,\n        variant: \"outlined\",\n        size: \"large\",\n        color: \"primary\",\n        children: \"Log In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      sm: 12,\n      className: \"logbuttonspace\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      sm: 3,\n      md: 5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      className: \"buttonpad buttonshake\",\n      xs: 12,\n      sm: 6,\n      md: 2,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => OpenModalForm(0),\n        style: signupstyle,\n        fullWidth: true,\n        variant: \"contained\",\n        size: \"large\",\n        color: \"secondary\",\n        children: [\" \", \"Sign Up\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LoginButtonsx, \"ZOw0xY/gcjLUOFXL2VQwoHPfpfM=\");\n\n_c = LoginButtonsx;\nexport const LoginButtons = /*#__PURE__*/React.memo(LoginButtonsx);\n_c2 = LoginButtons;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"LoginButtonsx\");\n$RefreshReg$(_c2, \"LoginButtons\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/app-folder/LogButtons.tsx"],"names":["React","Grid","Button","isBrowser","LoginButtonsx","loginstyle","signupstyle","matchPc","OpenModalFormOnce","setOpenModalFormOnce","useState","CloseModalForm","useCallback","DeviceBackButtonClicked","window","onpopstate","setShowModalForm","history","back","showModalForm","formtype","setFormtype","OpenModalForm","formtypedata","modalName","pushState","LoginButtons","memo"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,mBAA7B;AACA,SAASC,SAAT,QAA0B,qBAA1B;;;AAGA,SAASC,aAAT,CAAuB;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAvB,EAAiE;AAAA;;AAC/D,MAAIC,OAAO,GAAGJ,SAAd,CAD+D,CAG/D;AACA;AACA;AACA;;AACA,QAAM,CAACK,iBAAD,EAAoBC,oBAApB,IAA4CC,QAAQ,CAAU,KAAV,CAA1D;AACA,QAAMC,cAAc,GAAGC,WAAW,CAC/BC,uBAAD,IAAqC;AACnC;AACA,QAAIA,uBAAuB,KAAK,CAAhC,EAAmC;AACjCC,MAAAA,MAAM,CAACC,UAAP,GAAoB,MAAM;AACxBC,QAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAP,QAAAA,oBAAoB,CAAC,KAAD,CAApB;AACD,OAHD;AAID,KALD,MAKO;AACLO,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAP,MAAAA,oBAAoB,CAAC,KAAD,CAApB,CAFK,CAGL;;AACAK,MAAAA,MAAM,CAACG,OAAP,CAAeC,IAAf;AACD;AACF,GAd+B,EAehC,CAACC,aAAD,EAAgBX,iBAAhB,CAfgC,CAAlC,CAR+D,CA0B/D;AACA;AACA;AACA;;AACA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAS,CAAT,CAAxC;AACA,QAAMY,aAAa,GAAGV,WAAW,CAC9BW,YAAD,IAA0B;AACxBF,IAAAA,WAAW,CAACE,YAAD,CAAX;AACAP,IAAAA,gBAAgB,CAAC,IAAD,CAAhB,CAFwB,CAGxB;AACA;;AACA,QAAIQ,SAAJ;;AACA,QAAID,YAAY,KAAK,CAArB,EAAwB;AACtBC,MAAAA,SAAS,GAAG,QAAZ;AACD,KAFD,MAEO;AACLA,MAAAA,SAAS,GAAG,OAAZ;AACD;;AAED,QAAI,CAAChB,iBAAL,EAAwB;AACtBM,MAAAA,MAAM,CAACG,OAAP,CAAeQ,SAAf,CAAyB,IAAzB,EAA+B,EAA/B,EAAmCD,SAAnC;AACAf,MAAAA,oBAAoB,CAAC,IAAD,CAApB;AACAE,MAAAA,cAAc,CAAC,CAAD,CAAd;AACD;AACF,GAlB8B,EAmB/B,CAACQ,aAAD,EAAgBX,iBAAhB,EAAmCG,cAAnC,CAnB+B,CAAjC;AAqBA,sBACE,QAAC,IAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,SAAS,EAAEJ,OAAO,GAAG,kBAAH,GAAwB,uBAF5C;AAGE,IAAA,IAAI,MAHN;AAAA,4BAKE,QAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAkB,MAAA,EAAE,EAAE;AAAtB;AAAA;AAAA;AAAA;AAAA,YALF,eAME,QAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,SAAS,EAAC,uBAArB;AAA6C,MAAA,EAAE,EAAE,EAAjD;AAAqD,MAAA,EAAE,EAAE,CAAzD;AAA4D,MAAA,EAAE,EAAE,CAAhE;AAAA,6BACE,QAAC,MAAD;AACE,QAAA,OAAO,EAAE,MAAMe,aAAa,CAAC,CAAD,CAD9B;AAEE,QAAA,KAAK,EAAEjB,UAFT;AAGE,QAAA,SAAS,EAAE,IAHb;AAIE,QAAA,OAAO,EAAC,UAJV;AAKE,QAAA,IAAI,EAAC,OALP;AAME,QAAA,KAAK,EAAC,SANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YANF,eAkBE,QAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAmB,MAAA,SAAS,EAAC;AAA7B;AAAA;AAAA;AAAA;AAAA,YAlBF,eAoBE,QAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAkB,MAAA,EAAE,EAAE;AAAtB;AAAA;AAAA;AAAA;AAAA,YApBF,eAqBE,QAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,SAAS,EAAC,uBAArB;AAA6C,MAAA,EAAE,EAAE,EAAjD;AAAqD,MAAA,EAAE,EAAE,CAAzD;AAA4D,MAAA,EAAE,EAAE,CAAhE;AAAA,6BACE,QAAC,MAAD;AACE,QAAA,OAAO,EAAE,MAAMiB,aAAa,CAAC,CAAD,CAD9B;AAEE,QAAA,KAAK,EAAEhB,WAFT;AAGE,QAAA,SAAS,EAAE,IAHb;AAIE,QAAA,OAAO,EAAC,WAJV;AAKE,QAAA,IAAI,EAAC,OALP;AAME,QAAA,KAAK,EAAC,WANR;AAAA,mBAQG,GARH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YArBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqCD;;GAzFQF,a;;KAAAA,a;AA2FT,OAAO,MAAMsB,YAAY,gBAAG1B,KAAK,CAAC2B,IAAN,CAAWvB,aAAX,CAArB;MAAMsB,Y","sourcesContent":["import React from \"react\";\r\nimport { Grid, Button } from \"@material-ui/core\";\r\nimport { isBrowser } from \"react-device-detect\";\r\nimport { ILogButtons } from \"./appFolder-Interfaces\";\r\n\r\nfunction LoginButtonsx({ loginstyle, signupstyle }: ILogButtons) {\r\n  var matchPc = isBrowser;\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  ///CLOSE LOG MODAL\r\n  const [OpenModalFormOnce, setOpenModalFormOnce] = useState<boolean>(false);\r\n  const CloseModalForm = useCallback(\r\n    (DeviceBackButtonClicked: number) => {\r\n      ///onpopstate fires when back and forward buttons used\r\n      if (DeviceBackButtonClicked === 1) {\r\n        window.onpopstate = () => {\r\n          setShowModalForm(false);\r\n          setOpenModalFormOnce(false);\r\n        };\r\n      } else {\r\n        setShowModalForm(false);\r\n        setOpenModalFormOnce(false);\r\n        ///Replace modal history state with previous history state\r\n        window.history.back();\r\n      }\r\n    },\r\n    [showModalForm, OpenModalFormOnce]\r\n  );\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  ///OPEN LOG MODAL\r\n  const [formtype, setFormtype] = useState<number>(1);\r\n  const OpenModalForm = useCallback(\r\n    (formtypedata: number) => {\r\n      setFormtype(formtypedata);\r\n      setShowModalForm(true);\r\n      ///Replace current history state (since opening a modal Level 2 grid)...\r\n      /// if this was a level 1 grid (profile-info page use Pushstate to create new history state)\r\n      let modalName;\r\n      if (formtypedata === 0) {\r\n        modalName = \"SignUp\";\r\n      } else {\r\n        modalName = \"LogIn\";\r\n      }\r\n\r\n      if (!OpenModalFormOnce) {\r\n        window.history.pushState(null, \"\", modalName);\r\n        setOpenModalFormOnce(true);\r\n        CloseModalForm(1);\r\n      }\r\n    },\r\n    [showModalForm, OpenModalFormOnce, CloseModalForm]\r\n  );\r\n  return (\r\n    <Grid\r\n      container\r\n      className={matchPc ? \"containerloginpc\" : \"containerloginmobile \"}\r\n      item\r\n    >\r\n      <Grid item sm={3} md={5}></Grid>\r\n      <Grid item className=\"buttonpad buttonshake\" xs={12} sm={6} md={2}>\r\n        <Button\r\n          onClick={() => OpenModalForm(1)}\r\n          style={loginstyle}\r\n          fullWidth={true}\r\n          variant=\"outlined\"\r\n          size=\"large\"\r\n          color=\"primary\"\r\n        >\r\n          Log In\r\n        </Button>\r\n      </Grid>\r\n      <Grid item sm={12} className=\"logbuttonspace\"></Grid>\r\n\r\n      <Grid item sm={3} md={5}></Grid>\r\n      <Grid item className=\"buttonpad buttonshake\" xs={12} sm={6} md={2}>\r\n        <Button\r\n          onClick={() => OpenModalForm(0)}\r\n          style={signupstyle}\r\n          fullWidth={true}\r\n          variant=\"contained\"\r\n          size=\"large\"\r\n          color=\"secondary\"\r\n        >\r\n          {\" \"}\r\n          Sign Up\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport const LoginButtons = React.memo(LoginButtonsx);\r\n"]},"metadata":{},"sourceType":"module"}