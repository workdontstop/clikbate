{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\upload\\\\FilterMode.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { useSpring, animated } from \"react-spring\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction FilterModex({\n  filterImage,\n  selectedImage,\n  itemUploadRef,\n  setActivatefilterImage\n}) {\n  _s();\n\n  ///\n  ///\n  ///DARKMODE FROM REDUX\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const originalfilterImageRef = useRef(null);\n  const [ShowHideNegativeValue, setShowHideNegativeValue] = useState(\"-\");\n  const [translate, setTranslate] = useState(0);\n  const [stalestate] = useState(1);\n  const [ActiveSlide, setActiveSlide] = useState(0);\n  var getSliderWidthNew = 200;\n  const [transitionFast, settransitionFast] = useState(false); ///\n  ///\n  ///\n  /// ACTIVATES SLIDER ITEM TO BE VIEWED ON CLICK\n\n  const clickOptions = (i, type, source) => {\n    if (type === 1) {\n      setTranslate(stalestate + i);\n      setActiveSlide(i);\n    } else {\n      setTranslate(getSliderWidthNew * i + 1.5 * i);\n      setActiveSlide(i);\n    }\n  }; ///\n  ///\n  ///\n  ///CREATE OPTIONS SLIDER ANIMATION WITH  REACT SPRING\n\n\n  const modalanimation = useSpring({\n    config: {\n      mass: 1,\n      tension: 120,\n      friction: 14\n    },\n    transform: `translateX(${ShowHideNegativeValue}${translate}px)`,\n    transition: transitionFast ? \"0s\" : \"0.15s\",\n    height: \"auto\",\n    display: \"flex\",\n    width: `auto`,\n    padding: \"0px\",\n    margin: \"auto\",\n    paddingLeft: \"0px\"\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: selectedImage ? /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      className: darkmodeReducer ? `optionsTop-background-dark ` : `optionsTop-background-light `,\n      style: {\n        zIndex: 1,\n        padding: \"0px\",\n        position: \"relative\",\n        margin: \"0 auto\",\n        overflow: \"hidden\",\n        left: \"0px\",\n        height: \"auto\",\n        paddingBottom: \"1px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Griditem, {\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(animated.div, {\n          ref: originalfilterImageRef,\n          style: modalanimation,\n          children: selectedImage.map((imagee, index) => {\n            return /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 6,\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                id: itemUploadRef.current[index],\n                src: itemUploadRef.current[index] ? itemUploadRef.current[index].src : null,\n                style: {\n                  width: \"100%\",\n                  height: \"auto\",\n                  position: \"relative\",\n                  margin: \"auto\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 21\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this) : null\n  }, void 0, false);\n}\n\n_s(FilterModex, \"z+jSkPE1l3nJNmGEh8DTPSwQ+5g=\", false, function () {\n  return [useSelector, useSpring];\n});\n\n_c = FilterModex;\nexport const FilterMode = /*#__PURE__*/React.memo(FilterModex);\n_c2 = FilterMode;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FilterModex\");\n$RefreshReg$(_c2, \"FilterMode\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/upload/FilterMode.tsx"],"names":["React","useRef","useState","Grid","useSelector","useSpring","animated","FilterModex","filterImage","selectedImage","itemUploadRef","setActivatefilterImage","darkmode","state","GlobalReducer","darkmodeReducer","originalfilterImageRef","ShowHideNegativeValue","setShowHideNegativeValue","translate","setTranslate","stalestate","ActiveSlide","setActiveSlide","getSliderWidthNew","transitionFast","settransitionFast","clickOptions","i","type","source","modalanimation","config","mass","tension","friction","transform","transition","height","display","width","padding","margin","paddingLeft","zIndex","position","overflow","left","paddingBottom","map","imagee","index","current","src","FilterMode","memo"],"mappings":";;;AAAA,OAAOA,KAAP,IACEC,MADF,EAEEC,QAFF,QAMO,OANP;AAQA,SAASC,IAAT,QAAqB,mBAArB;AAEA,SAASC,WAAT,QAAyC,aAAzC;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,cAApC;;;;AAcA,SAASC,WAAT,CAAqB;AACnBC,EAAAA,WADmB;AAEnBC,EAAAA,aAFmB;AAGnBC,EAAAA,aAHmB;AAInBC,EAAAA;AAJmB,CAArB,EAKqB;AAAA;;AACnB;AACA;AACA;AAMA,QAAM;AAAEC,IAAAA;AAAF,MAAeR,WAAW,CAAES,KAAD,KAAoC,EACnE,GAAGA,KAAK,CAACC;AAD0D,GAApC,CAAD,CAAhC;AAIA,QAAMC,eAAe,GAAGH,QAAxB;AAEA,QAAMI,sBAAsB,GAAGf,MAAM,CAAiB,IAAjB,CAArC;AAEA,QAAM,CAACgB,qBAAD,EAAwBC,wBAAxB,IAAoDhB,QAAQ,CAAC,GAAD,CAAlE;AAEA,QAAM,CAACiB,SAAD,EAAYC,YAAZ,IAA4BlB,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACmB,UAAD,IAAenB,QAAQ,CAAC,CAAD,CAA7B;AAEA,QAAM,CAACoB,WAAD,EAAcC,cAAd,IAAgCrB,QAAQ,CAAC,CAAD,CAA9C;AAEA,MAAIsB,iBAAiB,GAAG,GAAxB;AAEA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCxB,QAAQ,CAAU,KAAV,CAApD,CA1BmB,CA4BnB;AACA;AACA;AACA;;AACA,QAAMyB,YAAY,GAAG,CAACC,CAAD,EAAYC,IAAZ,EAA0BC,MAA1B,KAA6C;AAChE,QAAID,IAAI,KAAK,CAAb,EAAgB;AACdT,MAAAA,YAAY,CAACC,UAAU,GAAGO,CAAd,CAAZ;AACAL,MAAAA,cAAc,CAACK,CAAD,CAAd;AACD,KAHD,MAGO;AACLR,MAAAA,YAAY,CAACI,iBAAiB,GAAGI,CAApB,GAAwB,MAAMA,CAA/B,CAAZ;AACAL,MAAAA,cAAc,CAACK,CAAD,CAAd;AACD;AACF,GARD,CAhCmB,CA0CnB;AACA;AACA;AACA;;;AACA,QAAMG,cAAc,GAAG1B,SAAS,CAAC;AAC/B2B,IAAAA,MAAM,EAAE;AACNC,MAAAA,IAAI,EAAE,CADA;AAENC,MAAAA,OAAO,EAAE,GAFH;AAGNC,MAAAA,QAAQ,EAAE;AAHJ,KADuB;AAM/BC,IAAAA,SAAS,EAAG,cAAanB,qBAAsB,GAAEE,SAAU,KAN5B;AAO/BkB,IAAAA,UAAU,EAAEZ,cAAc,GAAG,IAAH,GAAU,OAPL;AAQ/Ba,IAAAA,MAAM,EAAE,MARuB;AAS/BC,IAAAA,OAAO,EAAE,MATsB;AAU/BC,IAAAA,KAAK,EAAG,MAVuB;AAW/BC,IAAAA,OAAO,EAAE,KAXsB;AAY/BC,IAAAA,MAAM,EAAE,MAZuB;AAa/BC,IAAAA,WAAW,EAAE;AAbkB,GAAD,CAAhC;AAgBA,sBACE;AAAA,cACGlC,aAAa,gBACZ,QAAC,IAAD;AACE,MAAA,SAAS,MADX;AAEE,MAAA,SAAS,EACPM,eAAe,GACV,6BADU,GAEV,8BALT;AAOE,MAAA,KAAK,EAAE;AACL6B,QAAAA,MAAM,EAAE,CADH;AAELH,QAAAA,OAAO,EAAE,KAFJ;AAGLI,QAAAA,QAAQ,EAAE,UAHL;AAILH,QAAAA,MAAM,EAAE,QAJH;AAKLI,QAAAA,QAAQ,EAAE,QALL;AAMLC,QAAAA,IAAI,EAAE,KAND;AAOLT,QAAAA,MAAM,EAAE,MAPH;AAQLU,QAAAA,aAAa,EAAE;AARV,OAPT;AAAA,6BAkBE,QAAC,QAAD;AAAU,QAAA,EAAE,EAAE,EAAd;AAAA,+BACE,QAAC,QAAD,CAAU,GAAV;AAAc,UAAA,GAAG,EAAEhC,sBAAnB;AAA2C,UAAA,KAAK,EAAEe,cAAlD;AAAA,oBACGtB,aAAa,CAACwC,GAAd,CAAkB,CAACC,MAAD,EAAcC,KAAd,KAA6B;AAC9C,gCACE,QAAC,IAAD;AAAkB,cAAA,IAAI,MAAtB;AAAuB,cAAA,EAAE,EAAE,CAA3B;AAAA,qCACE;AACE,gBAAA,EAAE,EAAEzC,aAAa,CAAC0C,OAAd,CAAsBD,KAAtB,CADN;AAEE,gBAAA,GAAG,EACDzC,aAAa,CAAC0C,OAAd,CAAsBD,KAAtB,IACIzC,aAAa,CAAC0C,OAAd,CAAsBD,KAAtB,EAA6BE,GADjC,GAEI,IALR;AAOE,gBAAA,KAAK,EAAE;AACLb,kBAAAA,KAAK,EAAE,MADF;AAELF,kBAAAA,MAAM,EAAE,MAFH;AAGLO,kBAAAA,QAAQ,EAAE,UAHL;AAILH,kBAAAA,MAAM,EAAE;AAJH;AAPT;AAAA;AAAA;AAAA;AAAA;AADF,eAAWS,KAAX;AAAA;AAAA;AAAA;AAAA,oBADF;AAkBD,WAnBA;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAlBF;AAAA;AAAA;AAAA;AAAA,YADY,GA4CV;AA7CN,mBADF;AAiDD;;GApHQ5C,W;UAccH,W,EAqCEC,S;;;KAnDhBE,W;AAsHT,OAAO,MAAM+C,UAAU,gBAAGtD,KAAK,CAACuD,IAAN,CAAWhD,WAAX,CAAnB;MAAM+C,U","sourcesContent":["import React, {\r\n  useRef,\r\n  useState,\r\n  useCallback,\r\n  useEffect,\r\n  useLayoutEffect,\r\n} from \"react\";\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport { SuperCrop } from \"./SuperCrop\";\r\nimport MusicNoteIcon from \"@mui/icons-material/MusicNote\";\r\nimport PhotoIcon from \"@mui/icons-material/Photo\";\r\nimport GifIcon from \"@mui/icons-material/Gif\";\r\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\r\nimport Axios from \"axios\";\r\nimport CropIcon from \"@mui/icons-material/Crop\";\r\nimport CheckIcon from \"@mui/icons-material/Check\";\r\nimport { PreviewCanvasCropAll } from \"./PreviewCanvasCropAll\";\r\nimport { ImageTobeFiltered } from \"./ImageTobeFiltered\";\r\n\r\nfunction FilterModex({\r\n  filterImage,\r\n  selectedImage,\r\n  itemUploadRef,\r\n  setActivatefilterImage,\r\n}: any): JSX.Element {\r\n  ///\r\n  ///\r\n  ///DARKMODE FROM REDUX\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n\r\n  const darkmodeReducer = darkmode;\r\n\r\n  const originalfilterImageRef = useRef<HTMLDivElement>(null);\r\n\r\n  const [ShowHideNegativeValue, setShowHideNegativeValue] = useState(\"-\");\r\n\r\n  const [translate, setTranslate] = useState(0);\r\n  const [stalestate] = useState(1);\r\n\r\n  const [ActiveSlide, setActiveSlide] = useState(0);\r\n\r\n  var getSliderWidthNew = 200;\r\n\r\n  const [transitionFast, settransitionFast] = useState<boolean>(false);\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// ACTIVATES SLIDER ITEM TO BE VIEWED ON CLICK\r\n  const clickOptions = (i: number, type: number, source: string) => {\r\n    if (type === 1) {\r\n      setTranslate(stalestate + i);\r\n      setActiveSlide(i);\r\n    } else {\r\n      setTranslate(getSliderWidthNew * i + 1.5 * i);\r\n      setActiveSlide(i);\r\n    }\r\n  };\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  ///CREATE OPTIONS SLIDER ANIMATION WITH  REACT SPRING\r\n  const modalanimation = useSpring({\r\n    config: {\r\n      mass: 1,\r\n      tension: 120,\r\n      friction: 14,\r\n    },\r\n    transform: `translateX(${ShowHideNegativeValue}${translate}px)`,\r\n    transition: transitionFast ? \"0s\" : \"0.15s\",\r\n    height: \"auto\",\r\n    display: \"flex\",\r\n    width: `auto`,\r\n    padding: \"0px\",\r\n    margin: \"auto\",\r\n    paddingLeft: \"0px\",\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {selectedImage ? (\r\n        <Grid\r\n          container\r\n          className={\r\n            darkmodeReducer\r\n              ? `optionsTop-background-dark `\r\n              : `optionsTop-background-light `\r\n          }\r\n          style={{\r\n            zIndex: 1,\r\n            padding: \"0px\",\r\n            position: \"relative\",\r\n            margin: \"0 auto\",\r\n            overflow: \"hidden\",\r\n            left: \"0px\",\r\n            height: \"auto\",\r\n            paddingBottom: \"1px\",\r\n          }}\r\n        >\r\n          <Griditem xs={12}>\r\n            <animated.div ref={originalfilterImageRef} style={modalanimation}>\r\n              {selectedImage.map((imagee: any, index: any) => {\r\n                return (\r\n                  <Grid key={index} item xs={6}>\r\n                    <img\r\n                      id={itemUploadRef.current[index]}\r\n                      src={\r\n                        itemUploadRef.current[index]\r\n                          ? itemUploadRef.current[index].src\r\n                          : null\r\n                      }\r\n                      style={{\r\n                        width: \"100%\",\r\n                        height: \"auto\",\r\n                        position: \"relative\",\r\n                        margin: \"auto\",\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                );\r\n              })}\r\n            </animated.div>\r\n          </Griditem>\r\n        </Grid>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport const FilterMode = React.memo(FilterModex);\r\n"]},"metadata":{},"sourceType":"module"}