{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oghen\\\\OneDrive\\\\Documents\\\\ClikBate\\\\super\\\\src\\\\profile\\\\FilterThumb.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { animated } from \"react-spring\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction FilterThumbx({\n  UploadFilterNameData,\n  modalanimation,\n  optionsImages,\n  ActiveSlide,\n  callDrawSlider,\n  slider,\n  MarginTopFilters,\n  imageFiltersRef,\n  addimageFiltersRef,\n  getSliderWidth\n}) {\n  _s();\n\n  const Timer2 = useRef(null); ///\n  ///\n  /// GET COLOR FROM REDUX STORE\n\n  const {\n    color,\n    colordark,\n    colortype\n  } = useSelector(state => ({ ...state.GlobalReducerColor\n  }));\n  const colorReducer = color;\n  const colorReducerdark = colordark; ///\n  ///\n  ///\n  /// INTERFACE/TYPES FOR SCREENHEIGHT AND DARKMODE\n\n  ///\n  ///\n  ///\n  /// GET DARKMODE FROM REDUX STORE\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(animated.div, {\n      style: modalanimation,\n      children: optionsImages.map((im, i) => /*#__PURE__*/_jsxDEV(Grid, {\n        onClick: () => {\n          ////\n          if (ActiveSlide === i) {\n            if (Timer2.current) {\n              clearTimeout(Timer2.current);\n            }\n\n            callDrawSlider(i, 0); //////\n          } else {\n            slider(i);\n          }\n        },\n        item: true,\n        xs: 6,\n        style: {\n          cursor: 'pointer',\n          marginTop: MarginTopFilters,\n          textAlign: 'center',\n          margin: 'auto',\n          visibility: imageFiltersRef.current[i] ? 'visible' : 'hidden'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          ref: addimageFiltersRef,\n          className: darkmodeReducer ? 'turpostLightx' : \"turpostDarkx\",\n          style: {\n            boxShadow: ActiveSlide === i ? `0 0 6px ${colorReducer}` : ``,\n            cursor: 'pointer',\n            borderRadius: \"50%\",\n            padding: \"0px\",\n            border: ActiveSlide === i ? `1.5px solid ${colorReducer}` : ``,\n            objectFit: \"cover\",\n            marginLeft: \"2vw\",\n            width: getSliderWidth,\n            height: getSliderWidth\n          },\n          src: imageFiltersRef.current[i] ? imageFiltersRef.current[i].src : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"zuperxy\",\n          style: {\n            visibility: ActiveSlide === i ? 'visible' : `hidden`,\n            fontWeight: 'bold',\n            marginLeft: \"2vw\",\n            fontSize: '2.6vh',\n            color: darkmodeReducer ? '#ffffff' : '#003300',\n            fontFamily: \"Roboto Condensed\"\n          },\n          children: [\" \", UploadFilterNameData[i], \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(FilterThumbx, \"/fWyhZaKoZdvMcRC4P05j1SHLE0=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = FilterThumbx;\nexport const FilterThumb = /*#__PURE__*/React.memo(FilterThumbx);\n_c2 = FilterThumb;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FilterThumbx\");\n$RefreshReg$(_c2, \"FilterThumb\");","map":{"version":3,"sources":["C:/Users/oghen/OneDrive/Documents/ClikBate/super/src/profile/FilterThumb.tsx"],"names":["React","useRef","Grid","animated","useSelector","FilterThumbx","UploadFilterNameData","modalanimation","optionsImages","ActiveSlide","callDrawSlider","slider","MarginTopFilters","imageFiltersRef","addimageFiltersRef","getSliderWidth","Timer2","color","colordark","colortype","state","GlobalReducerColor","colorReducer","colorReducerdark","darkmode","GlobalReducer","darkmodeReducer","map","im","i","current","clearTimeout","cursor","marginTop","textAlign","margin","visibility","boxShadow","borderRadius","padding","border","objectFit","marginLeft","width","height","src","fontWeight","fontSize","fontFamily","FilterThumb","memo"],"mappings":"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","sourcesContent":["import React, {\r\n    useRef,\r\n    useEffect,\r\n    useCallback,\r\n    useState,\r\n    useLayoutEffect,\r\n} from \"react\";\r\nimport ControlPointDuplicateIcon from \"@mui/icons-material/ControlPointDuplicate\";\r\nimport { Grid, Switch, DialogContent } from \"@material-ui/core\";\r\nimport { matchPc, matchTablet, matchMobile } from \"../DetectDevice\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport { OptionsSlider } from \"./OptionsSlider\";\r\nimport { RootStateOrAny, useSelector, useDispatch } from \"react-redux\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport Axios from \"axios\";\r\nimport CheckIcon from \"@mui/icons-material/Check\";\r\nimport date from \"date-and-time\";\r\nimport { UserInfoUpdatePROFILE } from \"../log/actions/UserdataAction\";\r\nimport { UserInfoUpdateBILLBOARD } from \"../log/actions/UserdataAction\";\r\nimport { usePalette } from \"react-palette\";\r\nimport { UpdateColorAction } from \"../GlobalActions\";\r\nimport EditTwoToneIcon from \"@mui/icons-material/EditTwoTone\";\r\nimport DoneOutlineIcon from '@mui/icons-material/DoneOutline';\r\nimport { UpdateUploadData } from \"../GlobalActions\";\r\nimport DoneIcon from '@mui/icons-material/Done';\r\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport CropIcon from '@mui/icons-material/Crop';\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport { TaskbarSuperphotoImageView } from \"./TaskbarSuperphotoImageView\";\r\nimport { TaskbarText } from \"./TaskbarText\";\r\nimport set from \"date-fns/set/index.js\";\r\nimport { Hidden } from \"@mui/material\";\r\nimport TitleIcon from '@mui/icons-material/Title';\r\nimport TouchAppIcon from '@mui/icons-material/TouchApp';\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction FilterThumbx({ UploadFilterNameData, modalanimation, optionsImages, ActiveSlide, callDrawSlider, slider, MarginTopFilters, imageFiltersRef, addimageFiltersRef,\r\n    getSliderWidth }: any): JSX.Element {\r\n\r\n\r\n    const Timer2 = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n\r\n\r\n    ///\r\n    ///\r\n    /// GET COLOR FROM REDUX STORE\r\n    interface RootStateReducerColor {\r\n        GlobalReducerColor: {\r\n            color: string;\r\n            colordark: string;\r\n            colortype: number;\r\n        };\r\n    }\r\n    const { color, colordark, colortype } = useSelector(\r\n        (state: RootStateReducerColor) => ({\r\n            ...state.GlobalReducerColor,\r\n        })\r\n    );\r\n    const colorReducer = color;\r\n    const colorReducerdark = colordark;\r\n\r\n\r\n\r\n    ///\r\n    ///\r\n    ///\r\n    /// INTERFACE/TYPES FOR SCREENHEIGHT AND DARKMODE\r\n    interface RootStateGlobalReducer {\r\n        GlobalReducer: {\r\n            darkmode: boolean;\r\n            screenHeight: number;\r\n        };\r\n    }\r\n\r\n    ///\r\n    ///\r\n    ///\r\n    /// GET DARKMODE FROM REDUX STORE\r\n    const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n        ...state.GlobalReducer,\r\n    }));\r\n    const darkmodeReducer = darkmode;\r\n\r\n\r\n\r\n\r\n    return (<>\r\n\r\n\r\n        <animated.div style={modalanimation}>\r\n            {optionsImages.map((im: any, i: any) => (\r\n                <Grid onClick={() => {\r\n                    ////\r\n\r\n                    if (ActiveSlide === i) {\r\n                        if (Timer2.current) {\r\n                            clearTimeout(Timer2.current);\r\n                        }\r\n                        callDrawSlider(i, 0);\r\n\r\n                        //////\r\n                    } else {\r\n                        slider(i)\r\n                    }\r\n\r\n                }} key={i} item xs={6} style={{\r\n                    cursor: 'pointer',\r\n                    marginTop: MarginTopFilters,\r\n                    textAlign: 'center',\r\n                    margin: 'auto',\r\n                    visibility: imageFiltersRef.current[i] ? 'visible' : 'hidden'\r\n\r\n                }}>\r\n                    <img\r\n\r\n                        ref={addimageFiltersRef}\r\n                        className={darkmodeReducer ? 'turpostLightx' : \"turpostDarkx\"}\r\n                        style={{\r\n                            boxShadow: ActiveSlide === i ? `0 0 6px ${colorReducer}` : ``,\r\n                            cursor: 'pointer',\r\n                            borderRadius: \"50%\",\r\n                            padding: \"0px\",\r\n                            border: ActiveSlide === i ? `1.5px solid ${colorReducer}` : ``,\r\n                            objectFit: \"cover\",\r\n                            marginLeft: \"2vw\",\r\n                            width: getSliderWidth,\r\n                            height: getSliderWidth,\r\n\r\n                        }}\r\n                        src={\r\n                            imageFiltersRef.current[i]\r\n                                ? imageFiltersRef.current[i].src\r\n                                : null\r\n                        }\r\n                    />\r\n                    <span className='zuperxy' style={{ visibility: ActiveSlide === i ? 'visible' : `hidden`, fontWeight: 'bold', marginLeft: \"2vw\", fontSize: '2.6vh', color: darkmodeReducer ? '#ffffff' : '#003300', fontFamily: \"Roboto Condensed\" }}> {UploadFilterNameData[i]} </span>\r\n                </Grid>\r\n            ))}\r\n\r\n\r\n        </animated.div >\r\n\r\n\r\n    </>);\r\n}\r\n\r\nexport const FilterThumb = React.memo(FilterThumbx);\r\n"]},"metadata":{},"sourceType":"module"}