{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oghen\\\\OneDrive\\\\Documents\\\\ClikBate\\\\super\\\\src\\\\profile\\\\TaskbarCrop.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useCallback, useState, useLayoutEffect } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Masonry from \"@mui/lab/Masonry\";\nimport DoneOutlineIcon from '@mui/icons-material/DoneOutline';\nimport { UpdateUploadData } from \"../GlobalActions\";\nimport CropIcon from '@mui/icons-material/Crop';\nimport Slider from \"@material-ui/core/Slider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction TaskbarCropx({\n  showModalUploadTask,\n  uploadClose,\n  setfinalimage,\n  finalImage,\n  setHidecrop\n}) {\n  _s();\n\n  const dispatch = useDispatch();\n  const [count, setCount] = useState(0); ///\n  ///\n  ///\n  /// INTERFACE/TYPES FOR SCREENHEIGHT AND DARKMODE\n\n  ///\n  ///\n  ///\n  /// GET DARKMODE FROM REDUX STORE\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const cropCanvasRef = useRef(null);\n  const navRef = useRef(null);\n  const IconRef = useRef(null);\n  const IconRef2 = useRef(null);\n  const [allowCropAllCanvas, setallowCropAllCanvas] = useState(true);\n  const [CropImageHolder, setCropImageHolder] = useState(null);\n  const [imageHeight, setimageHeight] = useState(0);\n  const [imageWidth, setimageWidth] = useState(0);\n  const [Box, setBox] = useState(false);\n  const [final, setFinal] = useState(false);\n  const [cropInitial, setcropInitial] = useState({\n    x: 0,\n    y: 0\n  });\n  const [cropInitialx, setcropInitialx] = useState({\n    x: 0,\n    y: 0\n  });\n  const [cropOffset, setcropOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [Drag, setDrag] = useState(false);\n  const [crop, setcrop] = useState({\n    x: 0,\n    y: 0\n  });\n  const [cropx, setcropx] = useState({\n    x: 0,\n    y: 0\n  });\n  const allowscrolltimer = useRef(null);\n  var extendxy = 3.3;\n  const [allowOverflow, setallowOverflow] = useState(false);\n  const [optionscropshow, setoptionscropshow] = useState(true);\n  const [optionscropshow2, setoptionscropshow2] = useState(true);\n  const [zoom, setzoom] = useState(1);\n  const [multiPost, setmultiPost] = useState(false);\n  const [prevImage, setprevimage] = useState([]);\n  const menuTimer5 = useRef(null);\n\n  const updatezoom = (e, data) => {\n    setoptionscropshow2(false);\n    setzoom(data);\n    handleTouchDrag(null, 1000);\n  };\n\n  const {\n    activatefilterImage,\n    activatecropImage,\n    selectedImage,\n    cropimage\n  } = useSelector(state => ({ ...state.GlobalNavuploadReducer\n  }));\n  const activatefilterImageReducer = activatefilterImage;\n  const activatecropImageReducer = activatecropImage;\n  const selectedImageReducer = selectedImage;\n  const cropimageReducer = cropimage;\n  useEffect(() => {\n    const ctx = cropCanvasRef.current.getContext(\"2d\");\n    ctx.clearRect(0, 0, cropCanvasRef.current.width, cropCanvasRef.current.height);\n    setcrop({ ...crop,\n      x: 0,\n      y: 0\n    });\n\n    if (final) {} else {\n      setzoom(1);\n      setBox(false);\n    }\n  }, [CropImageHolder, showModalUploadTask]);\n  useEffect(() => {\n    setBox(false);\n  }, []);\n  useEffect(() => {\n    setprevimage(selectedImageReducer);\n  }, [selectedImageReducer]);\n  useEffect(() => {\n    if (prevImage.length > 1) {\n      setmultiPost(true);\n    } else {\n      setmultiPost(false);\n    }\n  }, [prevImage]);\n  const resizeCanvas = useCallback(() => {\n    var imgAspectRatio = cropCanvasRef.current.width / cropCanvasRef.current.height;\n    var screenW = navRef.current.clientWidth;\n    var screenH = navRef.current.clientHeight;\n    let canvasW = screenW;\n    let canvasH = screenH;\n\n    if (imgAspectRatio >= 2.2 || imgAspectRatio <= 0.464) {\n      ///////////////////////////////\n      if (Box) {} else {\n        setBox(true);\n        setzoom(2);\n      } ////////////////////////////////\n\n    }\n\n    if (imgAspectRatio <= 1.63) {\n      canvasH = screenH;\n      canvasW = canvasH * imgAspectRatio;\n    } else {\n      canvasW = screenW;\n      canvasH = canvasW / imgAspectRatio;\n    }\n\n    cropCanvasRef.current.style.height = `${canvasH}px`;\n    cropCanvasRef.current.style.width = `${canvasW}px`;\n    IconRef.current.style.top = `${canvasH / 1.19}px`;\n    IconRef2.current.style.top = `${canvasH / 1.19}px`;\n  }, [cropCanvasRef, Box]);\n\n  function GiveImageSpecificDimensions(Newcropimage) {\n    const imgAspectRatio = Newcropimage.naturalWidth / Newcropimage.naturalHeight;\n\n    if (final) {\n      setcrop({ ...crop,\n        x: cropx.x,\n        y: cropx.y\n      });\n    }\n\n    var canvasW;\n    var canvasH;\n\n    if (imgAspectRatio <= 1.55) {\n      var screenH = 1920;\n      canvasH = screenH;\n      canvasH = screenH;\n      canvasW = canvasH * imgAspectRatio;\n    } else {\n      var screenW = 2048;\n      canvasW = screenW;\n      canvasW = screenW;\n      canvasH = canvasW / imgAspectRatio;\n    }\n\n    setimageHeight(canvasH);\n    setimageWidth(canvasW);\n  }\n\n  useLayoutEffect(() => {\n    const Newcropimage = new Image();\n    Newcropimage.src = cropimageReducer;\n\n    Newcropimage.onload = function () {\n      if (CropImageHolder === Newcropimage) {} else {\n        //////////////\n        setCropImageHolder(Newcropimage);\n        GiveImageSpecificDimensions(Newcropimage);\n      }\n    };\n  }, [cropimageReducer]);\n  const ray = [];\n  const Done = useCallback(() => {\n    setcropx({ ...cropx,\n      x: crop.x,\n      y: crop.y\n    });\n    setFinal(true);\n    const ctx = cropCanvasRef.current.getContext(\"2d\");\n    ctx.clearRect(0, 0, cropCanvasRef.current.width, cropCanvasRef.current.height);\n    let lim = prevImage.length - 1;\n    dispatch(UpdateUploadData(prevImage, []));\n    dispatch(UpdateUploadData(prevImage, prevImage[0]));\n  }, [crop, prevImage, cropCanvasRef]);\n\n  const callCrop = () => {\n    if (CropImageHolder && cropCanvasRef.current) {\n      const ctx = cropCanvasRef.current.getContext(\"2d\");\n      const imgAspectRatio = imageWidth / imageHeight; ////////////////////////\n\n      var a = 1.2;\n      var b = 0.8;\n\n      if (zoom <= 1) {\n        if (Box) {\n          setBox(false);\n        } else {}\n      } else {\n        if (Box) {} else {\n          setBox(true);\n        }\n      }\n\n      if (zoom <= 2) {\n        a = 1.2;\n        b = 0.8;\n      } else if (zoom <= 3) {\n        a = 1;\n        b = 1;\n      } else if (zoom <= 4) {\n        a = 1.2;\n        b = 1.2;\n      } else if (zoom <= 5) {\n        a = 1.4;\n        b = 1.4;\n      } else {}\n\n      if (Box) {\n        if (imgAspectRatio === 1) {\n          if (zoom > 2) {\n            cropCanvasRef.current.width = imageWidth / a;\n            cropCanvasRef.current.height = imageWidth / a;\n          } else {\n            cropCanvasRef.current.width = imageWidth;\n            cropCanvasRef.current.height = imageWidth;\n          }\n        } else if (imgAspectRatio <= 1.2) {\n          if (zoom > 2) {\n            cropCanvasRef.current.width = imageWidth / a;\n            cropCanvasRef.current.height = imageWidth / a;\n          } else {\n            cropCanvasRef.current.width = imageWidth / a;\n            cropCanvasRef.current.height = imageWidth * a;\n          }\n        } else {\n          if (zoom > 2) {\n            cropCanvasRef.current.width = imageHeight / b;\n            cropCanvasRef.current.height = imageHeight / b;\n          } else {\n            cropCanvasRef.current.width = imageHeight / b;\n            cropCanvasRef.current.height = imageHeight;\n          }\n        }\n      } else {\n        cropCanvasRef.current.width = imageWidth;\n        cropCanvasRef.current.height = imageHeight;\n      } ////////////////////////////////\n\n\n      resizeCanvas();\n      const w = imageWidth;\n      const h = imageHeight;\n      requestAnimationFrame(() => {\n        if (Box) {\n          ctx.drawImage(CropImageHolder, crop.x, crop.y, w, h);\n        } else {\n          ctx.drawImage(CropImageHolder, 0, 0, w, h);\n        } //////\n        ///console.log(finalImage)\n\n\n        if (final) {\n          var lim = prevImage.length - 1;\n          ray[count] = cropCanvasRef.current.toDataURL();\n          var x = count + 1;\n\n          if (count <= lim) {\n            alert(count);\n            dispatch(UpdateUploadData(prevImage, prevImage[x]));\n            setCount(x);\n          }\n\n          if (count === lim) {\n            setfinalimage([...ray]);\n            setTimeout(() => {\n              setHidecrop(true);\n            }, 700);\n          }\n        }\n      });\n    }\n  };\n\n  useLayoutEffect(() => {\n    callCrop();\n  }, [CropImageHolder, imageWidth, imageHeight, Box, crop, zoom, cropCanvasRef, count]);\n\n  const handleTouchStart = (e, type) => {\n    if (Box) {\n      setoptionscropshow(false);\n\n      if (type === 0) {\n        setcropInitial({ ...cropInitial,\n          x: e.clientX * extendxy - cropOffset.x,\n          y: e.clientY * extendxy - cropOffset.y\n        });\n      } else {\n        setcropInitial({ ...cropInitial,\n          x: e.touches[0].clientX * extendxy - cropOffset.x,\n          y: e.touches[0].clientY * extendxy - cropOffset.y\n        });\n      }\n\n      if (e.target) {\n        setDrag(true);\n      }\n    } else {\n      setBox(true);\n    }\n  };\n\n  const handleTouchEnd = () => {\n    if (allowscrolltimer.current) {\n      clearTimeout(allowscrolltimer.current);\n    }\n\n    allowscrolltimer.current = setTimeout(function () {}, 1200);\n    setoptionscropshow(true);\n    setcropInitial({ ...cropInitial,\n      x: crop.x,\n      y: crop.y\n    });\n    setDrag(false);\n  };\n\n  const handleTouchDrag = (e, type) => {\n    if (Drag || type === 1000) {\n      var xx = cropInitial.x;\n      var yy = cropInitial.y;\n\n      if (e) {\n        if (type === 0) {\n          xx = e.clientX * extendxy - cropInitial.x;\n          yy = e.clientY * extendxy - cropInitial.y;\n        } else {\n          xx = e.touches[0].clientX * extendxy - cropInitial.x;\n          yy = e.touches[0].clientY * extendxy - cropInitial.y;\n        }\n      } ///////////////////////////////////////////////\n\n\n      var fz = imageWidth - cropCanvasRef.current.width;\n      fz *= -1;\n\n      if (xx > 0) {\n        xx = 0;\n      } else if (xx < fz) {\n        xx = fz;\n      } //////////////////////////////\n\n\n      var ff = imageHeight - cropCanvasRef.current.height;\n      ff *= -1;\n\n      if (yy > 0) {\n        yy = 0;\n      } else if (yy < ff) {\n        yy = ff;\n      } //////////////////////////////////\n\n\n      setcrop({ ...crop,\n        x: xx,\n        y: yy\n      });\n      setcropOffset({ ...cropOffset,\n        x: xx,\n        y: yy\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      style: {\n        padding: \"0px\",\n        width: '100%',\n        height: \"100%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        ref: navRef,\n        item: true,\n        xs: 12,\n        style: {\n          padding: \"0px\",\n          width: '94%',\n          height: multiPost ? \"80%\" : '100%',\n          position: 'fixed',\n          top: '-20000000000px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 17\n      }, this), optionscropshow ? /*#__PURE__*/_jsxDEV(Slider, {\n        value: zoom,\n        onChange: updatezoom,\n        onChangeCommitted: () => {\n          setoptionscropshow2(true);\n        },\n        defaultValue: 1,\n        max: 5,\n        min: 0,\n        step: 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001,\n        style: {\n          opacity: optionscropshow2 ? 0.9 : 0.45,\n          width: '8%',\n          left: '47%',\n          top: '5vh',\n          position: 'fixed'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 36\n      }, this) : null, allowCropAllCanvas ? /*#__PURE__*/_jsxDEV(\"canvas\", {\n        onMouseOver: () => {///mouseover(0);\n        },\n        onMouseUp: e => {\n          handleTouchEnd();\n        },\n        onTouchEnd: e => {\n          handleTouchEnd();\n        },\n        onMouseDown: e => {\n          handleTouchStart(e, 0);\n        },\n        onTouchStart: e => {\n          handleTouchStart(e, 1);\n        },\n        onMouseMove: e => {\n          handleTouchDrag(e, 0);\n        },\n        onTouchMove: e => {\n          handleTouchDrag(e, 1);\n        },\n        ref: cropCanvasRef,\n        style: {\n          padding: \"0px\",\n          margin: \"auto\",\n          cursor: \"pointer\",\n          overflow: 'hidden'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 586,\n        columnNumber: 21\n      }, this) : null, /*#__PURE__*/_jsxDEV(DoneOutlineIcon, {\n        onClick: Done,\n        ref: IconRef,\n        className: darkmodeReducer ? \"make-small-icons-clickable-darkab dontallowhighlighting zuperkingIcon \" : \"make-small-icons-clickable-lightab  dontallowhighlighting zuperkingIcon  \",\n        style: {\n          color: \"#ffffff\",\n          fontSize: \"3.8vw\",\n          position: \"absolute\",\n          opacity: optionscropshow2 ? 0.94 : 0,\n          borderRadius: '70%',\n          left: '49%',\n          right: \"\",\n          display: optionscropshow ? 'block' : 'none'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 620,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CropIcon, {\n        onClick: () => {\n          if (Box) {\n            setBox(false);\n          } else {\n            setBox(true);\n          }\n        },\n        ref: IconRef2,\n        className: darkmodeReducer ? \"make-small-icons-clickable-darkab dontallowhighlighting zuperkingIcon \" : \"make-small-icons-clickable-lightab  dontallowhighlighting zuperkingIcon  \",\n        style: {\n          color: \"#ffffff\",\n          fontSize: \"2.9vw\",\n          position: \"absolute\",\n          bottom: '5vh',\n          opacity: optionscropshow2 ? 0.94 : 0,\n          right: '43%',\n          display: optionscropshow ? 'none' : 'none'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 642,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        style: {\n          padding: \"0px\"\n        },\n        children: prevImage.length > 1 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Masonry, {\n            columns: 2,\n            spacing: 0,\n            style: {\n              padding: \"0px\",\n              overflow: 'hidden'\n            },\n            children: prevImage.map((picture, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n              onClick: () => {\n                dispatch(UpdateUploadData(prevImage, picture));\n                navRef.current.scrollIntoView({\n                  behavior: \"smooth\",\n                  block: \"start\"\n                });\n              },\n              style: {\n                width: '50%',\n                cursor: 'pointer'\n              },\n              src: picture,\n              alt: `Image ${index}`\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 689,\n              columnNumber: 29\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 678,\n            columnNumber: 47\n          }, this)\n        }, void 0, false) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 669,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 552,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(TaskbarCropx, \"XOvgGzFVL5mDdVBcA5ixRgmGl28=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = TaskbarCropx;\nexport const TaskbarCrop = /*#__PURE__*/React.memo(TaskbarCropx);\n_c2 = TaskbarCrop;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TaskbarCropx\");\n$RefreshReg$(_c2, \"TaskbarCrop\");","map":{"version":3,"sources":["C:/Users/oghen/OneDrive/Documents/ClikBate/super/src/profile/TaskbarCrop.tsx"],"names":["React","useRef","useEffect","useCallback","useState","useLayoutEffect","Grid","useSelector","useDispatch","Masonry","DoneOutlineIcon","UpdateUploadData","CropIcon","Slider","TaskbarCropx","showModalUploadTask","uploadClose","setfinalimage","finalImage","setHidecrop","dispatch","count","setCount","darkmode","state","GlobalReducer","darkmodeReducer","cropCanvasRef","navRef","IconRef","IconRef2","allowCropAllCanvas","setallowCropAllCanvas","CropImageHolder","setCropImageHolder","imageHeight","setimageHeight","imageWidth","setimageWidth","Box","setBox","final","setFinal","cropInitial","setcropInitial","x","y","cropInitialx","setcropInitialx","cropOffset","setcropOffset","Drag","setDrag","crop","setcrop","cropx","setcropx","allowscrolltimer","extendxy","allowOverflow","setallowOverflow","optionscropshow","setoptionscropshow","optionscropshow2","setoptionscropshow2","zoom","setzoom","multiPost","setmultiPost","prevImage","setprevimage","menuTimer5","updatezoom","e","data","handleTouchDrag","activatefilterImage","activatecropImage","selectedImage","cropimage","GlobalNavuploadReducer","activatefilterImageReducer","activatecropImageReducer","selectedImageReducer","cropimageReducer","ctx","current","getContext","clearRect","width","height","length","resizeCanvas","imgAspectRatio","screenW","clientWidth","screenH","clientHeight","canvasW","canvasH","style","top","GiveImageSpecificDimensions","Newcropimage","naturalWidth","naturalHeight","Image","src","onload","ray","Done","lim","callCrop","a","b","w","h","requestAnimationFrame","drawImage","toDataURL","alert","setTimeout","handleTouchStart","type","clientX","clientY","touches","target","handleTouchEnd","clearTimeout","xx","yy","fz","ff","padding","position","opacity","left","margin","cursor","overflow","color","fontSize","borderRadius","right","display","bottom","map","picture","index","scrollIntoView","behavior","block","TaskbarCrop","memo"],"mappings":"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","sourcesContent":["import React, {\r\n    useRef,\r\n    useEffect,\r\n    useCallback,\r\n    useState,\r\n    useLayoutEffect,\r\n} from \"react\";\r\nimport ControlPointDuplicateIcon from \"@mui/icons-material/ControlPointDuplicate\";\r\nimport { Grid, Switch, DialogContent } from \"@material-ui/core\";\r\nimport { matchPc, matchTablet, matchMobile } from \"../DetectDevice\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport { OptionsSlider } from \"../profile/OptionsSlider\";\r\nimport { RootStateOrAny, useSelector, useDispatch } from \"react-redux\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport DoneOutlineIcon from '@mui/icons-material/DoneOutline';\r\nimport { UpdateUploadData } from \"../GlobalActions\";\r\nimport DoneIcon from '@mui/icons-material/Done';\r\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\r\n\r\nimport CropIcon from '@mui/icons-material/Crop';\r\nimport Slider from \"@material-ui/core/Slider\";\r\n\r\n\r\nfunction TaskbarCropx({\r\n    showModalUploadTask,\r\n    uploadClose,\r\n    setfinalimage,\r\n    finalImage,\r\n    setHidecrop\r\n\r\n}: any): JSX.Element {\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const [count, setCount] = useState<number>(0);\r\n\r\n    ///\r\n    ///\r\n    ///\r\n    /// INTERFACE/TYPES FOR SCREENHEIGHT AND DARKMODE\r\n    interface RootStateGlobalReducer {\r\n        GlobalReducer: {\r\n            darkmode: boolean;\r\n            screenHeight: number;\r\n        };\r\n    }\r\n\r\n    ///\r\n    ///\r\n    ///\r\n    /// GET DARKMODE FROM REDUX STORE\r\n    const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n        ...state.GlobalReducer,\r\n    }));\r\n    const darkmodeReducer = darkmode;\r\n\r\n\r\n\r\n\r\n    const cropCanvasRef: any = useRef(null);\r\n\r\n    const navRef: any = useRef(null);\r\n\r\n    const IconRef: any = useRef(null);\r\n\r\n    const IconRef2: any = useRef(null);\r\n\r\n    const [allowCropAllCanvas, setallowCropAllCanvas] = useState<boolean>(true);\r\n\r\n    const [CropImageHolder, setCropImageHolder] = useState<any>(null);\r\n\r\n    const [imageHeight, setimageHeight] = useState(0);\r\n    const [imageWidth, setimageWidth] = useState(0);\r\n\r\n    const [Box, setBox] = useState<boolean>(false);\r\n\r\n    const [final, setFinal] = useState<boolean>(false);\r\n\r\n\r\n    const [cropInitial, setcropInitial] = useState<any>({ x: 0, y: 0 });\r\n\r\n    const [cropInitialx, setcropInitialx] = useState<any>({ x: 0, y: 0 });\r\n\r\n    const [cropOffset, setcropOffset] = useState<any>({ x: 0, y: 0 });\r\n\r\n    const [Drag, setDrag] = useState<boolean>(false);\r\n\r\n    const [crop, setcrop] = useState<any>({ x: 0, y: 0 });\r\n\r\n    const [cropx, setcropx] = useState<any>({ x: 0, y: 0 });\r\n\r\n    const allowscrolltimer = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n\r\n    var extendxy = 3.3;\r\n\r\n    const [allowOverflow, setallowOverflow] = useState<boolean>(false);\r\n\r\n    const [optionscropshow, setoptionscropshow] = useState<boolean>(true);\r\n\r\n    const [optionscropshow2, setoptionscropshow2] = useState<boolean>(true);\r\n\r\n    const [zoom, setzoom] = useState<any>(1);\r\n\r\n    const [multiPost, setmultiPost] = useState(false);\r\n\r\n\r\n    const [prevImage, setprevimage] = useState([]);\r\n\r\n    const menuTimer5 = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n\r\n\r\n\r\n\r\n    const updatezoom = (e: any, data: any) => {\r\n        setoptionscropshow2(false);\r\n        setzoom(data);\r\n        handleTouchDrag(null, 1000);\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const { activatefilterImage, activatecropImage, selectedImage, cropimage } = useSelector(\r\n        (state: RootStateOrAny) => ({\r\n            ...state.GlobalNavuploadReducer,\r\n        })\r\n    );\r\n    const activatefilterImageReducer = activatefilterImage;\r\n    const activatecropImageReducer = activatecropImage;\r\n    const selectedImageReducer = selectedImage;\r\n    const cropimageReducer = cropimage;\r\n\r\n\r\n    useEffect(() => {\r\n        const ctx = cropCanvasRef.current.getContext(\"2d\");\r\n        ctx.clearRect(0, 0, cropCanvasRef.current.width, cropCanvasRef.current.height);\r\n        setcrop({\r\n            ...crop,\r\n            x: 0,\r\n            y: 0,\r\n        });\r\n\r\n        if (final) { } else {\r\n            setzoom(1);\r\n            setBox(false);\r\n        }\r\n\r\n\r\n\r\n    }, [CropImageHolder, showModalUploadTask]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        setBox(false);\r\n    }, []);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        setprevimage(selectedImageReducer);\r\n\r\n    }, [selectedImageReducer]);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (prevImage.length > 1) {\r\n            setmultiPost(true)\r\n        } else { setmultiPost(false); }\r\n\r\n    }, [prevImage]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const resizeCanvas = useCallback(() => {\r\n        var imgAspectRatio = cropCanvasRef.current.width / cropCanvasRef.current.height;\r\n\r\n        var screenW = navRef.current.clientWidth;\r\n        var screenH = navRef.current.clientHeight;\r\n        let canvasW = screenW\r\n        let canvasH = screenH\r\n\r\n        if (imgAspectRatio >= 2.2 || imgAspectRatio <= 0.464) {\r\n\r\n\r\n            ///////////////////////////////\r\n            if (Box) { } else {\r\n                setBox(true);\r\n                setzoom(2);\r\n            }\r\n\r\n\r\n            ////////////////////////////////\r\n        }\r\n\r\n        if (imgAspectRatio <= 1.63) {\r\n            canvasH = screenH;\r\n            canvasW = canvasH * imgAspectRatio;\r\n        } else {\r\n            canvasW = screenW;\r\n            canvasH = canvasW / imgAspectRatio;\r\n        }\r\n        cropCanvasRef.current.style.height = `${canvasH}px`;\r\n        cropCanvasRef.current.style.width = `${canvasW}px`;\r\n\r\n        IconRef.current.style.top = `${canvasH / 1.19}px`;\r\n        IconRef2.current.style.top = `${canvasH / 1.19}px`;\r\n    }, [cropCanvasRef, Box])\r\n\r\n\r\n\r\n\r\n\r\n    function GiveImageSpecificDimensions(Newcropimage: any) {\r\n        const imgAspectRatio = Newcropimage.naturalWidth / Newcropimage.naturalHeight;\r\n\r\n        if (final) {\r\n            setcrop({\r\n                ...crop,\r\n                x: cropx.x,\r\n                y: cropx.y,\r\n            });\r\n        }\r\n\r\n\r\n        var canvasW;\r\n        var canvasH;\r\n        if (imgAspectRatio <= 1.55) {\r\n            var screenH = 1920;\r\n            canvasH = screenH\r\n            canvasH = screenH;\r\n            canvasW = canvasH * imgAspectRatio;\r\n        } else {\r\n            var screenW = 2048;\r\n            canvasW = screenW\r\n            canvasW = screenW;\r\n            canvasH = canvasW / imgAspectRatio;\r\n        }\r\n        setimageHeight(canvasH);\r\n        setimageWidth(canvasW);\r\n    }\r\n\r\n\r\n    useLayoutEffect(() => {\r\n        const Newcropimage: any = new Image();\r\n        Newcropimage.src = cropimageReducer;\r\n        Newcropimage.onload = function () {\r\n            if (CropImageHolder === Newcropimage) {\r\n            } else {\r\n\r\n                //////////////\r\n                setCropImageHolder(Newcropimage);\r\n                GiveImageSpecificDimensions(Newcropimage);\r\n            }\r\n\r\n\r\n        }\r\n    }, [cropimageReducer]);\r\n\r\n\r\n    const ray: any[] = [];\r\n\r\n\r\n\r\n    const Done = useCallback(() => {\r\n\r\n\r\n        setcropx({\r\n            ...cropx,\r\n            x: crop.x,\r\n            y: crop.y,\r\n        });\r\n\r\n        setFinal(true);\r\n\r\n        const ctx = cropCanvasRef.current.getContext(\"2d\");\r\n        ctx.clearRect(\r\n            0,\r\n            0,\r\n            cropCanvasRef.current.width,\r\n            cropCanvasRef.current.height\r\n        );\r\n\r\n\r\n\r\n        let lim = prevImage.length - 1\r\n        dispatch(UpdateUploadData(prevImage, []));\r\n        dispatch(UpdateUploadData(prevImage, prevImage[0]));\r\n\r\n\r\n    }, [crop, prevImage, cropCanvasRef]);\r\n\r\n\r\n\r\n\r\n    const callCrop = () => {\r\n        if (CropImageHolder && cropCanvasRef.current) {\r\n            const ctx = cropCanvasRef.current.getContext(\"2d\");\r\n\r\n\r\n            const imgAspectRatio = imageWidth / imageHeight;\r\n\r\n\r\n\r\n\r\n            ////////////////////////\r\n            var a = 1.2; var b = 0.8;\r\n\r\n            if (zoom <= 1) {\r\n\r\n                if (Box) { setBox(false) } else { }\r\n\r\n\r\n            } else {\r\n                if (Box) { } else { setBox(true); }\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n            if (zoom <= 2) {\r\n                a = 1.2; b = 0.8;\r\n            }\r\n            else if (zoom <= 3) {\r\n                a = 1; b = 1;\r\n            } else if (zoom <= 4) {\r\n                a = 1.2; b = 1.2;\r\n            } else if (zoom <= 5) {\r\n                a = 1.4; b = 1.4;\r\n            } else { }\r\n\r\n\r\n\r\n            if (Box) {\r\n                if (imgAspectRatio === 1) {\r\n                    if (zoom > 2) {\r\n                        cropCanvasRef.current.width = imageWidth / a;\r\n                        cropCanvasRef.current.height = imageWidth / a;\r\n                    } else {\r\n                        cropCanvasRef.current.width = imageWidth;\r\n                        cropCanvasRef.current.height = imageWidth;\r\n                    }\r\n                }\r\n                else if (imgAspectRatio <= 1.2) {\r\n                    if (zoom > 2) {\r\n                        cropCanvasRef.current.width = imageWidth / a;\r\n                        cropCanvasRef.current.height = imageWidth / a;\r\n                    } else {\r\n                        cropCanvasRef.current.width = imageWidth / a;\r\n                        cropCanvasRef.current.height = imageWidth * a;\r\n                    }\r\n\r\n                } else {\r\n                    if (zoom > 2) {\r\n                        cropCanvasRef.current.width = imageHeight / b;\r\n                        cropCanvasRef.current.height = imageHeight / b;\r\n                    } else {\r\n                        cropCanvasRef.current.width = imageHeight / b;\r\n                        cropCanvasRef.current.height = imageHeight;\r\n                    }\r\n\r\n                }\r\n            } else {\r\n                cropCanvasRef.current.width = imageWidth;\r\n                cropCanvasRef.current.height = imageHeight;\r\n\r\n\r\n            }\r\n            ////////////////////////////////\r\n            resizeCanvas();\r\n            const w = imageWidth;\r\n            const h = imageHeight;\r\n\r\n\r\n            requestAnimationFrame(() => {\r\n                if (Box) {\r\n                    ctx.drawImage(CropImageHolder, crop.x, crop.y, w, h);\r\n                } else {\r\n                    ctx.drawImage(CropImageHolder, 0, 0, w, h);\r\n                }\r\n\r\n                //////\r\n\r\n                ///console.log(finalImage)\r\n\r\n\r\n                if (final) {\r\n\r\n\r\n\r\n\r\n                    var lim = prevImage.length - 1\r\n                    ray[count] = cropCanvasRef.current.toDataURL();\r\n\r\n                    var x = count + 1;\r\n\r\n                    if (count <= lim) {\r\n\r\n                        alert(count);\r\n                        dispatch(UpdateUploadData(prevImage, prevImage[x]));\r\n                        setCount(x);\r\n                    }\r\n\r\n\r\n                    if (count === lim) {\r\n                        setfinalimage([...ray]);\r\n\r\n                        setTimeout(() => { setHidecrop(true); }, 700);\r\n\r\n                    }\r\n                }\r\n\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    useLayoutEffect(() => {\r\n        callCrop();\r\n    }, [CropImageHolder, imageWidth, imageHeight, Box, crop, zoom, cropCanvasRef, count])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const handleTouchStart = (e: any, type: any) => {\r\n        if (Box) {\r\n            setoptionscropshow(false);\r\n            if (type === 0) {\r\n                setcropInitial({\r\n                    ...cropInitial,\r\n                    x: e.clientX * extendxy - cropOffset.x,\r\n                    y: e.clientY * extendxy - cropOffset.y,\r\n                });\r\n            } else {\r\n                setcropInitial({\r\n                    ...cropInitial,\r\n                    x: e.touches[0].clientX * extendxy - cropOffset.x,\r\n                    y: e.touches[0].clientY * extendxy - cropOffset.y,\r\n                });\r\n            }\r\n            if (e.target) {\r\n                setDrag(true);\r\n            }\r\n        } else {\r\n            setBox(true);\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n    const handleTouchEnd = () => {\r\n        if (allowscrolltimer.current) {\r\n            clearTimeout(allowscrolltimer.current);\r\n        }\r\n        allowscrolltimer.current = setTimeout(function () {\r\n\r\n        }, 1200);\r\n        setoptionscropshow(true);\r\n        setcropInitial({\r\n            ...cropInitial,\r\n            x: crop.x,\r\n            y: crop.y,\r\n        });\r\n        setDrag(false);\r\n    };\r\n\r\n\r\n\r\n\r\n    const handleTouchDrag = (e: any, type: any) => {\r\n        if (Drag || type === 1000) {\r\n            var xx = cropInitial.x;\r\n            var yy = cropInitial.y;\r\n\r\n            if (e) {\r\n                if (type === 0) {\r\n                    xx = e.clientX * extendxy - cropInitial.x;\r\n                    yy = e.clientY * extendxy - cropInitial.y;\r\n                } else {\r\n                    xx = e.touches[0].clientX * extendxy - cropInitial.x;\r\n                    yy = e.touches[0].clientY * extendxy - cropInitial.y;\r\n\r\n                }\r\n            }\r\n\r\n            ///////////////////////////////////////////////\r\n            var fz = imageWidth - cropCanvasRef.current.width;\r\n            fz *= -1;\r\n            if (xx > 0) {\r\n                xx = 0;\r\n            } else if (xx < fz) {\r\n                xx = fz\r\n            }\r\n            //////////////////////////////\r\n            var ff = imageHeight - cropCanvasRef.current.height;\r\n            ff *= -1;\r\n            if (yy > 0) {\r\n                yy = 0;\r\n            } else if (yy < ff) {\r\n                yy = ff\r\n            }\r\n            //////////////////////////////////\r\n            setcrop({\r\n                ...crop,\r\n                x: xx,\r\n                y: yy,\r\n            });\r\n            setcropOffset({\r\n                ...cropOffset,\r\n                x: xx,\r\n                y: yy,\r\n            });\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n\r\n\r\n            <Grid\r\n                container\r\n                style={{\r\n                    padding: \"0px\", width: '100%', height: \"100%\",\r\n                }}>\r\n\r\n\r\n                <Grid ref={navRef}\r\n                    item\r\n                    xs={12}\r\n                    style={{\r\n                        padding: \"0px\", width: '94%', height: multiPost ? \"80%\" : '100%', position: 'fixed', top: '-20000000000px'\r\n                    }}>\r\n\r\n                </Grid>\r\n\r\n\r\n\r\n                {optionscropshow ? <Slider\r\n                    value={zoom}\r\n                    onChange={updatezoom}\r\n                    onChangeCommitted={() => { setoptionscropshow2(true); }}\r\n                    defaultValue={1}\r\n                    max={5}\r\n                    min={0}\r\n                    step={0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001}\r\n                    style={{ opacity: optionscropshow2 ? 0.9 : 0.45, width: '8%', left: '47%', top: '5vh', position: 'fixed', }}\r\n                />\r\n                    : null}\r\n\r\n\r\n\r\n                {allowCropAllCanvas ? (\r\n\r\n                    <canvas\r\n                        onMouseOver={() => {\r\n                            ///mouseover(0);\r\n                        }}\r\n                        onMouseUp={(e: any) => {\r\n                            handleTouchEnd();\r\n                        }}\r\n                        onTouchEnd={(e: any) => {\r\n                            handleTouchEnd();\r\n                        }}\r\n                        onMouseDown={(e: any) => {\r\n                            handleTouchStart(e, 0);\r\n                        }}\r\n                        onTouchStart={(e: any) => {\r\n                            handleTouchStart(e, 1);\r\n                        }}\r\n                        onMouseMove={(e: any) => {\r\n                            handleTouchDrag(e, 0);\r\n                        }}\r\n                        onTouchMove={(e: any) => {\r\n                            handleTouchDrag(e, 1);\r\n                        }}\r\n                        ref={cropCanvasRef}\r\n                        style={{\r\n                            padding: \"0px\",\r\n                            margin: \"auto\",\r\n                            cursor: \"pointer\",\r\n                            overflow: 'hidden'\r\n                        }} />\r\n                ) : null}\r\n\r\n\r\n\r\n\r\n                <DoneOutlineIcon\r\n                    onClick={Done}\r\n                    ref={IconRef}\r\n                    className={\r\n                        darkmodeReducer\r\n                            ? \"make-small-icons-clickable-darkab dontallowhighlighting zuperkingIcon \"\r\n                            : \"make-small-icons-clickable-lightab  dontallowhighlighting zuperkingIcon  \"\r\n                    }\r\n                    style={{\r\n                        color: \"#ffffff\",\r\n                        fontSize: \"3.8vw\",\r\n                        position: \"absolute\",\r\n                        opacity: optionscropshow2 ? 0.94 : 0,\r\n                        borderRadius: '70%',\r\n                        left: '49%',\r\n                        right: \"\",\r\n                        display: optionscropshow ? 'block' : 'none'\r\n                    }}\r\n                />\r\n\r\n\r\n\r\n                <CropIcon\r\n                    onClick={() => {\r\n                        if (Box) {\r\n                            setBox(false);\r\n                        } else {\r\n                            setBox(true);\r\n                        }\r\n                    }}\r\n\r\n                    ref={IconRef2}\r\n                    className={\r\n                        darkmodeReducer\r\n                            ? \"make-small-icons-clickable-darkab dontallowhighlighting zuperkingIcon \"\r\n                            : \"make-small-icons-clickable-lightab  dontallowhighlighting zuperkingIcon  \"\r\n                    }\r\n                    style={{\r\n                        color: \"#ffffff\",\r\n                        fontSize: \"2.9vw\",\r\n                        position: \"absolute\",\r\n                        bottom: '5vh',\r\n                        opacity: optionscropshow2 ? 0.94 : 0,\r\n                        right: '43%',\r\n                        display: optionscropshow ? 'none' : 'none'\r\n                    }}\r\n                />\r\n\r\n\r\n                <Grid\r\n                    item\r\n                    xs={12}\r\n                    style={{\r\n                        padding: \"0px\",\r\n                    }}>\r\n\r\n\r\n\r\n                    {prevImage.length > 1 ? <><Masonry\r\n                        columns={2}\r\n                        spacing={0}\r\n                        style={{\r\n                            padding: \"0px\",\r\n                            overflow: 'hidden'\r\n                        }}\r\n                    >\r\n\r\n                        {prevImage.map((picture: any, index: any) => (\r\n\r\n                            <img onClick={() => {\r\n                                dispatch(UpdateUploadData(prevImage, picture));\r\n                                navRef.current.scrollIntoView({\r\n                                    behavior: \"smooth\",\r\n                                    block: \"start\",\r\n                                });\r\n                            }} key={index} style={{ width: '50%', cursor: 'pointer' }} src={picture} alt={`Image ${index}`} />\r\n\r\n                        ))}\r\n\r\n                    </Masonry ></> : null}\r\n\r\n                </Grid>\r\n\r\n\r\n\r\n            </Grid>\r\n\r\n\r\n\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport const TaskbarCrop = React.memo(TaskbarCropx);\r\n"]},"metadata":{},"sourceType":"module"}