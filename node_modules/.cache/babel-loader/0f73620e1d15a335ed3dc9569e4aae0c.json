{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oghen\\\\OneDrive\\\\Documents\\\\ClikBate\\\\super\\\\src\\\\profile\\\\TaskbarSuperphotoImageView.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport TitleIcon from '@mui/icons-material/Title';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction TaskbarSuperphotoImageViewx({\n  seeOriginal,\n  AddMainImageRef,\n  index,\n  MainImageFiltersRef,\n  finalImage,\n  ray,\n  Originalray,\n  setOriginalRay\n}) {\n  _s();\n\n  const [fade, setfade] = useState(false);\n  const [Big, setBig] = useState(false);\n  useEffect(() => {\n    setfade(true);\n    setTimeout(() => {\n      setfade(false);\n    }, 2000);\n  }, [MainImageFiltersRef.current]); ///\n  ///\n  ///\n  /// INTERFACE/TYPES FOR SCREENHEIGHT AND DARKMODE\n\n  ///\n  ///\n  ///\n  /// GET DARKMODE FROM REDUX STORE\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const Timer = useRef(null);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        style: {\n          cursor: 'pointer'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => {\n            seeOriginal(index);\n          },\n          className: ray[index] === 1 ? 'fadeboyinFilter' : \"\",\n          ref: AddMainImageRef,\n          style: {\n            cursor: 'pointer',\n            width: '100%'\n          },\n          src: MainImageFiltersRef.current[index] ? MainImageFiltersRef.current[index].src : null,\n          alt: `Image ${index}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TitleIcon, {\n          className: darkmodeReducer ? \"make-small-icons-clickable-darkab dontallowhighlighting zuperkingIcon \" : \"make-small-icons-clickable-lightab  dontallowhighlighting zuperkingIcon  \",\n          style: {\n            fontSize: '5vw',\n            position: 'relative',\n            bottom: '80vh',\n            left: '76%',\n            borderRadius: '50%',\n            zIndex: 2000,\n            transition: \"transform 0.1s\",\n            cursor: 'pointer'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(TaskbarSuperphotoImageViewx, \"cuxqUKpldDq7PP4xXgsYA4mREKY=\", false, function () {\n  return [useSelector];\n});\n\n_c = TaskbarSuperphotoImageViewx;\nexport const TaskbarSuperphotoImageView = /*#__PURE__*/React.memo(TaskbarSuperphotoImageViewx);\n_c2 = TaskbarSuperphotoImageView;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TaskbarSuperphotoImageViewx\");\n$RefreshReg$(_c2, \"TaskbarSuperphotoImageView\");","map":{"version":3,"sources":["C:/Users/oghen/OneDrive/Documents/ClikBate/super/src/profile/TaskbarSuperphotoImageView.tsx"],"names":["React","useRef","useEffect","useState","Grid","useSelector","TitleIcon","TaskbarSuperphotoImageViewx","seeOriginal","AddMainImageRef","index","MainImageFiltersRef","finalImage","ray","Originalray","setOriginalRay","fade","setfade","Big","setBig","setTimeout","current","darkmode","state","GlobalReducer","darkmodeReducer","Timer","cursor","width","src","fontSize","position","bottom","left","borderRadius","zIndex","transition","TaskbarSuperphotoImageView","memo"],"mappings":"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","sourcesContent":["import React, {\r\n    useRef,\r\n    useEffect,\r\n    useCallback,\r\n    useState,\r\n    useLayoutEffect,\r\n} from \"react\";\r\nimport ControlPointDuplicateIcon from \"@mui/icons-material/ControlPointDuplicate\";\r\nimport { Grid, Switch, DialogContent } from \"@material-ui/core\";\r\nimport { matchPc, matchTablet, matchMobile } from \"../DetectDevice\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport { OptionsSlider } from \"../profile/OptionsSlider\";\r\nimport { RootStateOrAny, useSelector, useDispatch } from \"react-redux\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport Axios from \"axios\";\r\nimport CheckIcon from \"@mui/icons-material/Check\";\r\nimport date from \"date-and-time\";\r\nimport { UserInfoUpdatePROFILE } from \"../log/actions/UserdataAction\";\r\nimport { UserInfoUpdateBILLBOARD } from \"../log/actions/UserdataAction\";\r\nimport { usePalette } from \"react-palette\";\r\nimport { UpdateColorAction } from \"../GlobalActions\";\r\nimport EditTwoToneIcon from \"@mui/icons-material/EditTwoTone\";\r\nimport DoneOutlineIcon from '@mui/icons-material/DoneOutline';\r\nimport { UpdateUploadData } from \"../GlobalActions\";\r\nimport DoneIcon from '@mui/icons-material/Done';\r\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport CropIcon from '@mui/icons-material/Crop';\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport { TaskbarCrop } from \"./TaskbarCrop\";\r\nimport set from \"date-fns/set/index.js\";\r\nimport TitleIcon from '@mui/icons-material/Title';\r\nimport TouchAppIcon from '@mui/icons-material/TouchApp';\r\nimport InsertPhotoIcon from '@material-ui/icons/InsertPhoto';\r\nimport RestoreIcon from '@material-ui/icons/Restore';\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction TaskbarSuperphotoImageViewx({ seeOriginal, AddMainImageRef, index, MainImageFiltersRef, finalImage, ray, Originalray, setOriginalRay }: any): JSX.Element {\r\n\r\n\r\n    const [fade, setfade] = useState(false);\r\n\r\n\r\n\r\n    const [Big, setBig] = useState(false);\r\n\r\n    useEffect(() => {\r\n\r\n        setfade(true)\r\n\r\n        setTimeout(() => {\r\n            setfade(false)\r\n        }, 2000);\r\n\r\n\r\n\r\n    }, [MainImageFiltersRef.current])\r\n\r\n    ///\r\n    ///\r\n    ///\r\n    /// INTERFACE/TYPES FOR SCREENHEIGHT AND DARKMODE\r\n    interface RootStateGlobalReducer {\r\n        GlobalReducer: {\r\n            darkmode: boolean;\r\n            screenHeight: number;\r\n        };\r\n    }\r\n\r\n    ///\r\n    ///\r\n    ///\r\n    /// GET DARKMODE FROM REDUX STORE\r\n    const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n        ...state.GlobalReducer,\r\n    }));\r\n    const darkmodeReducer = darkmode;\r\n\r\n\r\n\r\n    const Timer = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n\r\n    return (\r\n        <>\r\n\r\n\r\n            <Grid container>\r\n\r\n                <Grid item xs={12} style={{\r\n                    cursor: 'pointer',\r\n\r\n\r\n                }}>\r\n\r\n\r\n\r\n                    <img\r\n                        onClick={() => { seeOriginal(index) }}\r\n                        className={ray[index] === 1 ? 'fadeboyinFilter' : \"\"} ref={AddMainImageRef} style={{ cursor: 'pointer', width: '100%' }} src={\r\n                            MainImageFiltersRef.current[index]\r\n                                ? MainImageFiltersRef.current[index].src\r\n                                : null\r\n                        }\r\n                        alt={`Image ${index}`} />\r\n\r\n\r\n                    <TitleIcon\r\n                        className={\r\n                            darkmodeReducer\r\n                                ? \"make-small-icons-clickable-darkab dontallowhighlighting zuperkingIcon \"\r\n                                : \"make-small-icons-clickable-lightab  dontallowhighlighting zuperkingIcon  \"\r\n                        }\r\n                        style={{\r\n                            fontSize: '5vw',\r\n                            position: 'relative',\r\n                            bottom: '80vh',\r\n                            left: '76%',\r\n                            borderRadius: '50%',\r\n                            zIndex: 2000,\r\n                            transition: \"transform 0.1s\",\r\n                            cursor: 'pointer',\r\n\r\n\r\n                        }}\r\n                    />\r\n\r\n                </Grid>\r\n            </Grid>\r\n\r\n\r\n\r\n\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport const TaskbarSuperphotoImageView = React.memo(TaskbarSuperphotoImageViewx);\r\n"]},"metadata":{},"sourceType":"module"}