{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oghen\\\\OneDrive\\\\Documents\\\\ClikBate\\\\Clikbate\\\\src\\\\upload\\\\VideoFFmpeg.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { createFFmpeg, fetchFile } from '@ffmpeg/ffmpeg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ffmpeg = createFFmpeg({\n  log: true\n});\nconst VideoFFmpegx = VideoUrl => {\n  _s();\n  const [recordedVideoUrl, setRecordedVideoUrl] = useState(null);\n  const processVideo = async sourceVideoUrl => {\n    if (!ffmpeg.isLoaded()) {\n      await ffmpeg.load();\n    }\n\n    // Writing the file to FFmpeg's virtual file system\n    ffmpeg.FS('writeFile', 'input.webm', await fetchFile(sourceVideoUrl));\n\n    // Running the FFmpeg command to cut the video from 1:00 to 1:10\n    await ffmpeg.run('-ss', '00:01:00', '-i', 'input.webm', '-t', '10', '-c:v', 'libx264', '-c:a', 'aac', 'output.mp4');\n\n    // Reading the result file\n    const data = ffmpeg.FS('readFile', 'output.mp4');\n\n    // Creating a URL for the output file\n    const url = URL.createObjectURL(new Blob([data.buffer], {\n      type: 'video/mp4'\n    }));\n    setRecordedVideoUrl(url);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => processVideo(VideoUrl),\n      children: \"Process Video\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), recordedVideoUrl && /*#__PURE__*/_jsxDEV(\"video\", {\n      src: recordedVideoUrl,\n      controls: true,\n      style: {\n        width: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 34\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n_s(VideoFFmpegx, \"0uSgLalUKjqSaFFL8xxhIVoZ5uM=\");\n_c = VideoFFmpegx;\nexport const VideoFFmpeg = /*#__PURE__*/React.memo(VideoFFmpegx);\n_c2 = VideoFFmpeg;\nvar _c, _c2;\n$RefreshReg$(_c, \"VideoFFmpegx\");\n$RefreshReg$(_c2, \"VideoFFmpeg\");","map":{"version":3,"names":["React","useState","createFFmpeg","fetchFile","jsxDEV","_jsxDEV","ffmpeg","log","VideoFFmpegx","VideoUrl","_s","recordedVideoUrl","setRecordedVideoUrl","processVideo","sourceVideoUrl","isLoaded","load","FS","run","data","url","URL","createObjectURL","Blob","buffer","type","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","src","controls","style","width","_c","VideoFFmpeg","memo","_c2","$RefreshReg$"],"sources":["C:/Users/oghen/OneDrive/Documents/ClikBate/Clikbate/src/upload/VideoFFmpeg.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { createFFmpeg, fetchFile } from '@ffmpeg/ffmpeg';\r\n\r\nconst ffmpeg = createFFmpeg({ log: true });\r\n\r\nconst VideoFFmpegx = (VideoUrl: any) => {\r\n    const [recordedVideoUrl, setRecordedVideoUrl] = useState(null);\r\n\r\n    const processVideo = async (sourceVideoUrl: any) => {\r\n        if (!ffmpeg.isLoaded()) {\r\n            await ffmpeg.load();\r\n        }\r\n\r\n        // Writing the file to FFmpeg's virtual file system\r\n        ffmpeg.FS('writeFile', 'input.webm', await fetchFile(sourceVideoUrl));\r\n\r\n        // Running the FFmpeg command to cut the video from 1:00 to 1:10\r\n        await ffmpeg.run('-ss', '00:01:00', '-i', 'input.webm', '-t', '10', '-c:v', 'libx264', '-c:a', 'aac', 'output.mp4');\r\n\r\n        // Reading the result file\r\n        const data = ffmpeg.FS('readFile', 'output.mp4');\r\n\r\n        // Creating a URL for the output file\r\n        const url: any = URL.createObjectURL(new Blob([data.buffer], { type: 'video/mp4' }));\r\n\r\n        setRecordedVideoUrl(url);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={() => processVideo(VideoUrl)}>Process Video</button>\r\n            {recordedVideoUrl && <video src={recordedVideoUrl} controls style={{ width: '100%' }}></video>}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport const VideoFFmpeg = React.memo(VideoFFmpegx)\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,YAAY,EAAEC,SAAS,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,MAAMC,MAAM,GAAGJ,YAAY,CAAC;EAAEK,GAAG,EAAE;AAAK,CAAC,CAAC;AAE1C,MAAMC,YAAY,GAAIC,QAAa,IAAK;EAAAC,EAAA;EACpC,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAE9D,MAAMY,YAAY,GAAG,MAAOC,cAAmB,IAAK;IAChD,IAAI,CAACR,MAAM,CAACS,QAAQ,CAAC,CAAC,EAAE;MACpB,MAAMT,MAAM,CAACU,IAAI,CAAC,CAAC;IACvB;;IAEA;IACAV,MAAM,CAACW,EAAE,CAAC,WAAW,EAAE,YAAY,EAAE,MAAMd,SAAS,CAACW,cAAc,CAAC,CAAC;;IAErE;IACA,MAAMR,MAAM,CAACY,GAAG,CAAC,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,KAAK,EAAE,YAAY,CAAC;;IAEnH;IACA,MAAMC,IAAI,GAAGb,MAAM,CAACW,EAAE,CAAC,UAAU,EAAE,YAAY,CAAC;;IAEhD;IACA,MAAMG,GAAQ,GAAGC,GAAG,CAACC,eAAe,CAAC,IAAIC,IAAI,CAAC,CAACJ,IAAI,CAACK,MAAM,CAAC,EAAE;MAAEC,IAAI,EAAE;IAAY,CAAC,CAAC,CAAC;IAEpFb,mBAAmB,CAACQ,GAAG,CAAC;EAC5B,CAAC;EAED,oBACIf,OAAA;IAAAqB,QAAA,gBACIrB,OAAA;MAAQsB,OAAO,EAAEA,CAAA,KAAMd,YAAY,CAACJ,QAAQ,CAAE;MAAAiB,QAAA,EAAC;IAAa;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EACpEpB,gBAAgB,iBAAIN,OAAA;MAAO2B,GAAG,EAAErB,gBAAiB;MAACsB,QAAQ;MAACC,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAO;IAAE;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7F,CAAC;AAEd,CAAC;AAACrB,EAAA,CA7BIF,YAAY;AAAA4B,EAAA,GAAZ5B,YAAY;AAgClB,OAAO,MAAM6B,WAAW,gBAAGrC,KAAK,CAACsC,IAAI,CAAC9B,YAAY,CAAC;AAAA+B,GAAA,GAAtCF,WAAW;AAAA,IAAAD,EAAA,EAAAG,GAAA;AAAAC,YAAA,CAAAJ,EAAA;AAAAI,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module"}