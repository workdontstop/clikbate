{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oghen\\\\OneDrive\\\\Documents\\\\ClikBate\\\\Clikbate\\\\src\\\\upload\\\\VideoFFmpeg.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport Axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoFFmpegx = ({\n  VideoUrl\n}) => {\n  _s();\n  const [recordedVideoUrl, setRecordedVideoUrl] = useState(null);\n  const [srcVideoBlob, setsrcVideoBlob] = useState(null);\n  const ffmpegRef = useRef(null);\n  const handleEditVideo = async () => {\n    if (!VideoUrl) {\n      alert('Please upload a video first.');\n      return;\n    }\n\n    // Create a JSON object with editing instructions\n    const editingInstructions = {\n      timeline: {\n        background: '#000000',\n        tracks: [{\n          clips: [{\n            asset: {\n              type: 'video',\n              src: VideoUrl // Use the URL of your uploaded video\n            },\n            start: 180,\n            // Start at 3:00 (in seconds)\n            length: 10 // 10 seconds, from 3:00 to 3:10\n          }]\n        }]\n      }\n    };\n    try {\n      // Send the JSON request to the Shotstack API\n      const response = await Axios.post(`${REACT_APP_SUPERSTARZ_URL}/post_upload_data`, editingInstructions, {\n        headers: {\n          'x-api-key': 'jD8rgnqopKB4AAZXRrvJEDWl5EI9C2iKwGJVO8ny',\n          // Replace with your actual API key\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // Handle the response and display the edited video to the user\n      const editedVideoUrl = response.data.url;\n      setRecordedVideoUrl(editedVideoUrl);\n      alert('Video editing complete! You can now download the edited video.');\n      // You can provide a download link or display the video here\n    } catch (error) {\n      console.error('Error editing video:', error);\n      alert('An error occurred while editing the video. Please try again later.');\n    }\n  };\n  async function convertVideoUrlToBlob(url) {\n    try {\n      // Fetch the video from the URL\n      const response = await fetch(url);\n\n      // Check if the fetch was successful\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      // Get the video data as a Blob\n      const videoBlob = await response.blob();\n      return videoBlob;\n    } catch (error) {\n      console.error('Error fetching and converting the video:', error);\n    }\n  }\n  useEffect(() => {\n    convertVideoUrlToBlob(VideoUrl).then(blob => {\n      console.log('Video Blob:', blob);\n\n      // You can now use hh he blob as needed, for example, create a local URL to use in a <video> element\n      if (blob) {\n        setsrcVideoBlob(blob);\n        ///processVideo(blob)\n      }\n    });\n  }, [VideoUrl]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleEditVideo,\n      children: \"Process Video\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), recordedVideoUrl && /*#__PURE__*/_jsxDEV(\"video\", {\n      src: recordedVideoUrl,\n      controls: true,\n      style: {\n        width: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 34\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n};\n_s(VideoFFmpegx, \"boWrRqkS5zSYrjc1UKgPUGHQrFk=\");\n_c = VideoFFmpegx;\nexport const VideoFFmpeg = /*#__PURE__*/React.memo(VideoFFmpegx);\n_c2 = VideoFFmpeg;\nvar _c, _c2;\n$RefreshReg$(_c, \"VideoFFmpegx\");\n$RefreshReg$(_c2, \"VideoFFmpeg\");","map":{"version":3,"names":["React","useState","useRef","useEffect","Axios","jsxDEV","_jsxDEV","VideoFFmpegx","VideoUrl","_s","recordedVideoUrl","setRecordedVideoUrl","srcVideoBlob","setsrcVideoBlob","ffmpegRef","handleEditVideo","alert","editingInstructions","timeline","background","tracks","clips","asset","type","src","start","length","response","post","REACT_APP_SUPERSTARZ_URL","headers","editedVideoUrl","data","url","error","console","convertVideoUrlToBlob","fetch","ok","Error","status","videoBlob","blob","then","log","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","controls","style","width","_c","VideoFFmpeg","memo","_c2","$RefreshReg$"],"sources":["C:/Users/oghen/OneDrive/Documents/ClikBate/Clikbate/src/upload/VideoFFmpeg.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { createFFmpeg } from '@ffmpeg/ffmpeg';\r\nimport { fetchFile, toBlobURL } from '@ffmpeg/util';\r\nimport Axios from \"axios\";\r\n\r\nconst VideoFFmpegx = ({ VideoUrl }: any) => {\r\n    const [recordedVideoUrl, setRecordedVideoUrl] = useState(null);\r\n    const [srcVideoBlob, setsrcVideoBlob] = useState<any>(null);\r\n    const ffmpegRef = useRef(null);\r\n\r\n\r\n\r\n    const handleEditVideo = async () => {\r\n        if (!VideoUrl) {\r\n            alert('Please upload a video first.');\r\n            return;\r\n        }\r\n\r\n        // Create a JSON object with editing instructions\r\n        const editingInstructions = {\r\n            timeline: {\r\n                background: '#000000',\r\n                tracks: [\r\n                    {\r\n                        clips: [\r\n                            {\r\n                                asset: {\r\n                                    type: 'video',\r\n                                    src: VideoUrl, // Use the URL of your uploaded video\r\n                                },\r\n                                start: 180, // Start at 3:00 (in seconds)\r\n                                length: 10, // 10 seconds, from 3:00 to 3:10\r\n                            },\r\n                        ],\r\n                    },\r\n                ],\r\n            },\r\n        };\r\n\r\n        try {\r\n            // Send the JSON request to the Shotstack API\r\n            const response = await Axios.post(`${REACT_APP_SUPERSTARZ_URL}/post_upload_data`, editingInstructions, {\r\n                headers: {\r\n                    'x-api-key': 'jD8rgnqopKB4AAZXRrvJEDWl5EI9C2iKwGJVO8ny', // Replace with your actual API key\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            });\r\n\r\n            // Handle the response and display the edited video to the user\r\n            const editedVideoUrl = response.data.url;\r\n\r\n            setRecordedVideoUrl(editedVideoUrl);\r\n            alert('Video editing complete! You can now download the edited video.');\r\n            // You can provide a download link or display the video here\r\n        } catch (error) {\r\n            console.error('Error editing video:', error);\r\n            alert('An error occurred while editing the video. Please try again later.');\r\n        }\r\n    };\r\n\r\n\r\n    async function convertVideoUrlToBlob(url: any) {\r\n        try {\r\n            // Fetch the video from the URL\r\n            const response = await fetch(url);\r\n\r\n            // Check if the fetch was successful\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            // Get the video data as a Blob\r\n            const videoBlob = await response.blob();\r\n\r\n            return videoBlob;\r\n        } catch (error) {\r\n            console.error('Error fetching and converting the video:', error);\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        convertVideoUrlToBlob(VideoUrl).then((blob) => {\r\n            console.log('Video Blob:', blob);\r\n\r\n\r\n            // You can now use hh he blob as needed, for example, create a local URL to use in a <video> element\r\n            if (blob) {\r\n                setsrcVideoBlob(blob);\r\n                ///processVideo(blob)\r\n            }\r\n        });\r\n\r\n    }, [VideoUrl]);\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={handleEditVideo} >Process Video</button>\r\n            {recordedVideoUrl && <video src={recordedVideoUrl} controls style={{ width: '100%' }}></video>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const VideoFFmpeg = React.memo(VideoFFmpegx);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}