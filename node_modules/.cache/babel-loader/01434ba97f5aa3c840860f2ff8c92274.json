{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oghen\\\\OneDrive\\\\Documents\\\\ClikBate\\\\super\\\\src\\\\profile\\\\Taskbar.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { DialogContent } from \"@material-ui/core\";\nimport { matchPc } from \"../DetectDevice\";\nimport { useSpring, animated } from \"react-spring\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { TaskbarCrop } from \"./TaskbarCrop\";\nimport { TaskbarSuperphoto } from \"./TaskbarSuperphoto\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Taskbarx({\n  showModalUploadTask,\n  uploadClose\n}) {\n  _s();\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    setHidecrop(false);\n  }, [showModalUploadTask]); ///\n  ///\n  ///\n  /// INTERFACE/TYPES FOR SCREENHEIGHT AND DARKMODE\n\n  ///\n  ///\n  ///\n  /// GET DARKMODE FROM REDUX STORE\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const animation = useSpring({\n    config: {\n      duration: 600\n    },\n    opacity: showModalUploadTask ? 1 : 0,\n    transform: showModalUploadTask ? `translateX(0%)` : `translateX(-100%)`,\n    padding: \"0px\"\n  });\n  const [hidecrop, setHidecropper] = useState(false);\n  const [finalImage, setfinalimage] = useState([]);\n  const [hideCrop, sethideCrop] = useState(false);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(animated.div, {\n      className: matchPc ? darkmodeReducer ? \"postscroll-dark modal-containerDark\" : \"postscroll-light modal-containerLight\" : darkmodeReducer ? \"postscroll-darkm modal-containerDark\" : \"postscroll-lightm  modal-containerLight\",\n      style: { ...animation,\n        width: '94%',\n        height: \"100vh\",\n        position: \"fixed\",\n        top: '-0vh',\n        zIndex: 100,\n        cursor: \"default\",\n        overflow: hideCrop ? 'auto' : 'hidden'\n      },\n      children: [/*#__PURE__*/_jsxDEV(DialogContent, {\n        style: {\n          padding: \"0px\"\n        },\n        children: hidecrop ? /*#__PURE__*/_jsxDEV(TaskbarSuperphoto, {\n          finalImage: finalImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(TaskbarCrop, {\n          hideCrop: hideCrop,\n          sethideCrop: sethideCrop,\n          showModalUploadTask: showModalUploadTask,\n          setHidecropper: setHidecropper,\n          uploadClose: uploadClose,\n          setfinalimage: setfinalimage,\n          finalImage: finalImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(Taskbarx, \"b17DS8C9RYFDi02GrtcKpYUO+kI=\", false, function () {\n  return [useDispatch, useSelector, useSpring];\n});\n\n_c = Taskbarx;\nexport const Taskbar = /*#__PURE__*/React.memo(Taskbarx);\n_c2 = Taskbar;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Taskbarx\");\n$RefreshReg$(_c2, \"Taskbar\");","map":{"version":3,"sources":["C:/Users/oghen/OneDrive/Documents/ClikBate/super/src/profile/Taskbar.tsx"],"names":["React","useEffect","useState","DialogContent","matchPc","useSpring","animated","useSelector","useDispatch","TaskbarCrop","TaskbarSuperphoto","Taskbarx","showModalUploadTask","uploadClose","dispatch","setHidecrop","darkmode","state","GlobalReducer","darkmodeReducer","animation","config","duration","opacity","transform","padding","hidecrop","setHidecropper","finalImage","setfinalimage","hideCrop","sethideCrop","width","height","position","top","zIndex","cursor","overflow","Taskbar","memo"],"mappings":"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","sourcesContent":["import React, {\r\n  useRef,\r\n  useEffect,\r\n  useCallback,\r\n  useState,\r\n  useLayoutEffect,\r\n} from \"react\";\r\nimport ControlPointDuplicateIcon from \"@mui/icons-material/ControlPointDuplicate\";\r\nimport { Grid, Switch, DialogContent } from \"@material-ui/core\";\r\nimport { matchPc, matchTablet, matchMobile } from \"../DetectDevice\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport { OptionsSlider } from \"../profile/OptionsSlider\";\r\nimport { RootStateOrAny, useSelector, useDispatch } from \"react-redux\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport Axios from \"axios\";\r\nimport CheckIcon from \"@mui/icons-material/Check\";\r\nimport date from \"date-and-time\";\r\nimport { UserInfoUpdatePROFILE } from \"../log/actions/UserdataAction\";\r\nimport { UserInfoUpdateBILLBOARD } from \"../log/actions/UserdataAction\";\r\nimport { usePalette } from \"react-palette\";\r\nimport { UpdateColorAction } from \"../GlobalActions\";\r\nimport EditTwoToneIcon from \"@mui/icons-material/EditTwoTone\";\r\nimport DoneOutlineIcon from '@mui/icons-material/DoneOutline';\r\nimport { UpdateUploadData } from \"../GlobalActions\";\r\nimport DoneIcon from '@mui/icons-material/Done';\r\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\r\n\r\nimport CropIcon from '@mui/icons-material/Crop';\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport { TaskbarCrop } from \"./TaskbarCrop\";\r\nimport { TaskbarSuperphoto } from \"./TaskbarSuperphoto\";\r\n\r\n\r\nfunction Taskbarx({\r\n  showModalUploadTask,\r\n  uploadClose,\r\n\r\n}: any): JSX.Element {\r\n  const dispatch = useDispatch();\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    setHidecrop(false);\r\n  }, [showModalUploadTask]);\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// INTERFACE/TYPES FOR SCREENHEIGHT AND DARKMODE\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n      screenHeight: number;\r\n    };\r\n  }\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// GET DARKMODE FROM REDUX STORE\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n  const darkmodeReducer = darkmode;\r\n\r\n\r\n  const animation = useSpring({\r\n    config: {\r\n      duration: 600,\r\n    },\r\n    opacity: showModalUploadTask ? 1 : 0,\r\n    transform: showModalUploadTask ? `translateX(0%)` : `translateX(-100%)`,\r\n    padding: \"0px\",\r\n\r\n  });\r\n\r\n\r\n\r\n  const [hidecrop, setHidecropper] = useState(false);\r\n\r\n  const [finalImage, setfinalimage] = useState<any>([]);\r\n\r\n  const [hideCrop, sethideCrop] = useState(false);\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <animated.div className={\r\n        matchPc\r\n          ? darkmodeReducer\r\n            ? \"postscroll-dark modal-containerDark\"\r\n            : \"postscroll-light modal-containerLight\"\r\n          : darkmodeReducer\r\n            ? \"postscroll-darkm modal-containerDark\"\r\n            : \"postscroll-lightm  modal-containerLight\"\r\n      }\r\n\r\n\r\n\r\n\r\n        style={{\r\n          ...animation, width: '94%',\r\n          height: \"100vh\",\r\n          position: \"fixed\",\r\n          top: '-0vh',\r\n          zIndex: 100,\r\n          cursor: \"default\",\r\n          overflow: hideCrop ? 'auto' : 'hidden',\r\n        }}>\r\n        <DialogContent\r\n          style={{\r\n            padding: \"0px\",\r\n          }}>\r\n\r\n\r\n          {hidecrop ?\r\n            <TaskbarSuperphoto finalImage={finalImage} /> :\r\n\r\n\r\n            <TaskbarCrop hideCrop={hideCrop} sethideCrop={sethideCrop}\r\n              showModalUploadTask={showModalUploadTask} setHidecropper={setHidecropper} uploadClose={uploadClose} setfinalimage={setfinalimage} finalImage={finalImage} />\r\n\r\n          }\r\n\r\n\r\n\r\n        </DialogContent> </animated.div>\r\n\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport const Taskbar = React.memo(Taskbarx);\r\n"]},"metadata":{},"sourceType":"module"}