{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\upload\\\\PreviewCanvasCropAll.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useLayoutEffect, useCallback } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction PreviewCanvasCropAllx({\n  setwaitONLOAD,\n  cropCanvasRef,\n  image,\n  getpreviewFixedWidth,\n  index,\n  CropImageHolder,\n  cropheight,\n  cropwidth,\n  BoxCropActivated,\n  hdcanvasvalue,\n  SourceWidthForCropX,\n  SourceWidthForCropY,\n  WideImageCheck,\n  crop,\n  getCropHeight,\n  canvasToimage,\n  refWithimageData,\n  addUploadItemsRef,\n  itemUploadRef,\n  setsuperCropLoadFade,\n  length,\n  filterImage,\n  setfilterImage,\n  setallowFilters,\n  allowCropAllCanvas,\n  cutOffLoader,\n  setcutOffLoader\n}) {\n  _s();\n\n  ///\n  ///\n  ///DARKMODE FROM REDUX\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const canvasRef = useRef(null);\n  const [previewFilehold, setpreviewFilehold] = useState(null);\n  const [previewCSSHeight, setpreviewCSSHeight] = useState(null);\n  const [cropCanvasWidth, setcropCanvasWidth] = useState(null);\n  const [cropCanvasHeight, setcropCanvasHeight] = useState(null);\n  const Timer1 = useRef(null);\n  const Timer2 = useRef(null);\n  const [imageWidthWithAspectRatio, setimageWidthWithAspectRatio] = useState(null);\n  const [imageWidthWithAspectRatioxx, setimageWidthWithAspectRatioxx] = useState(null);\n  useLayoutEffect(() => {\n    const previewFileReadimage = new Image();\n    previewFileReadimage.src = image;\n\n    previewFileReadimage.onload = function () {\n      if (cropCanvasRef.current) {\n        setpreviewFilehold(previewFileReadimage);\n        var cropH, cropW;\n\n        if (CropImageHolder) {\n          cropW = cropCanvasRef.current.width;\n          cropH = cropCanvasRef.current.height;\n        } else {\n          cropW = previewFileReadimage.naturalWidth;\n          cropH = previewFileReadimage.naturalHeight;\n        }\n\n        if (cropW > cropH) {\n          var Ratio1500 = cropW / 1500;\n          var height1500 = cropH / Ratio1500;\n          setcropCanvasWidth(1500);\n          setcropCanvasHeight(height1500);\n        } else {\n          var Ratio1500 = cropH / 1500;\n          var width1500 = cropW / Ratio1500;\n          setcropCanvasWidth(width1500);\n          setcropCanvasHeight(1500);\n        }\n\n        let CropAspectRatio = cropwidth / cropheight;\n        let newheight = getpreviewFixedWidth / CropAspectRatio;\n        setpreviewCSSHeight(newheight);\n        let AspectRatioPrevHeightandWidth = previewFileReadimage.naturalHeight / previewFileReadimage.naturalWidth;\n        let newWidth = cropCanvasHeight / AspectRatioPrevHeightandWidth;\n        setimageWidthWithAspectRatio(newWidth);\n        let AspectRatioPrevHeightandWidthx = cropCanvasWidth / cropCanvasHeight;\n        let newWidthx = getpreviewFixedWidth / AspectRatioPrevHeightandWidthx;\n        setimageWidthWithAspectRatioxx(newWidthx);\n      }\n    };\n  }, [image, BoxCropActivated, previewCSSHeight, getpreviewFixedWidth, cropCanvasRef, CropImageHolder, cropwidth, cropheight, crop]);\n\n  const loader = () => {};\n\n  const drawcrop = useCallback(() => {\n    async function callcropper() {\n      if (previewFilehold && canvasRef.current) {\n        const ctx = canvasRef.current.getContext(\"2d\");\n        canvasRef.current.height = cropCanvasHeight;\n        canvasRef.current.width = cropCanvasWidth;\n\n        if (BoxCropActivated) {\n          var CropAspectRatio = cropCanvasWidth / cropCanvasHeight;\n          var newheightq = getpreviewFixedWidth / CropAspectRatio;\n\n          if (previewFilehold.naturalWidth > previewFilehold.naturalHeight) {\n            var zoomINBOXWide = previewFilehold.naturalWidth / previewFilehold.naturalHeight;\n            let AspectRatioPrevHeightandWidthxWideCRop = previewFilehold.naturalWidth / previewFilehold.naturalHeight;\n            let boxWIDEheight = cropCanvasWidth * zoomINBOXWide / AspectRatioPrevHeightandWidthxWideCRop;\n            var centerpreview = canvasRef.current.width / 2 - cropCanvasWidth * zoomINBOXWide / 2;\n            var dragDistanceX = cropCanvasWidth * zoomINBOXWide - cropCanvasWidth;\n            var cropXprev = crop.x;\n            var RatiofromOriginalandfixedHeight = previewFilehold.naturalHeight / cropCanvasWidth * zoomINBOXWide;\n            var SourceWidthForCropXx = previewFilehold.naturalWidth / RatiofromOriginalandfixedHeight;\n            cropXprev = cropXprev * cropCanvasWidth * zoomINBOXWide / SourceWidthForCropX;\n\n            if (cropXprev < -dragDistanceX) {\n              cropXprev = -dragDistanceX;\n            } else if (cropXprev > 0) {\n              cropXprev = 0;\n            } else {} ////////////////////\n\n\n            requestAnimationFrame(async () => {\n              ctx.drawImage(previewFilehold, WideImageCheck ? cropXprev : 0, 0, cropCanvasWidth * zoomINBOXWide, boxWIDEheight);\n            }); ////////////////////\n          } else {\n            let AspectRatioPrevHeightandWidthxBox = previewFilehold.naturalWidth / previewFilehold.naturalHeight;\n            let boxedHeight = cropCanvasWidth / AspectRatioPrevHeightandWidthxBox;\n            var dragDistanceY = boxedHeight - cropCanvasHeight;\n            var cropYprev = crop.y;\n            cropYprev = cropYprev * boxedHeight / SourceWidthForCropY;\n\n            if (cropYprev < -dragDistanceY) {\n              cropYprev = -dragDistanceY;\n            } else if (cropYprev > 0) {\n              cropYprev = 0;\n            } else {} ////////////////////\n\n\n            requestAnimationFrame(async () => {\n              ctx.drawImage(previewFilehold, 0, WideImageCheck ? 0 : cropYprev, cropCanvasWidth, boxedHeight);\n            }); ////////////////////\n          }\n\n          canvasRef.current.style.width = `${getpreviewFixedWidth}px`;\n          canvasRef.current.style.height = `${newheightq}px`;\n        } else {\n          var xtraZoom = cropCanvasWidth / imageWidthWithAspectRatio;\n          var centerpreview = canvasRef.current.width / 2 - imageWidthWithAspectRatio / 2;\n          var centerpreview2 = canvasRef.current.height / 3 - cropCanvasHeight * xtraZoom / 3;\n\n          if (imageWidthWithAspectRatio < cropCanvasWidth) {\n            if (cropCanvasWidth > cropCanvasHeight) {\n              ////WIDE IMAGE SOURCE NOT PROPERLY FITTED\n              ////////////////////\n              const jj = await requestAnimationFrame(() => {\n                ctx.drawImage(previewFilehold, 0, centerpreview2, imageWidthWithAspectRatio * xtraZoom, cropCanvasHeight * xtraZoom);\n              }); ////////////////////\n            } else {\n              ////LONG IMAGE SOURCE NOT PROPERLY FITTED\n              ////////////////////\n              try {\n                const jj = await requestAnimationFrame(() => {\n                  ctx.drawImage(previewFilehold, 0, 0, imageWidthWithAspectRatio * xtraZoom, cropCanvasHeight * xtraZoom);\n                });\n                loader();\n              } catch {} ////////////////////\n\n            }\n          } else {\n            ////////LONG IMAGE SOURCE WIDE IMAGE SOURCE\n            try {\n              const jj = await requestAnimationFrame(() => {\n                ctx.drawImage(previewFilehold, centerpreview, 0, imageWidthWithAspectRatio, cropCanvasHeight);\n              });\n              loader();\n            } catch {} ////////////////////\n\n          }\n\n          canvasRef.current.style.width = `${getpreviewFixedWidth}px`;\n          canvasRef.current.style.height = `${previewCSSHeight}px`;\n        }\n      }\n    }\n\n    callcropper();\n  }, [previewFilehold, canvasRef, CropImageHolder, cropCanvasWidth, cropCanvasHeight, imageWidthWithAspectRatio, WideImageCheck]);\n  const [callLayoutoNCE, setcallLayoutoNCE] = useState(true);\n  useLayoutEffect(() => {\n    if (canvasToimage && callLayoutoNCE && itemUploadRef.current[index] && canvasRef.current) {\n      drawcrop();\n      setTimeout(function () {\n        itemUploadRef.current[index].src = canvasRef.current.toDataURL();\n        setcallLayoutoNCE(false); ///////////////////////////////\n\n        const newArraa = [...filterImage];\n        newArraa[index] = canvasRef.current.toDataURL();\n        setfilterImage(newArraa); ///////////////////////////////\n\n        if (length - 1 === index) {\n          setsuperCropLoadFade(false);\n          setallowFilters(true);\n        }\n      }, 5000);\n    }\n  }, [canvasToimage, itemUploadRef, canvasRef]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        xs: 12,\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          ref: addUploadItemsRef,\n          style: {\n            width: \"100%\",\n            height: \"auto\",\n            position: \"relative\",\n            margin: \"auto\",\n            display: callLayoutoNCE ? \"none\" : \"block\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 7\n    }, this), allowCropAllCanvas ? /*#__PURE__*/_jsxDEV(\"canvas\", {\n      className: darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\",\n      ref: canvasRef,\n      style: {\n        display: callLayoutoNCE ? \"block\" : \"none\",\n        padding: \"0px\",\n        marginTop: index === 0 || index === 1 || index === 2 ? \"0px\" : \"-5px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true);\n}\n\n_s(PreviewCanvasCropAllx, \"RjLUITeDnop0qsA4369lWmqRiUI=\", false, function () {\n  return [useSelector];\n});\n\n_c = PreviewCanvasCropAllx;\nexport const PreviewCanvasCropAll = /*#__PURE__*/React.memo(PreviewCanvasCropAllx);\n_c2 = PreviewCanvasCropAll;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PreviewCanvasCropAllx\");\n$RefreshReg$(_c2, \"PreviewCanvasCropAll\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/upload/PreviewCanvasCropAll.tsx"],"names":["React","useRef","useState","useLayoutEffect","useCallback","Grid","useSelector","PreviewCanvasCropAllx","setwaitONLOAD","cropCanvasRef","image","getpreviewFixedWidth","index","CropImageHolder","cropheight","cropwidth","BoxCropActivated","hdcanvasvalue","SourceWidthForCropX","SourceWidthForCropY","WideImageCheck","crop","getCropHeight","canvasToimage","refWithimageData","addUploadItemsRef","itemUploadRef","setsuperCropLoadFade","length","filterImage","setfilterImage","setallowFilters","allowCropAllCanvas","cutOffLoader","setcutOffLoader","darkmode","state","GlobalReducer","darkmodeReducer","canvasRef","previewFilehold","setpreviewFilehold","previewCSSHeight","setpreviewCSSHeight","cropCanvasWidth","setcropCanvasWidth","cropCanvasHeight","setcropCanvasHeight","Timer1","Timer2","imageWidthWithAspectRatio","setimageWidthWithAspectRatio","imageWidthWithAspectRatioxx","setimageWidthWithAspectRatioxx","previewFileReadimage","Image","src","onload","current","cropH","cropW","width","height","naturalWidth","naturalHeight","Ratio1500","height1500","width1500","CropAspectRatio","newheight","AspectRatioPrevHeightandWidth","newWidth","AspectRatioPrevHeightandWidthx","newWidthx","loader","drawcrop","callcropper","ctx","getContext","newheightq","zoomINBOXWide","AspectRatioPrevHeightandWidthxWideCRop","boxWIDEheight","centerpreview","dragDistanceX","cropXprev","x","RatiofromOriginalandfixedHeight","SourceWidthForCropXx","requestAnimationFrame","drawImage","AspectRatioPrevHeightandWidthxBox","boxedHeight","dragDistanceY","cropYprev","y","style","xtraZoom","centerpreview2","jj","callLayoutoNCE","setcallLayoutoNCE","setTimeout","toDataURL","newArraa","position","margin","display","padding","marginTop","PreviewCanvasCropAll","memo"],"mappings":"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","sourcesContent":["import React, {\r\n  useRef,\r\n  useState,\r\n  useEffect,\r\n  useLayoutEffect,\r\n  useCallback,\r\n} from \"react\";\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport Cropper from \"react-easy-crop\";\r\nimport MusicNoteIcon from \"@mui/icons-material/MusicNote\";\r\nimport PhotoIcon from \"@mui/icons-material/Photo\";\r\nimport GifIcon from \"@mui/icons-material/Gif\";\r\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\r\nimport Slider from \"@mui/material/Slider\";\r\nimport { AnySoaRecord } from \"dns\";\r\n\r\nfunction PreviewCanvasCropAllx({\r\n  setwaitONLOAD,\r\n  cropCanvasRef,\r\n  image,\r\n  getpreviewFixedWidth,\r\n  index,\r\n  CropImageHolder,\r\n  cropheight,\r\n  cropwidth,\r\n  BoxCropActivated,\r\n  hdcanvasvalue,\r\n  SourceWidthForCropX,\r\n  SourceWidthForCropY,\r\n  WideImageCheck,\r\n  crop,\r\n  getCropHeight,\r\n  canvasToimage,\r\n  refWithimageData,\r\n  addUploadItemsRef,\r\n  itemUploadRef,\r\n  setsuperCropLoadFade,\r\n  length,\r\n  filterImage,\r\n  setfilterImage,\r\n  setallowFilters,\r\n  allowCropAllCanvas,\r\n  cutOffLoader,\r\n  setcutOffLoader,\r\n}: any): JSX.Element {\r\n  ///\r\n  ///\r\n  ///DARKMODE FROM REDUX\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n\r\n  const darkmodeReducer = darkmode;\r\n\r\n  const canvasRef: any = useRef(null);\r\n\r\n  const [previewFilehold, setpreviewFilehold] = useState<any>(null);\r\n\r\n  const [previewCSSHeight, setpreviewCSSHeight] = useState<any>(null);\r\n\r\n  const [cropCanvasWidth, setcropCanvasWidth] = useState<any>(null);\r\n\r\n  const [cropCanvasHeight, setcropCanvasHeight] = useState<any>(null);\r\n\r\n  const Timer1 = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n\r\n  const Timer2 = useRef<ReturnType<typeof setTimeout> | null>(null);\r\n\r\n  const [imageWidthWithAspectRatio, setimageWidthWithAspectRatio] =\r\n    useState<any>(null);\r\n\r\n  const [imageWidthWithAspectRatioxx, setimageWidthWithAspectRatioxx] =\r\n    useState<any>(null);\r\n\r\n  useLayoutEffect(() => {\r\n    const previewFileReadimage = new Image();\r\n    previewFileReadimage.src = image;\r\n    previewFileReadimage.onload = function () {\r\n      if (cropCanvasRef.current) {\r\n        setpreviewFilehold(previewFileReadimage);\r\n\r\n        var cropH, cropW;\r\n        if (CropImageHolder) {\r\n          cropW = cropCanvasRef.current.width;\r\n          cropH = cropCanvasRef.current.height;\r\n        } else {\r\n          cropW = previewFileReadimage.naturalWidth;\r\n          cropH = previewFileReadimage.naturalHeight;\r\n        }\r\n\r\n        if (cropW > cropH) {\r\n          var Ratio1500 = cropW / 1500;\r\n          var height1500 = cropH / Ratio1500;\r\n\r\n          setcropCanvasWidth(1500);\r\n          setcropCanvasHeight(height1500);\r\n        } else {\r\n          var Ratio1500 = cropH / 1500;\r\n          var width1500 = cropW / Ratio1500;\r\n\r\n          setcropCanvasWidth(width1500);\r\n          setcropCanvasHeight(1500);\r\n        }\r\n\r\n        let CropAspectRatio = cropwidth / cropheight;\r\n        let newheight = getpreviewFixedWidth / CropAspectRatio;\r\n        setpreviewCSSHeight(newheight);\r\n\r\n        let AspectRatioPrevHeightandWidth =\r\n          previewFileReadimage.naturalHeight /\r\n          previewFileReadimage.naturalWidth;\r\n        let newWidth = cropCanvasHeight / AspectRatioPrevHeightandWidth;\r\n        setimageWidthWithAspectRatio(newWidth);\r\n\r\n        let AspectRatioPrevHeightandWidthx = cropCanvasWidth / cropCanvasHeight;\r\n        let newWidthx = getpreviewFixedWidth / AspectRatioPrevHeightandWidthx;\r\n        setimageWidthWithAspectRatioxx(newWidthx);\r\n      }\r\n    };\r\n  }, [\r\n    image,\r\n    BoxCropActivated,\r\n    previewCSSHeight,\r\n    getpreviewFixedWidth,\r\n    cropCanvasRef,\r\n    CropImageHolder,\r\n    cropwidth,\r\n    cropheight,\r\n    crop,\r\n  ]);\r\n\r\n  const loader = () => {};\r\n\r\n  const drawcrop = useCallback(() => {\r\n    async function callcropper() {\r\n      if (previewFilehold && canvasRef.current) {\r\n        const ctx = canvasRef.current.getContext(\"2d\");\r\n\r\n        canvasRef.current.height = cropCanvasHeight;\r\n        canvasRef.current.width = cropCanvasWidth;\r\n\r\n        if (BoxCropActivated) {\r\n          var CropAspectRatio = cropCanvasWidth / cropCanvasHeight;\r\n          var newheightq = getpreviewFixedWidth / CropAspectRatio;\r\n\r\n          if (previewFilehold.naturalWidth > previewFilehold.naturalHeight) {\r\n            var zoomINBOXWide =\r\n              previewFilehold.naturalWidth / previewFilehold.naturalHeight;\r\n\r\n            let AspectRatioPrevHeightandWidthxWideCRop =\r\n              previewFilehold.naturalWidth / previewFilehold.naturalHeight;\r\n            let boxWIDEheight =\r\n              (cropCanvasWidth * zoomINBOXWide) /\r\n              AspectRatioPrevHeightandWidthxWideCRop;\r\n\r\n            var centerpreview =\r\n              canvasRef.current.width / 2 -\r\n              (cropCanvasWidth * zoomINBOXWide) / 2;\r\n\r\n            var dragDistanceX =\r\n              cropCanvasWidth * zoomINBOXWide - cropCanvasWidth;\r\n            var cropXprev = crop.x;\r\n\r\n            var RatiofromOriginalandfixedHeight =\r\n              (previewFilehold.naturalHeight / cropCanvasWidth) * zoomINBOXWide;\r\n            var SourceWidthForCropXx =\r\n              previewFilehold.naturalWidth / RatiofromOriginalandfixedHeight;\r\n\r\n            cropXprev =\r\n              (cropXprev * cropCanvasWidth * zoomINBOXWide) /\r\n              SourceWidthForCropX;\r\n\r\n            if (cropXprev < -dragDistanceX) {\r\n              cropXprev = -dragDistanceX;\r\n            } else if (cropXprev > 0) {\r\n              cropXprev = 0;\r\n            } else {\r\n            }\r\n\r\n            ////////////////////\r\n\r\n            requestAnimationFrame(async () => {\r\n              ctx.drawImage(\r\n                previewFilehold,\r\n                WideImageCheck ? cropXprev : 0,\r\n                0,\r\n                cropCanvasWidth * zoomINBOXWide,\r\n                boxWIDEheight\r\n              );\r\n            });\r\n\r\n            ////////////////////\r\n          } else {\r\n            let AspectRatioPrevHeightandWidthxBox =\r\n              previewFilehold.naturalWidth / previewFilehold.naturalHeight;\r\n            let boxedHeight =\r\n              cropCanvasWidth / AspectRatioPrevHeightandWidthxBox;\r\n\r\n            var dragDistanceY = boxedHeight - cropCanvasHeight;\r\n\r\n            var cropYprev = crop.y;\r\n\r\n            cropYprev = (cropYprev * boxedHeight) / SourceWidthForCropY;\r\n\r\n            if (cropYprev < -dragDistanceY) {\r\n              cropYprev = -dragDistanceY;\r\n            } else if (cropYprev > 0) {\r\n              cropYprev = 0;\r\n            } else {\r\n            }\r\n\r\n            ////////////////////\r\n\r\n            requestAnimationFrame(async () => {\r\n              ctx.drawImage(\r\n                previewFilehold,\r\n                0,\r\n                WideImageCheck ? 0 : cropYprev,\r\n                cropCanvasWidth,\r\n                boxedHeight\r\n              );\r\n            });\r\n\r\n            ////////////////////\r\n          }\r\n\r\n          canvasRef.current.style.width = `${getpreviewFixedWidth}px`;\r\n          canvasRef.current.style.height = `${newheightq}px`;\r\n        } else {\r\n          var xtraZoom = cropCanvasWidth / imageWidthWithAspectRatio;\r\n\r\n          var centerpreview =\r\n            canvasRef.current.width / 2 - imageWidthWithAspectRatio / 2;\r\n\r\n          var centerpreview2 =\r\n            canvasRef.current.height / 3 - (cropCanvasHeight * xtraZoom) / 3;\r\n\r\n          if (imageWidthWithAspectRatio < cropCanvasWidth) {\r\n            if (cropCanvasWidth > cropCanvasHeight) {\r\n              ////WIDE IMAGE SOURCE NOT PROPERLY FITTED\r\n\r\n              ////////////////////\r\n\r\n              const jj = await requestAnimationFrame(() => {\r\n                ctx.drawImage(\r\n                  previewFilehold,\r\n                  0,\r\n                  centerpreview2,\r\n                  imageWidthWithAspectRatio * xtraZoom,\r\n                  cropCanvasHeight * xtraZoom\r\n                );\r\n              });\r\n\r\n              ////////////////////\r\n            } else {\r\n              ////LONG IMAGE SOURCE NOT PROPERLY FITTED\r\n\r\n              ////////////////////\r\n\r\n              try {\r\n                const jj = await requestAnimationFrame(() => {\r\n                  ctx.drawImage(\r\n                    previewFilehold,\r\n                    0,\r\n                    0,\r\n                    imageWidthWithAspectRatio * xtraZoom,\r\n                    cropCanvasHeight * xtraZoom\r\n                  );\r\n                });\r\n\r\n                loader();\r\n              } catch {}\r\n              ////////////////////\r\n            }\r\n          } else {\r\n            ////////LONG IMAGE SOURCE WIDE IMAGE SOURCE\r\n\r\n            try {\r\n              const jj = await requestAnimationFrame(() => {\r\n                ctx.drawImage(\r\n                  previewFilehold,\r\n                  centerpreview,\r\n                  0,\r\n                  imageWidthWithAspectRatio,\r\n                  cropCanvasHeight\r\n                );\r\n              });\r\n\r\n              loader();\r\n            } catch {}\r\n\r\n            ////////////////////\r\n          }\r\n          canvasRef.current.style.width = `${getpreviewFixedWidth}px`;\r\n          canvasRef.current.style.height = `${previewCSSHeight}px`;\r\n        }\r\n      }\r\n    }\r\n\r\n    callcropper();\r\n  }, [\r\n    previewFilehold,\r\n    canvasRef,\r\n    CropImageHolder,\r\n    cropCanvasWidth,\r\n    cropCanvasHeight,\r\n    imageWidthWithAspectRatio,\r\n    WideImageCheck,\r\n  ]);\r\n\r\n  const [callLayoutoNCE, setcallLayoutoNCE] = useState<any>(true);\r\n\r\n  useLayoutEffect(() => {\r\n    if (\r\n      canvasToimage &&\r\n      callLayoutoNCE &&\r\n      itemUploadRef.current[index] &&\r\n      canvasRef.current\r\n    ) {\r\n      drawcrop();\r\n      setTimeout(function () {\r\n        itemUploadRef.current[index].src = canvasRef.current.toDataURL();\r\n\r\n        setcallLayoutoNCE(false);\r\n\r\n        ///////////////////////////////\r\n        const newArraa = [...filterImage];\r\n        newArraa[index] = canvasRef.current.toDataURL();\r\n        setfilterImage(newArraa);\r\n        ///////////////////////////////\r\n\r\n        if (length - 1 === index) {\r\n          setsuperCropLoadFade(false);\r\n          setallowFilters(true);\r\n        }\r\n      }, 5000);\r\n    }\r\n  }, [canvasToimage, itemUploadRef, canvasRef]);\r\n\r\n  return (\r\n    <>\r\n      <Grid container>\r\n        <Grid xs={12} item>\r\n          <img\r\n            ref={addUploadItemsRef}\r\n            style={{\r\n              width: \"100%\",\r\n              height: \"auto\",\r\n              position: \"relative\",\r\n              margin: \"auto\",\r\n              display: callLayoutoNCE ? \"none\" : \"block\",\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {allowCropAllCanvas ? (\r\n        <canvas\r\n          className={\r\n            darkmodeReducer ? \"turlightpostdarkx\" : \"turlightpostlightx\"\r\n          }\r\n          ref={canvasRef}\r\n          style={{\r\n            display: callLayoutoNCE ? \"block\" : \"none\",\r\n\r\n            padding: \"0px\",\r\n            marginTop:\r\n              index === 0 || index === 1 || index === 2 ? \"0px\" : \"-5px\",\r\n          }}\r\n        />\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport const PreviewCanvasCropAll = React.memo(PreviewCanvasCropAllx);\r\n"]},"metadata":{},"sourceType":"module"}