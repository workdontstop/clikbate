{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\log\\\\PasswordCheck.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback } from \"react\";\nimport { TextField, DialogContent } from \"@material-ui/core\";\nimport { matchPc, matchTablet } from \"../DetectDevice\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction PasswordCheckx({\n  widthHolder,\n  checkSignupPassword,\n  setcheckSignupPassword,\n  checkSignupPasswordACTIVATE,\n  setcheckSignupPasswordACTIVATE\n}) {\n  _s();\n\n  ///\n  ///\n  ///\n  /// GET DARKMODE FROM REDUX STORE\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode; /////\n\n  var sizex = undefined;\n  var font1 = \" \";\n  var font2 = \" \";\n  var transform = \"\";\n  var widthcheckPassword = \"\";\n  var heighttt = \" \";\n  var positionn = \"\";\n  var bottomm = \"\"; ///////\n\n  if (matchPc) {\n    var heighttt = \"100vh\";\n    sizex = \"medium\";\n    font1 = \"2.7vh\";\n    font2 = \"1.9vh\";\n    transform = \"scale(1)\";\n    widthcheckPassword = widthHolder;\n    positionn = \"\";\n    bottomm = \"\";\n  } else if (matchTablet) {\n    var heighttt = \"95.2vh\";\n    sizex = \"small\";\n    font1 = \"2.6vh\";\n    font2 = \"2vh\";\n    transform = \"scale(1)\";\n    widthcheckPassword = \"62%\";\n    positionn = \"fixed\";\n    bottomm = \"0em\";\n  } else {\n    var heighttt = \"95.2vh\";\n    sizex = \"small\";\n    font1 = \"\";\n    font2 = \"\";\n    transform = \"scale(0.93)\";\n    widthcheckPassword = \"100%\";\n    positionn = \"fixed\";\n    bottomm = \"0em\";\n  } ///\n  ///\n  ///\n  /// SANITISE LOG IN FORM INPUT CLIENT SIDE\n\n\n  const updatecheckSignupPasswordvalues = useCallback(e => {\n    const {\n      value\n    } = e.target;\n    setcheckSignupPassword(value);\n  }, [checkSignupPassword]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: checkSignupPasswordACTIVATE ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(DialogContent, {\n        className: darkmodeReducer ? \"mobileTextfield-backplate dontallowhighlighting  mobileTextfield-backplateColorDark\" : \"mobileTextfield-backplate dontallowhighlighting  mobileTextfield-backplateColorLight\",\n        style: {\n          zIndex: 12,\n          display: \"block\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        size: sizex,\n        inputProps: {\n          style: {\n            fontSize: font1\n          }\n        },\n        InputLabelProps: {\n          style: {\n            fontSize: font2\n          }\n        },\n        style: {\n          transform: transform,\n          width: widthcheckPassword,\n          position: \"relative\",\n          height: \"10em\",\n          bottom: \"2em\",\n          zIndex: 14\n        },\n        label: \"Confirm Password\",\n        type: \"text\",\n        onChange: updatecheckSignupPasswordvalues,\n        name: \"inputedUsername\",\n        value: checkSignupPassword,\n        variant: \"standard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : null\n  }, void 0, false);\n}\n\n_s(PasswordCheckx, \"MdkyX1tX9W0iX/UuV0CHhUfaeuw=\", false, function () {\n  return [useSelector];\n});\n\n_c = PasswordCheckx;\nexport const PasswordCheck = /*#__PURE__*/React.memo(PasswordCheckx);\n_c2 = PasswordCheck;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PasswordCheckx\");\n$RefreshReg$(_c2, \"PasswordCheck\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/log/PasswordCheck.tsx"],"names":["React","useCallback","TextField","DialogContent","matchPc","matchTablet","useSelector","PasswordCheckx","widthHolder","checkSignupPassword","setcheckSignupPassword","checkSignupPasswordACTIVATE","setcheckSignupPasswordACTIVATE","darkmode","state","GlobalReducer","darkmodeReducer","sizex","undefined","font1","font2","transform","widthcheckPassword","heighttt","positionn","bottomm","updatecheckSignupPasswordvalues","e","value","target","zIndex","display","style","fontSize","width","position","height","bottom","PasswordCheck","memo"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\r\n\r\nimport {\r\n  IconButton,\r\n  InputAdornment,\r\n  TextField,\r\n  DialogContent,\r\n} from \"@material-ui/core\";\r\nimport VisibilityOffIcon from \"@material-ui/icons/VisibilityOff\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\nimport { ItextfIeldLogin } from \"./log-Interfaces\";\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction PasswordCheckx({\r\n  widthHolder,\r\n  checkSignupPassword,\r\n  setcheckSignupPassword,\r\n  checkSignupPasswordACTIVATE,\r\n  setcheckSignupPasswordACTIVATE,\r\n}: any): JSX.Element {\r\n  ///\r\n  ///\r\n  ///\r\n  /// GET DARKMODE FROM REDUX STORE\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n\r\n  const darkmodeReducer = darkmode;\r\n\r\n  /////\r\n  var sizex: \"small\" | \"medium\" | undefined = undefined;\r\n  var font1 = \" \";\r\n  var font2 = \" \";\r\n  var transform = \"\";\r\n  var widthcheckPassword = \"\";\r\n  var heighttt = \" \";\r\n  var positionn: any = \"\";\r\n  var bottomm = \"\";\r\n\r\n  ///////\r\n\r\n  if (matchPc) {\r\n    var heighttt = \"100vh\";\r\n    sizex = \"medium\";\r\n    font1 = \"2.7vh\";\r\n    font2 = \"1.9vh\";\r\n    transform = \"scale(1)\";\r\n    widthcheckPassword = widthHolder;\r\n    positionn = \"\";\r\n    bottomm = \"\";\r\n  } else if (matchTablet) {\r\n    var heighttt = \"95.2vh\";\r\n    sizex = \"small\";\r\n    font1 = \"2.6vh\";\r\n    font2 = \"2vh\";\r\n    transform = \"scale(1)\";\r\n    widthcheckPassword = \"62%\";\r\n    positionn = \"fixed\";\r\n    bottomm = \"0em\";\r\n  } else {\r\n    var heighttt = \"95.2vh\";\r\n    sizex = \"small\";\r\n    font1 = \"\";\r\n    font2 = \"\";\r\n    transform = \"scale(0.93)\";\r\n    widthcheckPassword = \"100%\";\r\n    positionn = \"fixed\";\r\n    bottomm = \"0em\";\r\n  }\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// SANITISE LOG IN FORM INPUT CLIENT SIDE\r\n  const updatecheckSignupPasswordvalues = useCallback(\r\n    (e: any) => {\r\n      const { value } = e.target;\r\n      setcheckSignupPassword(value);\r\n    },\r\n\r\n    [checkSignupPassword]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {checkSignupPasswordACTIVATE ? (\r\n        <>\r\n          <DialogContent\r\n            className={\r\n              darkmodeReducer\r\n                ? \"mobileTextfield-backplate dontallowhighlighting  mobileTextfield-backplateColorDark\"\r\n                : \"mobileTextfield-backplate dontallowhighlighting  mobileTextfield-backplateColorLight\"\r\n            }\r\n            style={{ zIndex: 12, display: \"block\" }}\r\n          ></DialogContent>\r\n\r\n          <TextField\r\n            size={sizex}\r\n            inputProps={{ style: { fontSize: font1 } }}\r\n            InputLabelProps={{ style: { fontSize: font2 } }}\r\n            style={{\r\n              transform: transform,\r\n              width: widthcheckPassword,\r\n              position: \"relative\",\r\n              height: \"10em\",\r\n              bottom: \"2em\",\r\n              zIndex: 14,\r\n            }}\r\n            label=\"Confirm Password\"\r\n            type=\"text\"\r\n            onChange={updatecheckSignupPasswordvalues}\r\n            name=\"inputedUsername\"\r\n            value={checkSignupPassword}\r\n            variant=\"standard\"\r\n          />\r\n        </>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport const PasswordCheck = React.memo(PasswordCheckx);\r\n"]},"metadata":{},"sourceType":"module"}