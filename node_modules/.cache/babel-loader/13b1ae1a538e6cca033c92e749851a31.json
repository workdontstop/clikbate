{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\log\\\\TextFieldLogin.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { IconButton, InputAdornment, TextField } from \"@material-ui/core\";\nimport VisibilityOffIcon from \"@material-ui/icons/VisibilityOff\";\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\nimport { DialogContent } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction TextFieldLoginx({\n  updateLoginvalues,\n  rawLoginValues,\n  ShowLoginPasswordForaWhile,\n  loginShowPassword,\n  size,\n  passwordType,\n  withHolder,\n  focus,\n  setFocus\n}) {\n  _s();\n\n  var width = \" \";\n  var sizex = undefined;\n  var zIndex = 0;\n  var zindexU = 0;\n  var zindexBackPlateU = 0;\n  var displayBackPlateU = \"none\";\n  var zindexBackPlateP = 0;\n  var displayBackPlateP = \"none\";\n\n  switch (size) {\n    case \"small\":\n      sizex = \"small\";\n      width = \"100%\";\n      var transform = \"scale(0.94)\";\n      zIndex = 0;\n      var font1 = \"\";\n      var font2 = \"\";\n      var paddingbutU = \"90px\";\n      break;\n\n    case \"smallTablet\":\n      sizex = \"small\";\n      width = \"62%\";\n      var transform = \"scale(1)\";\n      zIndex = 0;\n      var font1 = \"2.6vh\";\n      var font2 = \"2vh\";\n      var paddingbutU = \"100px\";\n      break;\n\n    default:\n      sizex = \"medium\";\n      width = withHolder;\n      var transform = \"scale(1)\";\n      zIndex = 1;\n      var font1 = \"2.7vh\";\n      var font2 = \"1.9vh\";\n      var paddingbutU = \"70px\";\n  }\n\n  if (size == \"small\" || size === \"smallTablet\") {\n    if (passwordType) {\n      if (focus) {\n        zIndex = 15;\n        zindexBackPlateP = 12;\n        displayBackPlateP = \"block\";\n      } else {\n        zIndex = 1;\n        zindexBackPlateP = 0;\n        displayBackPlateP = \"none\";\n      }\n    } else {\n      if (focus) {\n        zindexU = 15;\n        zindexBackPlateU = 12;\n        displayBackPlateU = \"block\";\n      } else {\n        zindexU = 0;\n        zindexBackPlateU = 0;\n        displayBackPlateU = \"none\";\n      }\n    }\n  } ///\n  ///\n  ///\n  /// GET DARKMODE FROM REDUX STORE\n\n\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n\n  const focusTextfield = a => {\n    if (size == \"small\" || size === \"smallTablet\") {\n      if (a === 1) {\n        setFocus(true);\n      } else {\n        setFocus(false);\n      }\n    }\n  };\n\n  var TextFieldOpacity = \"1\";\n\n  if (darkmodeReducer) {\n    if (focus) {\n      TextFieldOpacity = \"1\";\n    } else {\n      TextFieldOpacity = \"0.8\";\n    }\n  } else {\n    TextFieldOpacity = \"1\";\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: passwordType ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\" \", /*#__PURE__*/_jsxDEV(DialogContent, {\n        className: darkmodeReducer ? \"mobileTextfield-backplate dontallowhighlighting mobileTextfield-backplateColorDark\" : \"mobileTextfield-backplate dontallowhighlighting  mobileTextfield-backplateColorLight\",\n        style: {\n          zIndex: zindexBackPlateP,\n          display: displayBackPlateP\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        onFocus: () => focusTextfield(1),\n        onBlur: () => focusTextfield(0),\n        size: sizex,\n        inputProps: {\n          style: {\n            fontSize: font1\n          }\n        },\n        InputLabelProps: {\n          style: {\n            fontSize: font2\n          }\n        },\n        style: {\n          transform: transform,\n          width: width,\n          paddingBottom: \"40px\",\n          zIndex: zIndex,\n          opacity: TextFieldOpacity\n        },\n        label: \"Password\",\n        onChange: updateLoginvalues,\n        type: loginShowPassword ? \"text\" : \"password\",\n        name: \"inputedPassword\",\n        value: rawLoginValues.inputedPassword,\n        variant: \"standard\",\n        InputProps: {\n          endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n            position: \"end\",\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              onMouseDown: ShowLoginPasswordForaWhile,\n              \"aria-label\": \"toggle password visibility\",\n              children: loginShowPassword ? /*#__PURE__*/_jsxDEV(VisibilityIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(VisibilityOffIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 17\n          }, this)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(DialogContent, {\n        className: darkmodeReducer ? \"mobileTextfield-backplate dontallowhighlighting  mobileTextfield-backplateColorDark\" : \"mobileTextfield-backplate dontallowhighlighting  mobileTextfield-backplateColorLight\",\n        style: {\n          zIndex: zindexBackPlateU,\n          display: displayBackPlateU\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        onFocus: () => focusTextfield(1),\n        onBlur: () => focusTextfield(0),\n        size: sizex,\n        inputProps: {\n          style: {\n            fontSize: font1\n          }\n        },\n        InputLabelProps: {\n          style: {\n            fontSize: font2\n          }\n        },\n        style: {\n          transform: transform,\n          width: width,\n          paddingBottom: paddingbutU,\n          zIndex: zindexU,\n          opacity: TextFieldOpacity\n        },\n        label: \"Username\",\n        margin: \"normal\",\n        type: \"text\",\n        onChange: updateLoginvalues,\n        name: \"inputedUsername\",\n        value: rawLoginValues.inputedUsername,\n        variant: \"standard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false);\n}\n\n_s(TextFieldLoginx, \"pyUiayCCYEIzD5+dG/9/J7hvlxI=\", false, function () {\n  return [useSelector];\n});\n\n_c = TextFieldLoginx;\nexport const TextFieldLogin = /*#__PURE__*/React.memo(TextFieldLoginx);\n_c2 = TextFieldLogin;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TextFieldLoginx\");\n$RefreshReg$(_c2, \"TextFieldLogin\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/log/TextFieldLogin.tsx"],"names":["React","IconButton","InputAdornment","TextField","VisibilityOffIcon","VisibilityIcon","DialogContent","useSelector","TextFieldLoginx","updateLoginvalues","rawLoginValues","ShowLoginPasswordForaWhile","loginShowPassword","size","passwordType","withHolder","focus","setFocus","width","sizex","undefined","zIndex","zindexU","zindexBackPlateU","displayBackPlateU","zindexBackPlateP","displayBackPlateP","transform","font1","font2","paddingbutU","darkmode","state","GlobalReducer","darkmodeReducer","focusTextfield","a","TextFieldOpacity","display","style","fontSize","paddingBottom","opacity","inputedPassword","endAdornment","inputedUsername","TextFieldLogin","memo"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport { IconButton, InputAdornment, TextField } from \"@material-ui/core\";\r\nimport VisibilityOffIcon from \"@material-ui/icons/VisibilityOff\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\nimport { ItextfIeldLogin } from \"./log-Interfaces\";\r\n\r\nimport { DialogContent, Button, Paper, Grid } from \"@material-ui/core\";\r\nimport { RootStateOrAny, useSelector, useDispatch } from \"react-redux\";\r\n\r\nfunction TextFieldLoginx({\r\n  updateLoginvalues,\r\n  rawLoginValues,\r\n  ShowLoginPasswordForaWhile,\r\n  loginShowPassword,\r\n  size,\r\n  passwordType,\r\n  withHolder,\r\n  focus,\r\n  setFocus,\r\n}: ItextfIeldLogin): JSX.Element {\r\n  var width = \" \";\r\n  var sizex: \"small\" | \"medium\" | undefined = undefined;\r\n\r\n  var zIndex = 0;\r\n  var zindexU = 0;\r\n  var zindexBackPlateU = 0;\r\n  var displayBackPlateU = \"none\";\r\n  var zindexBackPlateP = 0;\r\n  var displayBackPlateP = \"none\";\r\n\r\n  switch (size) {\r\n    case \"small\":\r\n      sizex = \"small\";\r\n      width = \"100%\";\r\n      var transform = \"scale(0.94)\";\r\n      zIndex = 0;\r\n      var font1 = \"\";\r\n      var font2 = \"\";\r\n      var paddingbutU = \"90px\";\r\n\r\n      break;\r\n    case \"smallTablet\":\r\n      sizex = \"small\";\r\n      width = \"62%\";\r\n      var transform = \"scale(1)\";\r\n      zIndex = 0;\r\n      var font1 = \"2.6vh\";\r\n      var font2 = \"2vh\";\r\n      var paddingbutU = \"100px\";\r\n      break;\r\n    default:\r\n      sizex = \"medium\";\r\n      width = withHolder;\r\n      var transform = \"scale(1)\";\r\n      zIndex = 1;\r\n      var font1 = \"2.7vh\";\r\n      var font2 = \"1.9vh\";\r\n      var paddingbutU = \"70px\";\r\n  }\r\n\r\n  if (size == \"small\" || size === \"smallTablet\") {\r\n    if (passwordType) {\r\n      if (focus) {\r\n        zIndex = 15;\r\n        zindexBackPlateP = 12;\r\n        displayBackPlateP = \"block\";\r\n      } else {\r\n        zIndex = 1;\r\n        zindexBackPlateP = 0;\r\n        displayBackPlateP = \"none\";\r\n      }\r\n    } else {\r\n      if (focus) {\r\n        zindexU = 15;\r\n        zindexBackPlateU = 12;\r\n        displayBackPlateU = \"block\";\r\n      } else {\r\n        zindexU = 0;\r\n        zindexBackPlateU = 0;\r\n        displayBackPlateU = \"none\";\r\n      }\r\n    }\r\n  }\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// GET DARKMODE FROM REDUX STORE\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n\r\n  const darkmodeReducer = darkmode;\r\n\r\n  const focusTextfield = (a: number) => {\r\n    if (size == \"small\" || size === \"smallTablet\") {\r\n      if (a === 1) {\r\n        setFocus(true);\r\n      } else {\r\n        setFocus(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  var TextFieldOpacity = \"1\";\r\n  if (darkmodeReducer) {\r\n    if (focus) {\r\n      TextFieldOpacity = \"1\";\r\n    } else {\r\n      TextFieldOpacity = \"0.8\";\r\n    }\r\n  } else {\r\n    TextFieldOpacity = \"1\";\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {passwordType ? (\r\n        <>\r\n          {\" \"}\r\n          <DialogContent\r\n            className={\r\n              darkmodeReducer\r\n                ? \"mobileTextfield-backplate dontallowhighlighting mobileTextfield-backplateColorDark\"\r\n                : \"mobileTextfield-backplate dontallowhighlighting  mobileTextfield-backplateColorLight\"\r\n            }\r\n            style={{ zIndex: zindexBackPlateP, display: displayBackPlateP }}\r\n          ></DialogContent>\r\n          <TextField\r\n            onFocus={() => focusTextfield(1)}\r\n            onBlur={() => focusTextfield(0)}\r\n            size={sizex}\r\n            inputProps={{ style: { fontSize: font1 } }}\r\n            InputLabelProps={{ style: { fontSize: font2 } }}\r\n            style={{\r\n              transform: transform,\r\n              width: width,\r\n              paddingBottom: \"40px\",\r\n              zIndex: zIndex,\r\n              opacity: TextFieldOpacity,\r\n            }}\r\n            label=\"Password\"\r\n            onChange={updateLoginvalues}\r\n            type={loginShowPassword ? \"text\" : \"password\"}\r\n            name=\"inputedPassword\"\r\n            value={rawLoginValues.inputedPassword}\r\n            variant=\"standard\"\r\n            InputProps={{\r\n              endAdornment: (\r\n                <InputAdornment position=\"end\">\r\n                  <IconButton\r\n                    onMouseDown={ShowLoginPasswordForaWhile}\r\n                    aria-label=\"toggle password visibility\"\r\n                  >\r\n                    {loginShowPassword ? (\r\n                      <VisibilityIcon />\r\n                    ) : (\r\n                      <VisibilityOffIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n        </>\r\n      ) : (\r\n        <>\r\n          <DialogContent\r\n            className={\r\n              darkmodeReducer\r\n                ? \"mobileTextfield-backplate dontallowhighlighting  mobileTextfield-backplateColorDark\"\r\n                : \"mobileTextfield-backplate dontallowhighlighting  mobileTextfield-backplateColorLight\"\r\n            }\r\n            style={{ zIndex: zindexBackPlateU, display: displayBackPlateU }}\r\n          ></DialogContent>\r\n          <TextField\r\n            onFocus={() => focusTextfield(1)}\r\n            onBlur={() => focusTextfield(0)}\r\n            size={sizex}\r\n            inputProps={{ style: { fontSize: font1 } }}\r\n            InputLabelProps={{ style: { fontSize: font2 } }}\r\n            style={{\r\n              transform: transform,\r\n              width: width,\r\n              paddingBottom: paddingbutU,\r\n              zIndex: zindexU,\r\n              opacity: TextFieldOpacity,\r\n            }}\r\n            label=\"Username\"\r\n            margin=\"normal\"\r\n            type=\"text\"\r\n            onChange={updateLoginvalues}\r\n            name=\"inputedUsername\"\r\n            value={rawLoginValues.inputedUsername}\r\n            variant=\"standard\"\r\n          />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport const TextFieldLogin = React.memo(TextFieldLoginx);\r\n"]},"metadata":{},"sourceType":"module"}