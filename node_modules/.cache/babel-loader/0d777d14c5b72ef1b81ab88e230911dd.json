{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oghen\\\\OneDrive\\\\Documents\\\\ClikBate\\\\super\\\\src\\\\profile\\\\Loader.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Loaderx({\n  sliderLoader,\n  autoSlideDisplay,\n  post\n}) {\n  _s();\n\n  ///\n  ///\n  ///\n  /// GET DARKMODE FROM REDUX STORE\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode; ///\n  ///\n  /// GET COLOR FROM REDUX STORE\n\n  const {\n    color,\n    colordark,\n    colortype\n  } = useSelector(state => ({ ...state.GlobalReducerColor\n  }));\n  const colorReducer = color;\n  const colorReducerdark = colordark;\n  const colortypeReducer = colortype;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      className: darkmodeReducer ? `${sliderLoader} turLight` : `${sliderLoader} turlight`,\n      style: {\n        backgroundColor: post ? post.color1 : colorReducer,\n        height: \"4vh \",\n        position: \"absolute\",\n        display: autoSlideDisplay,\n        zIndex: 100000,\n        top: \"0em\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(Loaderx, \"l9V5GnzgsaHuUpw3fMVpEkusZC4=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = Loaderx;\nexport const Loader = /*#__PURE__*/React.memo(Loaderx);\n_c2 = Loader;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Loaderx\");\n$RefreshReg$(_c2, \"Loader\");","map":{"version":3,"sources":["C:/Users/oghen/OneDrive/Documents/ClikBate/super/src/profile/Loader.tsx"],"names":["React","Grid","useSelector","Loaderx","sliderLoader","autoSlideDisplay","post","darkmode","state","GlobalReducer","darkmodeReducer","color","colordark","colortype","GlobalReducerColor","colorReducer","colorReducerdark","colortypeReducer","backgroundColor","color1","height","position","display","zIndex","top","Loader","memo"],"mappings":";;;AAAA,OAAOA,KAAP,MAAgE,OAAhE;AAIA,SAASC,IAAT,QAAqB,mBAArB;AAEA,SAAyBC,WAAzB,QAA4C,aAA5C;;;;AAIA,SAASC,OAAT,CAAiB;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA,gBAAhB;AAAkCC,EAAAA;AAAlC,CAAjB,EAA6E;AAAA;;AAC3E;AACA;AACA;AACA;AAMA,QAAM;AAAEC,IAAAA;AAAF,MAAeL,WAAW,CAAEM,KAAD,KAAoC,EACnE,GAAGA,KAAK,CAACC;AAD0D,GAApC,CAAD,CAAhC;AAGA,QAAMC,eAAe,GAAGH,QAAxB,CAb2E,CAe3E;AACA;AACA;;AAQA,QAAM;AAAEI,IAAAA,KAAF;AAASC,IAAAA,SAAT;AAAoBC,IAAAA;AAApB,MAAkCX,WAAW,CAChDM,KAAD,KAAmC,EACjC,GAAGA,KAAK,CAACM;AADwB,GAAnC,CADiD,CAAnD;AAKA,QAAMC,YAAY,GAAGJ,KAArB;AACA,QAAMK,gBAAgB,GAAGJ,SAAzB;AACA,QAAMK,gBAAgB,GAAGJ,SAAzB;AAEA,sBACE;AAAA,2BACE,QAAC,IAAD;AACE,MAAA,SAAS,MADX;AAEE,MAAA,SAAS,EACPH,eAAe,GACV,GAAEN,YAAa,WADL,GAEV,GAAEA,YAAa,WALxB;AAOE,MAAA,KAAK,EAAE;AACLc,QAAAA,eAAe,EAAEZ,IAAI,GAAGA,IAAI,CAACa,MAAR,GAAiBJ,YADjC;AAELK,QAAAA,MAAM,EAAE,MAFH;AAGLC,QAAAA,QAAQ,EAAE,UAHL;AAILC,QAAAA,OAAO,EAAEjB,gBAJJ;AAKLkB,QAAAA,MAAM,EAAE,MALH;AAMLC,QAAAA,GAAG,EAAE;AANA;AAPT;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAoBD;;GAtDQrB,O;UAUcD,W,EAemBA,W;;;KAzBjCC,O;AAwDT,OAAO,MAAMsB,MAAM,gBAAGzB,KAAK,CAAC0B,IAAN,CAAWvB,OAAX,CAAf;MAAMsB,M","sourcesContent":["import React, { useState, useRef, useCallback, useEffect } from \"react\";\r\nimport { Arrow } from \"./Arrow\";\r\nimport { Dots } from \"./Dots\";\r\nimport { SliderNumber } from \"./SliderNumber\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { animated, useTransition } from \"react-spring\";\r\nimport { RootStateOrAny, useSelector } from \"react-redux\";\r\nimport { matchMobile, matchPc, matchTablet } from \"../DetectDevice\";\r\nimport ZoomOutIcon from \"@mui/icons-material/ZoomOut\";\r\n\r\nfunction Loaderx({ sliderLoader, autoSlideDisplay, post }: any): JSX.Element {\r\n  ///\r\n  ///\r\n  ///\r\n  /// GET DARKMODE FROM REDUX STORE\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n  const darkmodeReducer = darkmode;\r\n\r\n  ///\r\n  ///\r\n  /// GET COLOR FROM REDUX STORE\r\n  interface RootStateReducerColor {\r\n    GlobalReducerColor: {\r\n      color: string;\r\n      colordark: string;\r\n      colortype: number;\r\n    };\r\n  }\r\n  const { color, colordark, colortype } = useSelector(\r\n    (state: RootStateReducerColor) => ({\r\n      ...state.GlobalReducerColor,\r\n    })\r\n  );\r\n  const colorReducer = color;\r\n  const colorReducerdark = colordark;\r\n  const colortypeReducer = colortype;\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        className={\r\n          darkmodeReducer\r\n            ? `${sliderLoader} turLight`\r\n            : `${sliderLoader} turlight`\r\n        }\r\n        style={{\r\n          backgroundColor: post ? post.color1 : colorReducer,\r\n          height: \"4vh \",\r\n          position: \"absolute\",\r\n          display: autoSlideDisplay,\r\n          zIndex: 100000,\r\n          top: \"0em\",\r\n        }}\r\n      ></Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport const Loader = React.memo(Loaderx);\r\n"]},"metadata":{},"sourceType":"module"}