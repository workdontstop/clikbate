{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\upload\\\\Upload.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { DialogContent } from \"@material-ui/core\";\nimport { useSpring, animated } from \"react-spring\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Uploadx({\n  showModalUpload,\n  closeUploadModal,\n  OpenUploadModal,\n  getSliderWidth\n}) {\n  _s();\n\n  //\n  //\n  //\n  //USE SLIDE DOWN ANIMATION FROM REACT SPRING\n  const animation = useSpring({\n    config: {\n      duration: 600\n    },\n    opacity: showModalUpload ? 1 : 0,\n    transform: showModalUpload ? `translateY(0%)` : `translateY(-100%)`\n  }); ///\n  ///\n  ///\n  /// GET DARKMODE FROM REDUX STORE\n\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n\n  const blank = () => {};\n\n  const {\n    REACT_APP_SUPERSTARZ_URL\n  } = process.env;\n  const [image, setimage] = useState(null);\n  const [imageWidth, setimageWidth] = useState(null);\n  const [imageHeight, setimageHeight] = useState(null);\n  useEffect(() => {\n    const catimage = new Image();\n    catimage.src = \"./z.jpg\";\n\n    catimage.onload = function () {\n      setimage(catimage);\n      setimageWidth(catimage.naturalWidth);\n      setimageHeight(catimage.naturalHeight);\n    };\n  }, [showModalUpload]);\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    if (image && canvasRef.current) {\n      var sourceX = 300;\n      var sourceY = 200;\n      var sourceW = 280;\n      var sourceH = 180;\n      var destW = sourceW;\n      var destH = sourceH;\n      var destX = canvasRef.width / 2 - destW / 2;\n      var destY = canvasRef.height / 2 - destH / 2;\n      const ctx = canvasRef.current.getContext(\"2d\");\n      ctx.fillStyle = \"black\";\n      ctx.fillRect(0, 0, imageWidth + 80, imageHeight + 80);\n      ctx.drawImage(image, 0, 0);\n    }\n  }, [image, canvasRef, imageWidth, imageHeight]); ////canvas control size of both\n  //// fill react  control size of black inner rectangle\n  ////drawimage  control size of actual image\n\n  /***** kkkk \r\n   *   ctx.fillRect(0, 0, imageWidth + 80, imageHeight + 80);\r\n      ctx.drawImage(image, (imageWidth - imageWidth) / 2 + 40, 40);\r\n  <canvas\r\n                  ref={canvasRef}\r\n                  width={`${imageWidth + 80}`}\r\n                  height={`${imageHeight + 80}`}\r\n                />\r\n                  for image with symetrixc black box\r\n      */\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: showModalUpload ? /*#__PURE__*/_jsxDEV(DialogContent, {\n      className: darkmodeReducer ? \"dialog-container  \" : \"dialog-container  \",\n      style: {\n        padding: \"0px\",\n        height: \"100vh\",\n        position: \"fixed\",\n        zIndex: 100\n      },\n      children: /*#__PURE__*/_jsxDEV(animated.div, {\n        style: animation,\n        children: /*#__PURE__*/_jsxDEV(DialogContent, {\n          className: darkmodeReducer ? \" dontallowhighlighting modal-containerDark \" : \" dontallowhighlighting  modal-containerLight \",\n          style: {\n            padding: \"0px\",\n            height: \"100vh\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n              ref: canvasRef,\n              width: `${imageWidth + 80}`,\n              height: `${imageHeight + 80}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this) : null\n  }, void 0, false);\n}\n\n_s(Uploadx, \"4XIvIm2bDVFpbggqwyTwxz3TkyA=\", false, function () {\n  return [useSpring, useSelector];\n});\n\n_c = Uploadx;\nexport const Upload = /*#__PURE__*/React.memo(Uploadx);\n_c2 = Upload;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Uploadx\");\n$RefreshReg$(_c2, \"Upload\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/upload/Upload.tsx"],"names":["React","useRef","useEffect","useState","DialogContent","useSpring","animated","useSelector","Uploadx","showModalUpload","closeUploadModal","OpenUploadModal","getSliderWidth","animation","config","duration","opacity","transform","darkmode","state","GlobalReducer","darkmodeReducer","blank","REACT_APP_SUPERSTARZ_URL","process","env","image","setimage","imageWidth","setimageWidth","imageHeight","setimageHeight","catimage","Image","src","onload","naturalWidth","naturalHeight","canvasRef","current","sourceX","sourceY","sourceW","sourceH","destW","destH","destX","width","destY","height","ctx","getContext","fillStyle","fillRect","drawImage","padding","position","zIndex","Upload","memo"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useCallback, useState } from \"react\";\r\nimport ControlPointDuplicateIcon from \"@mui/icons-material/ControlPointDuplicate\";\r\nimport { Grid, Switch, DialogContent } from \"@material-ui/core\";\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport { OptionsSlider } from \"../profile/OptionsSlider\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport Axios from \"axios\";\r\nimport { isNull } from \"util\";\r\n\r\nfunction Uploadx({\r\n  showModalUpload,\r\n  closeUploadModal,\r\n  OpenUploadModal,\r\n  getSliderWidth,\r\n}: any): JSX.Element {\r\n  //\r\n  //\r\n  //\r\n  //USE SLIDE DOWN ANIMATION FROM REACT SPRING\r\n  const animation = useSpring({\r\n    config: {\r\n      duration: 600,\r\n    },\r\n    opacity: showModalUpload ? 1 : 0,\r\n    transform: showModalUpload ? `translateY(0%)` : `translateY(-100%)`,\r\n  });\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  /// GET DARKMODE FROM REDUX STORE\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n\r\n  const darkmodeReducer = darkmode;\r\n\r\n  const blank = () => {};\r\n\r\n  const { REACT_APP_SUPERSTARZ_URL } = process.env;\r\n\r\n  const [image, setimage] = useState<any>(null);\r\n  const [imageWidth, setimageWidth] = useState<any>(null);\r\n  const [imageHeight, setimageHeight] = useState<any>(null);\r\n\r\n  useEffect(() => {\r\n    const catimage = new Image();\r\n    catimage.src = \"./z.jpg\";\r\n    catimage.onload = function () {\r\n      setimage(catimage);\r\n      setimageWidth(catimage.naturalWidth);\r\n      setimageHeight(catimage.naturalHeight);\r\n    };\r\n  }, [showModalUpload]);\r\n\r\n  const canvasRef: any = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (image && canvasRef.current) {\r\n      var sourceX = 300;\r\n      var sourceY = 200;\r\n      var sourceW = 280;\r\n      var sourceH = 180;\r\n      var destW = sourceW;\r\n      var destH = sourceH;\r\n      var destX = canvasRef.width / 2 - destW / 2;\r\n      var destY = canvasRef.height / 2 - destH / 2;\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n      ctx.fillStyle = \"black\";\r\n      ctx.fillRect(0, 0, imageWidth + 80, imageHeight + 80);\r\n      ctx.drawImage(image, 0, 0);\r\n    }\r\n  }, [image, canvasRef, imageWidth, imageHeight]);\r\n\r\n  ////canvas control size of both\r\n  //// fill react  control size of black inner rectangle\r\n  ////drawimage  control size of actual image\r\n  /***** kkkk \r\n   *   ctx.fillRect(0, 0, imageWidth + 80, imageHeight + 80);\r\n      ctx.drawImage(image, (imageWidth - imageWidth) / 2 + 40, 40);\r\n <canvas\r\n                  ref={canvasRef}\r\n                  width={`${imageWidth + 80}`}\r\n                  height={`${imageHeight + 80}`}\r\n                />\r\n\r\n                for image with symetrixc black box\r\n\r\n    */\r\n\r\n  return (\r\n    <>\r\n      {showModalUpload ? (\r\n        <DialogContent\r\n          className={\r\n            darkmodeReducer ? \"dialog-container  \" : \"dialog-container  \"\r\n          }\r\n          style={{\r\n            padding: \"0px\",\r\n            height: \"100vh\",\r\n            position: \"fixed\",\r\n            zIndex: 100,\r\n          }}\r\n        >\r\n          <animated.div style={animation}>\r\n            <DialogContent\r\n              className={\r\n                darkmodeReducer\r\n                  ? \" dontallowhighlighting modal-containerDark \"\r\n                  : \" dontallowhighlighting  modal-containerLight \"\r\n              }\r\n              style={{\r\n                padding: \"0px\",\r\n                height: \"100vh\",\r\n              }}\r\n            >\r\n              <div>\r\n                <canvas\r\n                  ref={canvasRef}\r\n                  width={`${imageWidth + 80}`}\r\n                  height={`${imageHeight + 80}`}\r\n                />\r\n              </div>\r\n            </DialogContent>\r\n          </animated.div>\r\n        </DialogContent>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport const Upload = React.memo(Uploadx);\r\n"]},"metadata":{},"sourceType":"module"}