{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\King\\\\Desktop\\\\batcave\\\\superstarztype\\\\src\\\\upload\\\\FilterMode.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from \"react\";\nimport { matchPc, matchTablet } from \"../DetectDevice\";\nimport { Grid } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { useSpring, animated } from \"react-spring\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction FilterModex({\n  filterImage,\n  selectedImage,\n  itemUploadRef,\n  setActivatefilterImage\n}) {\n  _s();\n\n  ///\n  ///\n  ///DARKMODE FROM REDUX\n  const {\n    darkmode\n  } = useSelector(state => ({ ...state.GlobalReducer\n  }));\n  const darkmodeReducer = darkmode;\n  const originalfilterImageRef = useRef(null);\n  const [ShowHideNegativeValue, setShowHideNegativeValue] = useState(\"-\"); ///\n  ///\n  ///\n  ///CREATE OPTIONS SLIDER ANIMATION WITH  REACT SPRING\n\n  const modalanimation = useSpring({\n    config: {\n      mass: 1,\n      tension: 120,\n      friction: 14\n    },\n    transform: `translateX(${ShowHideNegativeValue}${translate}px)`,\n    transition: transitionFast ? \"0s\" : \"0.15s\",\n    height: \"auto\",\n    display: \"flex\",\n    width: `auto`,\n    padding: \"0px\",\n    margin: \"auto\",\n    paddingLeft: typeTop ? matchPc ? \"0px\" : matchTablet ? \"22px\" : \"9px\" : \"0px\"\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: selectedImage ? /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      className: darkmodeReducer ? `optionsTop-background-dark ` : `optionsTop-background-light `,\n      style: {\n        zIndex: 1,\n        padding: \"0px\",\n        position: \"relative\",\n        margin: \"0 auto\",\n        overflow: \"hidden\",\n        left: \"0px\",\n        height: \"auto\",\n        paddingBottom: \"1px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(animated.div, {\n        ref: originalfilterImageRef,\n        style: modalanimation,\n        children: selectedImage.map((imagee, index) => {\n          /*#__PURE__*/\n          _jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              id: itemUploadRef.current[index],\n              src: itemUploadRef.current[index] ? itemUploadRef.current[index].src : null,\n              style: {\n                width: \"30%\",\n                height: \"auto\",\n                position: \"relative\",\n                margin: \"auto\",\n                marginRight: index === 0 ? \"20px\" : \"0px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this) : null\n  }, void 0, false);\n}\n\n_s(FilterModex, \"bx+v7yR2k97SzGQP2z/Crr/EF3E=\", false, function () {\n  return [useSelector, useSpring];\n});\n\n_c = FilterModex;\nexport const FilterMode = /*#__PURE__*/React.memo(FilterModex);\n_c2 = FilterMode;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FilterModex\");\n$RefreshReg$(_c2, \"FilterMode\");","map":{"version":3,"sources":["C:/Users/King/Desktop/batcave/superstarztype/src/upload/FilterMode.tsx"],"names":["React","useRef","useState","matchPc","matchTablet","Grid","useSelector","useSpring","animated","FilterModex","filterImage","selectedImage","itemUploadRef","setActivatefilterImage","darkmode","state","GlobalReducer","darkmodeReducer","originalfilterImageRef","ShowHideNegativeValue","setShowHideNegativeValue","modalanimation","config","mass","tension","friction","transform","translate","transition","transitionFast","height","display","width","padding","margin","paddingLeft","typeTop","zIndex","position","overflow","left","paddingBottom","map","imagee","index","current","src","marginRight","FilterMode","memo"],"mappings":"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","sourcesContent":["import React, {\r\n  useRef,\r\n  useState,\r\n  useCallback,\r\n  useEffect,\r\n  useLayoutEffect,\r\n} from \"react\";\r\nimport { matchPc, matchTablet } from \"../DetectDevice\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Masonry from \"@mui/lab/Masonry\";\r\nimport CircleIcon from \"@mui/icons-material/Circle\";\r\nimport { SuperCrop } from \"./SuperCrop\";\r\nimport MusicNoteIcon from \"@mui/icons-material/MusicNote\";\r\nimport PhotoIcon from \"@mui/icons-material/Photo\";\r\nimport GifIcon from \"@mui/icons-material/Gif\";\r\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\r\nimport Axios from \"axios\";\r\nimport CropIcon from \"@mui/icons-material/Crop\";\r\nimport CheckIcon from \"@mui/icons-material/Check\";\r\nimport { PreviewCanvasCropAll } from \"./PreviewCanvasCropAll\";\r\nimport { ImageTobeFiltered } from \"./ImageTobeFiltered\";\r\n\r\nfunction FilterModex({\r\n  filterImage,\r\n  selectedImage,\r\n  itemUploadRef,\r\n  setActivatefilterImage,\r\n}: any): JSX.Element {\r\n  ///\r\n  ///\r\n  ///DARKMODE FROM REDUX\r\n  interface RootStateGlobalReducer {\r\n    GlobalReducer: {\r\n      darkmode: boolean;\r\n    };\r\n  }\r\n  const { darkmode } = useSelector((state: RootStateGlobalReducer) => ({\r\n    ...state.GlobalReducer,\r\n  }));\r\n\r\n  const darkmodeReducer = darkmode;\r\n\r\n  const originalfilterImageRef = useRef<HTMLDivElement>(null);\r\n\r\n  const [ShowHideNegativeValue, setShowHideNegativeValue] = useState(\"-\");\r\n\r\n  ///\r\n  ///\r\n  ///\r\n  ///CREATE OPTIONS SLIDER ANIMATION WITH  REACT SPRING\r\n  const modalanimation = useSpring({\r\n    config: {\r\n      mass: 1,\r\n      tension: 120,\r\n      friction: 14,\r\n    },\r\n    transform: `translateX(${ShowHideNegativeValue}${translate}px)`,\r\n    transition: transitionFast ? \"0s\" : \"0.15s\",\r\n    height: \"auto\",\r\n    display: \"flex\",\r\n    width: `auto`,\r\n    padding: \"0px\",\r\n    margin: \"auto\",\r\n    paddingLeft: typeTop\r\n      ? matchPc\r\n        ? \"0px\"\r\n        : matchTablet\r\n        ? \"22px\"\r\n        : \"9px\"\r\n      : \"0px\",\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {selectedImage ? (\r\n        <Grid\r\n          container\r\n          className={\r\n            darkmodeReducer\r\n              ? `optionsTop-background-dark `\r\n              : `optionsTop-background-light `\r\n          }\r\n          style={{\r\n            zIndex: 1,\r\n            padding: \"0px\",\r\n            position: \"relative\",\r\n            margin: \"0 auto\",\r\n            overflow: \"hidden\",\r\n            left: \"0px\",\r\n            height: \"auto\",\r\n            paddingBottom: \"1px\",\r\n          }}\r\n        >\r\n          <animated.div ref={originalfilterImageRef} style={modalanimation}>\r\n            {selectedImage.map((imagee: any, index: any) => {\r\n              <Grid key={index} item xs={12}>\r\n                <img\r\n                  id={itemUploadRef.current[index]}\r\n                  src={\r\n                    itemUploadRef.current[index]\r\n                      ? itemUploadRef.current[index].src\r\n                      : null\r\n                  }\r\n                  style={{\r\n                    width: \"30%\",\r\n                    height: \"auto\",\r\n                    position: \"relative\",\r\n                    margin: \"auto\",\r\n                    marginRight: index === 0 ? \"20px\" : \"0px\",\r\n                  }}\r\n                />\r\n              </Grid>;\r\n            })}\r\n          </animated.div>\r\n        </Grid>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport const FilterMode = React.memo(FilterModex);\r\n"]},"metadata":{},"sourceType":"module"}